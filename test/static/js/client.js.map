{"version":3,"sources":["Array.js","Number.js","Object.js","game/Engine.js","game/Food.js","game/Game.js","game/Snake.js","game/Sounds.js","game/gameProps.js","game/gestureViewer.js","game/helpers.js","game/interface.js","game/snakeControls.js","game/components/DialogBox.js","game/components/InputNumber.js","game/components/SnakeChooser.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClntDA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpEA;AACA;AACA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"client.js","sourcesContent":["Array.prototype.isEqual = function(arr){\n    return JSON.stringify(this) === JSON.stringify(arr);\n}\n\nArray.prototype.sumWith = function(...arrays){\n    var arrays = [this, ...arrays].sort((a, b) => b.length - a.length), // Order by DESC\n        newArray = [...arrays[0]]; // Largest array of the list\n\n    for (let i = 1, arrLeng = arrays.length; i < arrLeng; i++) {\n        const array = arrays[i];\n        for (let j = 0, itemLeng = array.length; j < itemLeng; j++) {\n            const item = array[j];\n            newArray[j] += item;\n        }\n    }\n\n    return newArray;\n}\n\nArray.prototype.sumAll = function(){\n    return this.reduce((total, sum) => total + sum, 0);\n}\n\nArray.prototype.lastItem = function(){\n    return this[this.length - 1];\n}\n\nArray.prototype.includesArr = function(arr){\n\n    for (let i = this.length - 1; i >= 0; i--){\n        if(this[i].isEqual(arr)) return true;\n    }\n\n}\n\nArray.prototype.shuffle = function(){\n\n    var tempArr = [];\n\n    for ( var i = 0, L = this.length; i < L; i++ ) {\n        // The following line removes one random element from arr\n        // and pushes it onto tempArr\n        tempArr.push(this.splice(Math.floor(Math.random() * this.length), 1)[0]);\n    }\n\n    // Push the remaining item onto tempArr\n    tempArr.push(this[0]);\n    return tempArr;\n\n}\n\nArray.prototype.clear = function(){\n    this.length = 0;\n}","Number.prototype.isEqual = function(...values){\n\n    for(let i = 0, L = values.length; i < L; i++){\n\n        if(this == values[i]) return true;\n\n    }\n\n    return false;\n\n}","Object.prototype.merge = function(object){\n    for (const key in object) this[key] = object[key];\n}","function Engine(game){\n\n    var $canvas = game.ctx.canvas;\n\n    // Elements to render\n    var objects = [];\n\n    this.draw = () => {\n\n        // Clear the canvas\n        game.ctx.clearRect(0, 0, $canvas.width, $canvas.height);\n\n        var i = objects.length;\n\n        while(i--){\n            // Draw/Render elements\n            if(typeof objects[i]['draw'] == 'function') objects[i]['draw']();\n        }\n\n    }\n\n    this.add = object => {\n\n        objects.push(object);\n                \n        object.update = _object => {\n            for (const key in _object) object[key] = _object[key];\n            requestAnimationFrame(this.draw);\n        }\n        \n    }\n\n    this.clear = () => objects = [];\n\n}","function Food(game, id){\n\n    this.id = id;\n\n    this.color;\n\n    // Previous position (used to compare and know when the current position is changed)\n    var prevPosition = [];\n\n    // Position of the food\n    this.position = [];\n\n    game.engine.add(this);\n\n    // Render\n    this.draw = () => {\n\n        // Checks if food position has changed\n        if(!this.position.isEqual(prevPosition)){\n            // Play sound of eating\n            game.sounds.ate.play;\n            prevPosition = [...this.position];\n        }\n\n        // If don't have color stop now\n        if(!this.color) return;\n\n        game.ctx.fillStyle = this.color;\n\n        game.ctx.beginPath();\n\n        game.ctx.arc(\n            this.position[0] * game.tileSize + game.tileSize / 2,\n            this.position[1] * game.tileSize + game.tileSize / 2,\n            game.tileSize / 2,\n            0,\n            Math.PI * 2\n        );\n        \n        game.ctx.closePath();\n\n        game.ctx.fill();\n\n    }\n\n}","/**\n * Main class that starts the game\n * It receives as parameter the canvas that goes the whole game\n *\n * @param {*} $canvas\n */\nfunction Game($canvas){\n\n    // Define properties\n    var tileSize;\n    var status;\n    var $game = $canvas.parentNode;\n    var mute = localStorage.getItem(\"mute\") == 'true';\n\n    Object.defineProperties(this, {\n\n        // ID of socket\n        id: { writable: true },\n\n        time: { value: 0, writable: true },\n\n        // Will receive the winner at the end of the game\n        winner: { writable: true },\n\n        // Stores the players before sending for the engine to process\n        playersInTheRoom: { value: [], writable: false },\n\n        // Players to be processed by engine\n        players: { value: [], writable: false },\n\n        // Foods to be processed by the engine\n        foods: { value: [], writable: false },\n\n        multiplayerLocalAllow: { value: false, writable: true },\n\n        socket: { value: io(), writable: false },\n\n        tileSize: {\n\n            set: val => {\n                tileSize = Math.floor(+val);\n                $canvas.width = this.tileSize * gameProps.tiles[0];\n                $canvas.height = this.tileSize * gameProps.tiles[1];\n                $canvas.style.backgroundSize = `${this.tileSize}px ${this.tileSize}px`;\n            },\n\n            get: () => tileSize\n\n        },\n\n        ctx: {\n            value: $canvas.getContext('2d'),\n            writable: false\n        },\n\n        // Status of the game\n        status: {\n\n            set: newStatus => {\n                if(newStatus == 'game-over') this.sounds.gameOver.play;\n                $game.className = status = newStatus;\n            },\n\n            get: () => status\n\n        },\n\n        // Get the winner of the match\n        colorsInUse: {\n\n            get: () => {\n\n                var colorsInUse = [];\n\n                this.for('playersInTheRoom', player =>\n                    colorsInUse.push(player.color));\n\n                return colorsInUse;\n\n            }\n\n        },\n\n        // Sound of the game\n        mute: {\n            \n            set: Bool => {\n\n                mute = !!Bool;\n                localStorage.setItem('mute', mute);\n                this.interface.audioToggle(mute);\n\n            },\n\n            get: () => mute\n\n        }\n\n    });\n\n    /*\n    * Factory:\n    *   The objects have to be instantiated later because they receive \"this\" as a parameter and trying to access the properties before will probably give the error.\n    */\n    Object.defineProperties(this, {\n\n        engine: { value: new Engine(this), writable: false },\n\n        interface: { value: new Interface(this), writable: false },\n\n        sounds: { value: new Sounds(this), writable: false }\n\n    });\n\n    this.socket.on('is playing', () =>\n        this.interface.dialogBox.alert('Danied', 'The game is already happening. Try again later.'));\n\n    this.socket.on('teste', t => console.log(t));\n\n    this.interface.audioToggle(mute);\n    gestureViewer(this);\n\n}\n\nGame.prototype.start = function(){\n\n    this.interface.hideModal();\n    this.clear();\n\n    this.addPlayers();\n    this.addFoods();\n\n    this.status = \"playing\";\n\n}\n\nGame.prototype.clear = function(){\n    this.players.clear();\n    this.foods.clear();\n    this.winner = null;\n    this.engine.clear();\n}\n\nGame.prototype.for = function(object, fn){\n\n    if(typeof object == 'object'){\n\n        for(let i = 0, L = object.length; i < L; i++){\n            \n            if(fn(object[i], i) == false) break;\n        }\n\n    }else{\n\n        for(let id = 0, L = this[object].length; id < L; id++){\n            if(fn(this[object][id], id) == false) break;\n        }\n\n    }\n\n}\n\nGame.prototype.addPlayers = function(){\n\n    let playersInTheRoom = this.playersInTheRoom.length;\n    for (let i = 0; i < playersInTheRoom; i++) {\n\n        const playerInTheRoom = this.playersInTheRoom[i];\n        let player = new Snake(this, playerInTheRoom);\n        this.players.push(player);\n\n    }\n\n}\n\nGame.prototype.addFoods = function(){\n\n    this.foods.push(new Food(this, this.foods.length));\n\n    if(this.foods.length < gameProps.foods.qnt)\n        this.addFoods();\n\n}\n\nGame.prototype.resizeCanvas = function(){\n\n\n    var $snakes = document.querySelectorAll('.snake-chooser .snake');\n    const chooseSnakeSize = () => {\n        for (let i = $snakes.length - 1; i >= 0; i--) {\n            $snakes[i].style.width = `${this.tileSize}px`;\n            $snakes[i].style.height = `${this.tileSize}px`;\n        }\n    }\n\n    const resizeCanvas = () => {\n       \n        let winSize = [window.innerWidth, window.innerHeight]; // X, Y\n        let tileSize = [0, 0].map((_, i) => winSize[i] / gameProps.tiles[i]);\n        this.tileSize = tileSize[tileSize[0] > tileSize[1] ? 1 : 0];\n\n        chooseSnakeSize();\n        \n    }\n\n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvas);\n\n}\n\nGame.prototype.login = function(playerNickname, callback){\n\n    this.socket.emit('login', {\n        playerNickname: playerNickname\n    });\n\n    this.socket.on('logged', data =>{\n\n        gameProps = Object.assign(gameProps, data.gameProps);\n\n        data.player.idLocal = 0;\n        this.multiplayerLocalAllow = data.multiplayerLocal;\n\n        this.id = data.myID;\n\n        this.playersInTheRoom.push(...data.playersInTheRoom, data.player);\n    \n        this.resizeCanvas();\n        this.socketEvents();\n\n        if(typeof callback == 'function') callback(data);\n\n    });\n\n    this.socket.on('multiplayer disabled', () => {\n        this.socket.off('login');\n        this.socket.off('logged');\n        this.socket.off('multiplayer disabled');\n\n        this.interface.dialogBox.alert('Danied', 'Local multiplayer disabled.');\n    });\n\n}\n\nGame.prototype.socketEvents = function(){\n\n    this.socket.on('start', () => {\n        \n        this.start();\n        this.interface.listPlayersInGame();\n\n    });\n\n    game.socket.on('game over', winner => {\n\n        this.winner = winner;\n        this.status = 'game-over';\n        this.interface.gameOver();\n\n    });\n\n    this.socket.on('new player', player => {\n        this.playersInTheRoom.push(player);\n        this.interface.listPlayersInTheRoom();\n    });\n\n    this.socket.on('color in use', () =>\n        this.interface.dialogBox.alert('Denied', 'This color is being used.'));\n\n    this.socket.on('prepare game', arr => {\n\n        this.playersInTheRoom.push(...arr);\n        this.socket.emit('start');\n\n    });\n\n    this.socket.on('playersInTheRoom update', data => {\n        var i = data.i;\n        delete data.i;\n        this.playersInTheRoom[i].merge(data);\n        game.interface.listPlayersInTheRoom();\n    });\n\n    this.socket.on('delete player', i => {\n        this.playersInTheRoom.splice(i, 1);\n        this.interface.listPlayersInTheRoom();\n    });\n\n    this.socket.on('update', updates => {\n\n        this.for(Object.keys(updates), key => {\n\n            this.for(updates[key], (update, i) => {\n\n                if(update){\n\n                    this.for(Object.keys(update), key2 =>\n                        this[key][i][key2] = update[key2]);\n\n                }\n\n            });\n\n            this.engine.draw();\n\n        });\n\n    });\n\n    this.socket.on('multiplayer-local address', this.interface.openMultiplayerLocal);\n\n    this.socket.on('multiplayer-local deny', () => {\n\n        this.playersInTheRoom.clear();\n        this.clear();\n        this.interface.show('login');\n\n        this.socket.emit('logout');\n\n        this.interface.dialogBox.alert('Danied', 'Local multiplayer disabled.', () => location.reload());\n\n    });\n\n}","function Snake(game, props){\n\n    this.id = null;\n\n    // Id in relation to the player in the machine itself (0 is player 1, 1 is player 2)\n    this.idLocal = null;\n\n    this.enhancerId = null;\n\n    this.nickname = null;\n\n    this.body = [];\n\n    this.color = 0;\n\n    let killed = false;\n    Object.defineProperty(this, 'killed', {\n        get: () => killed,\n        set: Bool => {\n            if(killed = Bool){\n                game.sounds.died.play;\n                game.interface.listPlayersInGame();\n            }\n        }\n    });\n\n    this.merge(props);\n\n    { // Multiplayer\n\n        if(this.idLocal == 0) this.touchArea = 'all';\n\n        if(this.idLocal == 1){\n            game.players[0].touchArea = 'right';\n            this.touchArea = 'left';\n        }\n        \n    }\n\n    game.engine.add(this);\n\n    // Set controlls\n    if(!isNaN(this.idLocal)) new SnakeControls(this, game);\n\n    // Render\n    this.draw = () => {\n\n        if(this.killed) return;\n\n        game.ctx.fillStyle = gameProps.snakes.colors[this.color];\n\n        this.body.forEach(bodyFragment => {\n            game.ctx.fillRect(\n                bodyFragment[0] * game.tileSize,\n                bodyFragment[1] * game.tileSize,\n                game.tileSize,\n                game.tileSize\n            );\n        });\n\n    }\n\n}","function Sounds(game){\n\n    const $canvas = game.ctx.canvas;\n\n    const path = 'sounds';\n\n    const soundMap = {\n        menu: 'menu.wav',\n        back: 'back.wav',\n        prev: 'prev.wav',\n        next: 'next.wav',\n        died: 'died.wav',\n        ate: 'ate.wav',\n        enter: 'enter.wav',\n        gameOver: 'game-over.wav'\n    }\n\n    const addAudioPlayers = (() => {\n\n        const keys = Object.keys(soundMap);\n        for (let i = 0, L = keys.length; i < L; i++) {\n            const key = keys[i];\n            const sound = soundMap[key];\n\n            let audioExtension = sound.split('.').lastItem();\n\n            let $player = document.createElement('audio');\n            $player.className = 'sound';\n            $player.src = `${path}/${sound}`;\n            $player.setAttribute('type', `audio/${audioExtension == 'mp3' ? 'mpeg' : audioExtension}`);\n\n            $canvas.parentNode.insertBefore($player, $canvas);\n\n            this[key] = {};\n\n            Object.defineProperties(this[key], {\n\n                play: {\n                    get: () => {\n                        if(!game.mute) $player.play();\n                    }\n                },\n\n                volume: {\n                    get: () => $player.volume,\n                    set: v => $player.volume = v\n                }\n\n            });\n\n        }\n\n    })();\n\n}","var gameProps = {}","function gestureViewer(game){\n\n    var $gestureViewer = document.querySelector('#gestureViewer'),\n        $canvas = document.createElement('canvas'),\n        ctx = $canvas.getContext('2d');\n\n    $gestureViewer.appendChild($canvas);\n\n    var ballPoints = {};\n    var counter = 0;\n\n    const drawLine = (x0, y0, x1, y1) => {\n        ctx.strokeStyle = \"#7da278\";\n        ctx.lineCap = \"round\";\n\t    ctx.lineWidth = 8;\n        ctx.beginPath();\n        ctx.moveTo(x0, y0);\n        ctx.lineTo(x1, y1);\n        ctx.stroke();\n    }\n\n    window.addEventListener('touchstart', e => {\n        if(game.status != 'playing') return;\n\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\n            const touch = e.changedTouches[i];\n            var ballPoint = {\n                x: touch.pageX,\n                y: touch.pageY\n            }\n            ballPoints[touch.identifier || ++counter] = ballPoint;\n            drawLine(ballPoint.x - 1, ballPoint.y, ballPoint.x, ballPoint.y);\n        }\n    });\n\n    window.addEventListener('touchmove', e => {\n        if(game.status != 'playing') return;\n\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\n            const touch = e.changedTouches[i];\n            var ballPoint = ballPoints[touch.identifier || counter],\n                x = touch.pageX, y = touch.pageY;\n\n            drawLine(ballPoint.x, ballPoint.y, x, y);\n            ballPoint.x = x;\n            ballPoint.y = y;\n        }\n    });\n\n    window.addEventListener('touchend', e => {\n        if(game.status != 'playing') return;\n        \n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\n            const touch = e.changedTouches[i];\n            delete ballPoints[touch.identifier || counter];\n        }\n        setTimeout(() => ctx.clearRect(0, 0, $canvas.width, $canvas.height), 200);\n    });\n\n    document.ontouchmove = function(e){ e.preventDefault(); } // Disable page scroll\n\n    const canvasFullSize = () => {\n        $canvas.width = window.innerWidth;\n        $canvas.height = window.innerHeight;\n    }\n\n    canvasFullSize();\n    window.addEventListener('resize', canvasFullSize);\n}","window.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\nwindow.isLumia = /Lumia/i.test(navigator.userAgent);\nwindow.isElectron = /Electron/i.test(navigator.userAgent);","function Interface(game){\n\n    const $ = (path, path2) => {\n\n        var get;\n\n        if(path2) get = path.querySelectorAll(path2); // Get in path (Element)\n        else get = document.querySelectorAll(path); // Get in document\n\n        return get.length > 1 ? get : get[0];\n\n    }\n\n    // Get elements of the DOM\n    const $interface     = $('#interface'),\n          $modal         = $($interface, '.modal'),\n          $loginForm     = $($interface, '#login form'),\n          $inputNickname = $($loginForm, '[name=\"player_name\"]');\n        \n    const $submitChooser = $('#after-login .submit');\n\n    const $mainMenu         = $($interface, '#main-menu'),\n          $welcomeText      = $($mainMenu, '#welcome'),\n          $singlePlayer     = $($mainMenu, '#single-player'),\n          $multiplayer      = $($mainMenu, '#multiplayer'),\n          $multiplayerLocal = $($mainMenu, '#multiplayer-local'),\n          $tutorial         = $($mainMenu, '#tutorial');\n\n    const $singlePlayerMenu        = $($interface, '#single-player-menu'),\n          $singlePlayerSubmit      = $($singlePlayerMenu, '.submit'),\n          $singlePlayer_playersQtn = $($singlePlayerMenu, '.input-number'),\n          $backSinglePlayerMenu    = $($singlePlayerMenu, '.back');\n\n    const $multiplayerMenu        = $($interface, '#multiplayer-menu'),\n          $multiplayerSubmit      = $($multiplayerMenu, '.submit'),\n          $player2Name            = $($multiplayerMenu, '[name=\"player_name\"]'),\n          $multiplayer_playersQtn = $($multiplayerMenu, '.input-number'),\n          $backMultiplayerMenu    = $($multiplayerMenu, '.back');\n        \n    const $multiplayerLocalMenu       = $($interface, '#multiplayer-local-menu'),\n          $connectedPlayers           = $($interface, '.connected-players ul'),\n          $multiplayerLocalMenuSubmit = $($multiplayerLocalMenu, '.submit'),\n          $playerCounter              = $($multiplayerLocalMenu, '.player-counter span'),\n          $address                    = $($multiplayerLocalMenu, '.address'),\n          $backMultiplayerLocalMenu   = $($multiplayerLocalMenu, '.back');\n    \n    const $tutorialScreen = $('#tutorial-screen'),\n          $tutorialBack = $($tutorialScreen, '.back');\n    \n    const $gameOver       = $($interface, '#game-over'),\n          $gameOverText   = $($gameOver, 'h2 span'),\n          $gameOverSubmit = $($gameOver, '.submit');\n        \n    const $nameOfPlayers = $($interface, '#name-of-players ul');\n\n    const $audioToggle = $('#audio-toggle');\n\n    const $label = $($interface, '#label')\n\n    const snakeColor = color => gameProps.snakes.colors[color];\n\n    this.dialogBox     = new DialogBox($interface);\n    const snakeChooser = new SnakeChooser($interface);\n\n    new InputNumber();\n\n    // Get last nickname logged\n    if(localStorage.getItem('lastNickname'))\n        $inputNickname.value = localStorage.getItem('lastNickname');\n\n    $inputNickname.focus();\n\n    this.showModal = () => $modal.classList.remove('closed');\n    this.hideModal = () => $modal.classList.add('closed');\n    this.show = what => $interface.className = what;\n\n    // List the players who entered the room (before the game starts)\n    this.listPlayersInTheRoom = () => {\n\n        let lis = '';\n\n        game.for('playersInTheRoom', player => {\n            lis += `<li>\n                        <span\n                            style=\"color: ${snakeColor(player.color)};\">\n                            ${player.nickname}\n                        </span>\n                        <div class=\"snake\"\n                            style=\"background: ${snakeColor(player.color)};\n                            width: ${game.tileSize}px; height: ${game.tileSize}px;\">\n                        </div>\n                    </li>`;\n        });\n\n        $connectedPlayers.innerHTML = lis;\n        $playerCounter.innerText = game.playersInTheRoom.length;\n\n    }\n\n    // List players in game (After start)\n    this.listPlayersInGame = () => {\n        \n        let li = '';\n\n        game.for('players', player =>\n            li += `<li class=\"${player.killed ? 'dead' : ''}\" style=\"color: ${snakeColor(player.color)};\">${player.nickname}</li>`);\n\n        $nameOfPlayers.innerHTML = li;\n\n    }\n\n    // Show the game-over screen\n    this.gameOver = () => {\n\n        $gameOverText.style.color = game.winner ? snakeColor(game.winner.color) : 'inherit';\n        $gameOverText.innerText = game.winner ? game.winner.nickname : 'Nobody';\n\n        this.show('game-over');\n\n    }\n\n    /**\n     * Standard functions that occur when you click the game over button\n     * \n     * @param {*} show : What will be shown after the click\n     * @param {*} moreFn : Extra function (Like a callback)\n     */\n    const gameOverSubmit = (show, moreFn) => {\n\n        $gameOverSubmit.onclick = () => {\n            game.status = 'toStart';\n            game.clear();\n            this.showModal();\n            this.show(show);\n            game.sounds.menu.play;\n            typeof moreFn == 'function' && moreFn();\n        }\n\n    }\n\n    // Login event\n    $loginForm.addEventListener('submit', e => {\n        game.login($inputNickname.value, data => {\n\n            $welcomeText.innerHTML = `Hi, ${$inputNickname.value}`;\n            snakeChooser.changeSnakeColor();\n\n            this.show('after-login');\n\n            localStorage.setItem('lastNickname', $inputNickname.value);\n\n            game.sounds.enter.play;\n\n        });\n    });\n\n    { // Single player\n        $singlePlayer.addEventListener('click', e =>\n            this.show('single-player-menu'));\n\n        $singlePlayerSubmit.addEventListener('click', () => {\n\n            game.socket.emit('prepare single-player', $singlePlayer_playersQtn.getAttribute('data-value'));\n            gameOverSubmit('single-player-menu', () => game.playersInTheRoom.length = 1);\n\n        });\n\n        $backSinglePlayerMenu.addEventListener('click', () => this.show('main-menu'));\n    }\n\n    { // Multiplayer\n\n        $multiplayer.addEventListener('click', () => {\n\n            snakeChooser.currentColor = 0;\n            snakeChooser.changeSnakeColor();\n            this.show('multiplayer-menu');\n\n        });\n\n        $multiplayerSubmit.addEventListener('click', () => {\n\n            game.playersInTheRoom = [game.playersInTheRoom[0]];\n\n            game.socket.emit('prepare multiplayer', {\n                nickname: $player2Name.value,\n                color: snakeChooser.currentColor,\n                nPlayers: $multiplayer_playersQtn.getAttribute('data-value')\n            });\n\n            gameOverSubmit('multiplayer-menu', () => game.playersInTheRoom.length = 1);\n\n        });\n\n        $backMultiplayerMenu.addEventListener('click', () => this.show('main-menu'));\n\n    }\n\n    { // Multiplayer-local\n\n        $multiplayerLocal.addEventListener('click', () => {\n\n            game.multiplayerLocalAllow = true;\n            game.socket.emit('multiplayer-local allow');\n            $multiplayerLocalMenuSubmit.removeAttribute('disabled');\n\n        });\n\n        this.openMultiplayerLocal = adress => {\n\n            $address.innerText = adress;\n            this.show('multiplayer-local-menu');\n\n        }\n\n        game.socket.on('delete player', () => $multiplayerLocalMenuSubmit.removeAttribute('disabled'));\n\n        $multiplayerLocalMenuSubmit.addEventListener('click', () => {\n            \n            $multiplayerLocalMenuSubmit.setAttribute('disabled', true);\n            game.socket.emit('ready');\n            \n            gameOverSubmit('multiplayer-local-menu', () => $multiplayerLocalMenuSubmit.removeAttribute('disabled'));\n\n        });\n\n        $backMultiplayerLocalMenu.addEventListener('click', () => {\n\n            game.playersInTheRoom.length = 1;\n            game.socket.emit('multiplayer-local deny');\n            this.show('main-menu');\n\n        });\n\n    }\n\n    $tutorial.addEventListener('click', () => this.show('tutorial-screen'));\n    $tutorialBack.addEventListener('click', () => this.show('main-menu'));\n\n    $submitChooser.addEventListener('click', () =>{\n\n        game.socket.emit('change color', snakeChooser.currentColor);\n\n        game.socket.on('color not in use', () => {\n\n            game.socket.off('color not in use');\n    \n            // if other player enter\n            if(game.multiplayerLocalAllow){\n    \n                this.listPlayersInTheRoom();\n                $multiplayerLocalMenu.className = 'multiplayer-local-viewer';\n                $($multiplayerLocalMenu, ('h4')).innerText = 'Waiting to play ...';\n                this.show('multiplayer-local-menu');\n    \n            // If room creator enter\n            }else this.show('main-menu');\n    \n        });\n\n    });\n\n    { // Audio\n\n        this.audioToggle = mute => $audioToggle.className = mute ? 'muted' : '';\n        $audioToggle.addEventListener('click', () => game.mute = !game.mute);\n\n        // Set sounds\n        [$singlePlayer, $multiplayer, $multiplayerLocal, $submitChooser].map($el =>\n            $el.addEventListener('click', () => game.sounds.menu.play));\n\n        [$backSinglePlayerMenu, $backMultiplayerMenu, $backMultiplayerLocalMenu].map($el =>\n            $el.addEventListener('click', () => game.sounds.back.play));\n\n        [$singlePlayerSubmit, $multiplayerSubmit, $multiplayerLocalMenuSubmit].map($el =>\n            $el.addEventListener('click', () => game.sounds.enter.play));\n\n    }\n\n    this.label = (text, type, hideTime = 1000) => {\n\n        const $type = document.createElement(type == 0 ? 'span' : 'strong');\n\n        $type.innerText = text;\n\n        $label.innerHTML = '';\n        $label.appendChild($type);\n\n        setTimeout(() => $type.className = 'show', 0);\n        setTimeout(() => $type.remove(), hideTime);\n\n    }\n\n    game.socket.on('countdown', n => this.label(n, 1));\n\n    game.socket.on('show powerup', p => this.label(p, 0, 500));\n\n}","function SnakeControls(snake, game){\n\n    // Emit movement to server\n    const pushMovement = moveTo => {\n        if(!moveTo) return;\n        game.socket.emit('moveTo', {\n            id: snake.id,\n            moveTo: moveTo\n        });\n    }\n\n    var $touchAreas = document.querySelector('#touch-areas');\n    var $touchArea = {left: $touchAreas.querySelector('#left'), right: $touchAreas.querySelector('#right')};\n\n    // Keyboard\n    var keyMap = (map => map ? {\n\n        directions: Object.keys(map),\n        keys: Object.keys(map).map(k => map[k]),\n\n        direction: function(key){\n            return this.directions[ this.keys.indexOf(key) ];\n        }\n\n    } : undefined)(gameProps.snakes.keyMaps[snake.idLocal]);\n\n    keyMap && window.addEventListener('keydown', e => pushMovement(keyMap.direction(e.key)));\n\n    // For touch devices \n    let touchstart = {}, touchmove = {}, sensibilityTouch = gameProps.snakes.sensibilityTouch;\n    const directions = [[\"left\", \"right\"], [\"up\", \"down\"]];\n    const orientationMap = {0: \"portrait-primary\", 180: \"portrait-secondary\", 90: \"landscape-primary\", \"-90\": \"landscape-secondary\"};\n\n    const getOrientation = () => screen.msOrientation || (screen.orientation || screen.mozOrientation || {}).type || orientationMap[window.orientation];\n    let orientation = getOrientation();\n    window.addEventListener('orientationchange', () => orientation = getOrientation());\n    \n    const touchHandle = touchedArea => {\n\n        let dragged = [[], []].map((_, axis) => touchstart[touchedArea][axis] - touchmove[touchedArea][axis]);\n\n        // Windows phone in landscape -_-\n        if(isLumia){\n            if(orientation === \"landscape-primary\") dragged[0] = -dragged[0];\n            else if(orientation === \"landscape-secondary\") dragged[1] = -dragged[1];\n            if(orientation.indexOf('landscape') > -1) dragged.reverse();\n\n            if(orientation === \"portrait-secondary\"){\n                dragged[0] = -dragged[0];\n                dragged[1] = -dragged[1];\n            }\n        }\n\n        if(touchedArea != snake.touchArea && snake.touchArea != 'all') return;\n\n        let touchAxis = +(Math.abs(dragged[0]) < Math.abs(dragged[1])),\n            moveIndex = +(dragged[touchAxis] < 0),\n            direction = directions[touchAxis][moveIndex];\n\n        if(Math.abs(dragged[touchAxis]) >= sensibilityTouch){\n            if(direction != snake.direction) pushMovement(direction);\n            touchstart[touchedArea] = [...touchmove[touchedArea]];\n        }\n\n    }\n\n    const touchPos = e => [e.changedTouches[0].pageX, e.changedTouches[0].pageY];\n\n    if(snake.touchArea){\n        const $touchAreaKeys = Object.keys($touchArea);\n        for (let i = $touchAreaKeys.length - 1; i >=0 ; i--) {\n            const area = $touchAreaKeys[i];\n            $touchArea[area].addEventListener('touchstart', e => touchstart[area] = touchPos(e));\n            $touchArea[area].addEventListener('touchmove', e => {\n\n                e.preventDefault();\n\n                touchmove[area] = touchPos(e);\n                touchHandle(area);\n\n                return false;\n\n            }, { passive: false });\n        }\n    }\n\n}","function DialogBox($interface){\n\n    this.alert = (title, text, callback) => {\n\n        let $modal = $interface.querySelector('.modal');\n\n        let $alert = document.createElement('div');\n        $alert.classList.add('dialog-box', 'alert');\n\n        $alert.innerHTML = `<h1>${title}</h1>\n                           <p>${text}</p>\n                           <button>Ok</button>`;\n\n        let $buttonOk = $alert.querySelector('button');\n\n        $interface.insertBefore($alert, $modal);\n\n        $buttonOk.focus();\n        $buttonOk.addEventListener('click', () => {\n            $buttonOk.parentNode.remove();\n            typeof callback == 'function' && callback();\n        });\n\n    }\n\n}","function InputNumber(){\n    var $inputsNumber = document.querySelectorAll('.input-number');\n\n    for (let i = $inputsNumber.length - 1; i >= 0; i--) {\n        const $inputNumber = $inputsNumber[i];\n        \n        let $input = $inputNumber.querySelector('span'),\n            $decrementButton = $inputNumber.querySelector('.decrement'),\n            $incrementButton = $inputNumber.querySelector('.increment');\n\n        $decrementButton.addEventListener('click', () => {\n\n            let value = +$inputNumber.getAttribute('data-value'),\n                min = $inputNumber.getAttribute('data-min') || -Infinity;\n\n            if(value > min){\n                value--;\n                $input.innerHTML = (value == 0) ? 'o' : value;\n                $inputNumber.setAttribute('data-value', value);\n            }\n\n            game.sounds.prev.play;\n\n        });\n\n        $incrementButton.addEventListener('click', () => {\n\n            let value = +$inputNumber.getAttribute('data-value'),\n                max = $inputNumber.getAttribute('data-max') || Infinity;\n\n            if(value < max){\n                value++;\n                $input.innerHTML = (value == 0) ? 'o' : value;\n                $inputNumber.setAttribute('data-value', value);\n            }\n\n            game.sounds.next.play;\n\n        });\n\n    }\n}","function SnakeChooser($interface){\n\n    var $snakeChoosers = $interface.querySelectorAll('.snake-chooser');\n\n    this.currentColor = 0;\n\n    this.changeSnakeColor = () => {\n\n        var colorsInUse = game.colorsInUse;\n\n        for (let i = $snakeChoosers.length - 1; i >= 0; i--) {\n            const $snakeChooser = $snakeChoosers[i];\n            \n            let $chooserPrev = $snakeChooser.querySelector('.chooser-prev'),\n                $chooserNext = $snakeChooser.querySelector('.chooser-next'),\n                $snake = $snakeChooser.querySelector('.snake');\n\n            $chooserPrev.classList.remove('disabled');\n            $chooserNext.classList.remove('disabled');\n\n            if(colorsInUse.includes(this.currentColor))\n                $snake.classList.add('color-in-use');\n            else\n                $snake.classList.remove('color-in-use');\n\n            if(this.currentColor == 0)\n                $chooserPrev.classList.add('disabled');\n\n            if(this.currentColor == gameProps.snakes.colors.length - 1)\n                $chooserNext.classList.add('disabled');\n\n            $snake.style.background = gameProps.snakes.colors[this.currentColor];\n        }\n    }\n\n    for (let i = $snakeChoosers.length - 1; i >= 0; i--) {\n        const $snakeChooser = $snakeChoosers[i];\n        \n        let $chooserPrev = $snakeChooser.querySelector('.chooser-prev'),\n            $chooserNext = $snakeChooser.querySelector('.chooser-next');\n\n        $chooserPrev.addEventListener('click', e => {\n            if(e.target.className.indexOf('disabled') == -1){\n                this.currentColor--;\n                this.changeSnakeColor();\n                game.sounds.prev.play;\n            }\n        });\n\n        $chooserNext.addEventListener('click', e => {\n            if(e.target.className.indexOf('disabled') == -1){\n                this.currentColor++;\n                this.changeSnakeColor();\n                game.sounds.next.play;\n            }\n        });\n\n    }\n\n}"]}