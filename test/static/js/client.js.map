{"version":3,"sources":["Array.js","Number.js","Object.js","game/Engine.js","game/Food.js","game/Game.js","game/gameProps.js","game/gestureViewer.js","game/helpers.js","game/interface.js","game/Snake.js","game/snakeControls.js","game/Sounds.js","game/components/DialogBox.js","game/components/InputNumber.js","game/components/SnakeChooser.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClnUA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpztFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"client.js","sourcesContent":["Array.prototype.isEqual = function(arr){\r\n    return JSON.stringify(this) === JSON.stringify(arr);\r\n}\r\n\r\nArray.prototype.sumWith = function(...arrays){\r\n    var arrays = [this, ...arrays].sort((a, b) => b.length - a.length), // Order by DESC\r\n        newArray = [...arrays[0]]; // Largest array of the list\r\n\r\n    for (let i = 1, arrLeng = arrays.length; i < arrLeng; i++) {\r\n        const array = arrays[i];\r\n        for (let j = 0, itemLeng = array.length; j < itemLeng; j++) {\r\n            const item = array[j];\r\n            newArray[j] += item;\r\n        }\r\n    }\r\n\r\n    return newArray;\r\n}\r\n\r\nArray.prototype.sumAll = function(){\r\n    return this.reduce((total, sum) => total + sum, 0);\r\n}\r\n\r\nArray.prototype.lastItem = function(){\r\n    return this[this.length - 1];\r\n}\r\n\r\nArray.prototype.includesArr = function(arr){\r\n\r\n    for (let i = this.length - 1; i >= 0; i--){\r\n        if(this[i].isEqual(arr)) return true;\r\n    }\r\n\r\n}\r\n\r\nArray.prototype.shuffle = function(){\r\n\r\n    var tempArr = [];\r\n\r\n    for ( var i = 0, L = this.length; i < L; i++ ) {\r\n        // The following line removes one random element from arr\r\n        // and pushes it onto tempArr\r\n        tempArr.push(this.splice(Math.floor(Math.random() * this.length), 1)[0]);\r\n    }\r\n\r\n    // Push the remaining item onto tempArr\r\n    tempArr.push(this[0]);\r\n    return tempArr;\r\n\r\n}\r\n\r\nArray.prototype.clear = function(){\r\n    this.length = 0;\r\n}","Number.prototype.isEqual = function(...values){\r\n\r\n    for(let i = 0, L = values.length; i < L; i++){\r\n\r\n        if(this == values[i]) return true;\r\n\r\n    }\r\n\r\n    return false;\r\n\r\n}","Object.prototype.merge = function(object){\r\n    for (const key in object) this[key] = object[key];\r\n}","function Engine(game){\r\n\r\n    var $canvas = game.ctx.canvas;\r\n\r\n    // Elements to render\r\n    var objects = [];\r\n\r\n    this.draw = () => {\r\n\r\n        // Clear the canvas\r\n        game.ctx.clearRect(0, 0, $canvas.width, $canvas.height);\r\n\r\n        var i = objects.length;\r\n\r\n        while(i--){\r\n            // Draw/Render elements\r\n            if(typeof objects[i]['draw'] == 'function') objects[i]['draw']();\r\n        }\r\n\r\n    }\r\n\r\n    this.add = object => {\r\n\r\n        objects.push(object);\r\n                \r\n        object.update = _object => {\r\n            for (const key in _object) object[key] = _object[key];\r\n            requestAnimationFrame(this.draw);\r\n        }\r\n        \r\n    }\r\n\r\n    this.clear = () => objects = [];\r\n\r\n}","function Food(game, id){\r\n\r\n    this.id = id;\r\n\r\n    this.color;\r\n\r\n    // Previous position (used to compare and know when the current position is changed)\r\n    var prevPosition = [];\r\n\r\n    // Position of the food\r\n    this.position = [];\r\n\r\n    game.engine.add(this);\r\n\r\n    // Render\r\n    this.draw = () => {\r\n\r\n        // Checks if food position has changed\r\n        if(!this.position.isEqual(prevPosition)){\r\n            // Play sound of eating\r\n            game.sounds.ate.play;\r\n            prevPosition = [...this.position];\r\n        }\r\n\r\n        // If don't have color stop now\r\n        if(!this.color) return;\r\n\r\n        game.ctx.fillStyle = this.color;\r\n\r\n        game.ctx.beginPath();\r\n\r\n        game.ctx.arc(\r\n            this.position[0] * game.tileSize + game.tileSize / 2,\r\n            this.position[1] * game.tileSize + game.tileSize / 2,\r\n            game.tileSize / 2,\r\n            0,\r\n            Math.PI * 2\r\n        );\r\n        \r\n        game.ctx.closePath();\r\n\r\n        game.ctx.fill();\r\n\r\n    }\r\n\r\n}","/**\r\n * Main class that starts the game\r\n * It receives as parameter the canvas that goes the whole game\r\n *\r\n * @param {*} $canvas\r\n */\r\nfunction Game($canvas){\r\n\r\n    // Define properties\r\n    var tileSize;\r\n    var status;\r\n    var $game = $canvas.parentNode;\r\n    var mute = localStorage.getItem(\"mute\") == 'true';\r\n\r\n    Object.defineProperties(this, {\r\n\r\n        // ID of socket\r\n        id: { writable: true },\r\n\r\n        time: { value: 0, writable: true },\r\n\r\n        // Will receive the winner at the end of the game\r\n        winner: { writable: true },\r\n\r\n        // Stores the players before sending for the engine to process\r\n        playersInTheRoom: { value: [], writable: false },\r\n\r\n        // Players to be processed by engine\r\n        players: { value: [], writable: false },\r\n\r\n        // Foods to be processed by the engine\r\n        foods: { value: [], writable: false },\r\n\r\n        multiplayerLocalAllow: { value: false, writable: true },\r\n\r\n        socket: { value: io(), writable: false },\r\n\r\n        tileSize: {\r\n\r\n            set: val => {\r\n                tileSize = Math.floor(+val);\r\n                $canvas.width = this.tileSize * gameProps.tiles[0];\r\n                $canvas.height = this.tileSize * gameProps.tiles[1];\r\n                $canvas.style.backgroundSize = `${this.tileSize}px ${this.tileSize}px`;\r\n            },\r\n\r\n            get: () => tileSize\r\n\r\n        },\r\n\r\n        ctx: {\r\n            value: $canvas.getContext('2d'),\r\n            writable: false\r\n        },\r\n\r\n        // Status of the game\r\n        status: {\r\n\r\n            set: newStatus => {\r\n                if(newStatus == 'game-over') this.sounds.gameOver.play;\r\n                $game.className = status = newStatus;\r\n            },\r\n\r\n            get: () => status\r\n\r\n        },\r\n\r\n        // Get the winner of the match\r\n        colorsInUse: {\r\n\r\n            get: () => {\r\n\r\n                var colorsInUse = [];\r\n\r\n                this.for('playersInTheRoom', player =>\r\n                    colorsInUse.push(player.color));\r\n\r\n                return colorsInUse;\r\n\r\n            }\r\n\r\n        },\r\n\r\n        // Sound of the game\r\n        mute: {\r\n            \r\n            set: Bool => {\r\n\r\n                mute = !!Bool;\r\n                localStorage.setItem('mute', mute);\r\n                this.interface.audioToggle(mute);\r\n\r\n            },\r\n\r\n            get: () => mute\r\n\r\n        }\r\n\r\n    });\r\n\r\n    /*\r\n    * Factory:\r\n    *   The objects have to be instantiated later because they receive \"this\" as a parameter and trying to access the properties before will probably give the error.\r\n    */\r\n    Object.defineProperties(this, {\r\n\r\n        engine: { value: new Engine(this), writable: false },\r\n\r\n        interface: { value: new Interface(this), writable: false },\r\n\r\n        sounds: { value: new Sounds(this), writable: false }\r\n\r\n    });\r\n\r\n    this.socket.on('is playing', () =>\r\n        this.interface.dialogBox.alert('Danied', 'The game is already happening. Try again later.'));\r\n\r\n    this.socket.on('teste', t => console.log(t));\r\n\r\n    this.interface.audioToggle(mute);\r\n    gestureViewer(this);\r\n\r\n}\r\n\r\nGame.prototype.start = function(){\r\n\r\n    this.interface.hideModal();\r\n    this.clear();\r\n\r\n    this.addPlayers();\r\n    this.addFoods();\r\n\r\n    this.status = \"playing\";\r\n\r\n}\r\n\r\nGame.prototype.clear = function(){\r\n    this.players.clear();\r\n    this.foods.clear();\r\n    this.winner = null;\r\n    this.engine.clear();\r\n}\r\n\r\nGame.prototype.for = function(object, fn){\r\n\r\n    if(typeof object == 'object'){\r\n\r\n        for(let i = 0, L = object.length; i < L; i++){\r\n            \r\n            if(fn(object[i], i) == false) break;\r\n        }\r\n\r\n    }else{\r\n\r\n        for(let id = 0, L = this[object].length; id < L; id++){\r\n            if(fn(this[object][id], id) == false) break;\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nGame.prototype.addPlayers = function(){\r\n\r\n    let playersInTheRoom = this.playersInTheRoom.length;\r\n    for (let i = 0; i < playersInTheRoom; i++) {\r\n\r\n        const playerInTheRoom = this.playersInTheRoom[i];\r\n        let player = new Snake(this, playerInTheRoom);\r\n        this.players.push(player);\r\n\r\n    }\r\n\r\n}\r\n\r\nGame.prototype.addFoods = function(){\r\n\r\n    this.foods.push(new Food(this, this.foods.length));\r\n\r\n    if(this.foods.length < gameProps.foods.qnt)\r\n        this.addFoods();\r\n\r\n}\r\n\r\nGame.prototype.resizeCanvas = function(){\r\n\r\n\r\n    var $snakes = document.querySelectorAll('.snake-chooser .snake');\r\n    const chooseSnakeSize = () => {\r\n        for (let i = $snakes.length - 1; i >= 0; i--) {\r\n            $snakes[i].style.width = `${this.tileSize}px`;\r\n            $snakes[i].style.height = `${this.tileSize}px`;\r\n        }\r\n    }\r\n\r\n    const resizeCanvas = () => {\r\n       \r\n        let winSize = [window.innerWidth, window.innerHeight]; // X, Y\r\n        let tileSize = [0, 0].map((_, i) => winSize[i] / gameProps.tiles[i]);\r\n        this.tileSize = tileSize[tileSize[0] > tileSize[1] ? 1 : 0];\r\n\r\n        chooseSnakeSize();\r\n        \r\n    }\r\n\r\n    resizeCanvas();\r\n    window.addEventListener('resize', resizeCanvas);\r\n\r\n}\r\n\r\nGame.prototype.login = function(playerNickname, callback){\r\n\r\n    this.socket.emit('login', {\r\n        playerNickname: playerNickname\r\n    });\r\n\r\n    this.socket.on('logged', data =>{\r\n\r\n        gameProps = Object.assign(gameProps, data.gameProps);\r\n\r\n        data.player.idLocal = 0;\r\n        this.multiplayerLocalAllow = data.multiplayerLocal;\r\n\r\n        this.id = data.myID;\r\n\r\n        this.playersInTheRoom.push(...data.playersInTheRoom, data.player);\r\n    \r\n        this.resizeCanvas();\r\n        this.socketEvents();\r\n\r\n        if(typeof callback == 'function') callback(data);\r\n\r\n    });\r\n\r\n    this.socket.on('multiplayer disabled', () => {\r\n        this.socket.off('login');\r\n        this.socket.off('logged');\r\n        this.socket.off('multiplayer disabled');\r\n\r\n        this.interface.dialogBox.alert('Danied', 'Local multiplayer disabled.');\r\n    });\r\n\r\n}\r\n\r\nGame.prototype.socketEvents = function(){\r\n\r\n    this.socket.on('start', () => {\r\n        \r\n        this.start();\r\n        this.interface.listPlayersInGame();\r\n\r\n    });\r\n\r\n    game.socket.on('game over', winner => {\r\n\r\n        this.winner = winner;\r\n        this.status = 'game-over';\r\n        this.interface.gameOver();\r\n\r\n    });\r\n\r\n    this.socket.on('new player', player => {\r\n        this.playersInTheRoom.push(player);\r\n        this.interface.listPlayersInTheRoom();\r\n    });\r\n\r\n    this.socket.on('color in use', () =>\r\n        this.interface.dialogBox.alert('Denied', 'This color is being used.'));\r\n\r\n    this.socket.on('prepare game', arr => {\r\n\r\n        this.playersInTheRoom.push(...arr);\r\n        this.socket.emit('start');\r\n\r\n    });\r\n\r\n    this.socket.on('playersInTheRoom update', data => {\r\n        var i = data.i;\r\n        delete data.i;\r\n        this.playersInTheRoom[i].merge(data);\r\n        game.interface.listPlayersInTheRoom();\r\n    });\r\n\r\n    this.socket.on('delete player', i => {\r\n        this.playersInTheRoom.splice(i, 1);\r\n        this.interface.listPlayersInTheRoom();\r\n    });\r\n\r\n    this.socket.on('update', updates => {\r\n\r\n        this.for(Object.keys(updates), key => {\r\n\r\n            this.for(updates[key], (update, i) => {\r\n\r\n                if(update){\r\n\r\n                    this.for(Object.keys(update), key2 =>\r\n                        this[key][i][key2] = update[key2]);\r\n\r\n                }\r\n\r\n            });\r\n\r\n            this.engine.draw();\r\n\r\n        });\r\n\r\n    });\r\n\r\n    this.socket.on('multiplayer-local address', this.interface.openMultiplayerLocal);\r\n\r\n    this.socket.on('multiplayer-local deny', () => {\r\n\r\n        this.playersInTheRoom.clear();\r\n        this.clear();\r\n        this.interface.show('login');\r\n\r\n        this.socket.emit('logout');\r\n\r\n        this.interface.dialogBox.alert('Danied', 'Local multiplayer disabled.', () => location.reload());\r\n\r\n    });\r\n\r\n}","var gameProps = {}","function gestureViewer(game){\r\n\r\n    var $gestureViewer = document.querySelector('#gestureViewer'),\r\n        $canvas = document.createElement('canvas'),\r\n        ctx = $canvas.getContext('2d');\r\n\r\n    $gestureViewer.appendChild($canvas);\r\n\r\n    var ballPoints = {};\r\n    var counter = 0;\r\n\r\n    const drawLine = (x0, y0, x1, y1) => {\r\n        ctx.strokeStyle = \"#7da278\";\r\n        ctx.lineCap = \"round\";\r\n\t    ctx.lineWidth = 8;\r\n        ctx.beginPath();\r\n        ctx.moveTo(x0, y0);\r\n        ctx.lineTo(x1, y1);\r\n        ctx.stroke();\r\n    }\r\n\r\n    window.addEventListener('touchstart', e => {\r\n        if(game.status != 'playing') return;\r\n\r\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\r\n            const touch = e.changedTouches[i];\r\n            var ballPoint = {\r\n                x: touch.pageX,\r\n                y: touch.pageY\r\n            }\r\n            ballPoints[touch.identifier || ++counter] = ballPoint;\r\n            drawLine(ballPoint.x - 1, ballPoint.y, ballPoint.x, ballPoint.y);\r\n        }\r\n    });\r\n\r\n    window.addEventListener('touchmove', e => {\r\n        if(game.status != 'playing') return;\r\n\r\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\r\n            const touch = e.changedTouches[i];\r\n            var ballPoint = ballPoints[touch.identifier || counter],\r\n                x = touch.pageX, y = touch.pageY;\r\n\r\n            drawLine(ballPoint.x, ballPoint.y, x, y);\r\n            ballPoint.x = x;\r\n            ballPoint.y = y;\r\n        }\r\n    });\r\n\r\n    window.addEventListener('touchend', e => {\r\n        if(game.status != 'playing') return;\r\n        \r\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\r\n            const touch = e.changedTouches[i];\r\n            delete ballPoints[touch.identifier || counter];\r\n        }\r\n        setTimeout(() => ctx.clearRect(0, 0, $canvas.width, $canvas.height), 200);\r\n    });\r\n\r\n    document.ontouchmove = function(e){ e.preventDefault(); } // Disable page scroll\r\n\r\n    const canvasFullSize = () => {\r\n        $canvas.width = window.innerWidth;\r\n        $canvas.height = window.innerHeight;\r\n    }\r\n\r\n    canvasFullSize();\r\n    window.addEventListener('resize', canvasFullSize);\r\n}","window.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\nwindow.isLumia = /Lumia/i.test(navigator.userAgent);\r\nwindow.isElectron = /Electron/i.test(navigator.userAgent);","function Interface(game){\r\n\r\n    const $ = (path, path2) => {\r\n\r\n        var get;\r\n\r\n        if(path2) get = path.querySelectorAll(path2); // Get in path (Element)\r\n        else get = document.querySelectorAll(path); // Get in document\r\n\r\n        return get.length > 1 ? get : get[0];\r\n\r\n    }\r\n\r\n    // Get elements of the DOM\r\n    const $interface     = $('#interface'),\r\n          $modal         = $($interface, '.modal'),\r\n          $loginForm     = $($interface, '#login form'),\r\n          $inputNickname = $($loginForm, '[name=\"player_name\"]');\r\n        \r\n    const $submitChooser = $('#after-login .submit');\r\n\r\n    const $mainMenu         = $($interface, '#main-menu'),\r\n          $welcomeText      = $($mainMenu, '#welcome'),\r\n          $singlePlayer     = $($mainMenu, '#single-player'),\r\n          $multiplayer      = $($mainMenu, '#multiplayer'),\r\n          $multiplayerLocal = $($mainMenu, '#multiplayer-local'),\r\n          $tutorial         = $($mainMenu, '#tutorial');\r\n\r\n    const $singlePlayerMenu        = $($interface, '#single-player-menu'),\r\n          $singlePlayerSubmit      = $($singlePlayerMenu, '.submit'),\r\n          $singlePlayer_playersQtn = $($singlePlayerMenu, '.input-number'),\r\n          $backSinglePlayerMenu    = $($singlePlayerMenu, '.back');\r\n\r\n    const $multiplayerMenu        = $($interface, '#multiplayer-menu'),\r\n          $multiplayerSubmit      = $($multiplayerMenu, '.submit'),\r\n          $player2Name            = $($multiplayerMenu, '[name=\"player_name\"]'),\r\n          $multiplayer_playersQtn = $($multiplayerMenu, '.input-number'),\r\n          $backMultiplayerMenu    = $($multiplayerMenu, '.back');\r\n        \r\n    const $multiplayerLocalMenu       = $($interface, '#multiplayer-local-menu'),\r\n          $connectedPlayers           = $($interface, '.connected-players ul'),\r\n          $multiplayerLocalMenuSubmit = $($multiplayerLocalMenu, '.submit'),\r\n          $playerCounter              = $($multiplayerLocalMenu, '.player-counter span'),\r\n          $address                    = $($multiplayerLocalMenu, '.address'),\r\n          $backMultiplayerLocalMenu   = $($multiplayerLocalMenu, '.back');\r\n    \r\n    const $tutorialScreen = $('#tutorial-screen'),\r\n          $tutorialBack = $($tutorialScreen, '.back');\r\n    \r\n    const $gameOver       = $($interface, '#game-over'),\r\n          $gameOverText   = $($gameOver, 'h2 span'),\r\n          $gameOverSubmit = $($gameOver, '.submit');\r\n        \r\n    const $nameOfPlayers = $($interface, '#name-of-players ul');\r\n\r\n    const $audioToggle = $('#audio-toggle');\r\n\r\n    const $label = $($interface, '#label')\r\n\r\n    const snakeColor = color => gameProps.snakes.colors[color];\r\n\r\n    this.dialogBox     = new DialogBox($interface);\r\n    const snakeChooser = new SnakeChooser($interface);\r\n\r\n    new InputNumber();\r\n\r\n    // Get last nickname logged\r\n    if(localStorage.getItem('lastNickname'))\r\n        $inputNickname.value = localStorage.getItem('lastNickname');\r\n\r\n    $inputNickname.focus();\r\n\r\n    this.showModal = () => $modal.classList.remove('closed');\r\n    this.hideModal = () => $modal.classList.add('closed');\r\n    this.show = what => $interface.className = what;\r\n\r\n    // List the players who entered the room (before the game starts)\r\n    this.listPlayersInTheRoom = () => {\r\n\r\n        let lis = '';\r\n\r\n        game.for('playersInTheRoom', player => {\r\n            lis += `<li>\r\n                        <span\r\n                            style=\"color: ${snakeColor(player.color)};\">\r\n                            ${player.nickname}\r\n                        </span>\r\n                        <div class=\"snake\"\r\n                            style=\"background: ${snakeColor(player.color)};\r\n                            width: ${game.tileSize}px; height: ${game.tileSize}px;\">\r\n                        </div>\r\n                    </li>`;\r\n        });\r\n\r\n        $connectedPlayers.innerHTML = lis;\r\n        $playerCounter.innerText = game.playersInTheRoom.length;\r\n\r\n    }\r\n\r\n    // List players in game (After start)\r\n    this.listPlayersInGame = () => {\r\n        \r\n        let li = '';\r\n\r\n        game.for('players', player =>\r\n            li += `<li class=\"${player.killed ? 'dead' : ''}\" style=\"color: ${snakeColor(player.color)};\">${player.nickname}</li>`);\r\n\r\n        $nameOfPlayers.innerHTML = li;\r\n\r\n    }\r\n\r\n    // Show the game-over screen\r\n    this.gameOver = () => {\r\n\r\n        $gameOverText.style.color = game.winner ? snakeColor(game.winner.color) : 'inherit';\r\n        $gameOverText.innerText = game.winner ? game.winner.nickname : 'Nobody';\r\n\r\n        this.show('game-over');\r\n\r\n    }\r\n\r\n    /**\r\n     * Standard functions that occur when you click the game over button\r\n     * \r\n     * @param {*} show : What will be shown after the click\r\n     * @param {*} moreFn : Extra function (Like a callback)\r\n     */\r\n    const gameOverSubmit = (show, moreFn) => {\r\n\r\n        $gameOverSubmit.onclick = () => {\r\n            game.status = 'toStart';\r\n            game.clear();\r\n            this.showModal();\r\n            this.show(show);\r\n            game.sounds.menu.play;\r\n            typeof moreFn == 'function' && moreFn();\r\n        }\r\n\r\n    }\r\n\r\n    // Login event\r\n    $loginForm.addEventListener('submit', e => {\r\n        game.login($inputNickname.value, data => {\r\n\r\n            $welcomeText.innerHTML = `Hi, ${$inputNickname.value}`;\r\n            snakeChooser.changeSnakeColor();\r\n\r\n            this.show('after-login');\r\n\r\n            localStorage.setItem('lastNickname', $inputNickname.value);\r\n\r\n            game.sounds.enter.play;\r\n\r\n        });\r\n    });\r\n\r\n    { // Single player\r\n        $singlePlayer.addEventListener('click', e =>\r\n            this.show('single-player-menu'));\r\n\r\n        $singlePlayerSubmit.addEventListener('click', () => {\r\n\r\n            game.socket.emit('prepare single-player', $singlePlayer_playersQtn.getAttribute('data-value'));\r\n            gameOverSubmit('single-player-menu', () => game.playersInTheRoom.length = 1);\r\n\r\n        });\r\n\r\n        $backSinglePlayerMenu.addEventListener('click', () => this.show('main-menu'));\r\n    }\r\n\r\n    { // Multiplayer\r\n\r\n        $multiplayer.addEventListener('click', () => {\r\n\r\n            snakeChooser.currentColor = 0;\r\n            snakeChooser.changeSnakeColor();\r\n            this.show('multiplayer-menu');\r\n\r\n        });\r\n\r\n        $multiplayerSubmit.addEventListener('click', () => {\r\n\r\n            game.playersInTheRoom = [game.playersInTheRoom[0]];\r\n\r\n            game.socket.emit('prepare multiplayer', {\r\n                nickname: $player2Name.value,\r\n                color: snakeChooser.currentColor,\r\n                nPlayers: $multiplayer_playersQtn.getAttribute('data-value')\r\n            });\r\n\r\n            gameOverSubmit('multiplayer-menu', () => game.playersInTheRoom.length = 1);\r\n\r\n        });\r\n\r\n        $backMultiplayerMenu.addEventListener('click', () => this.show('main-menu'));\r\n\r\n    }\r\n\r\n    { // Multiplayer-local\r\n\r\n        $multiplayerLocal.addEventListener('click', () => {\r\n\r\n            game.multiplayerLocalAllow = true;\r\n            game.socket.emit('multiplayer-local allow');\r\n            $multiplayerLocalMenuSubmit.removeAttribute('disabled');\r\n\r\n        });\r\n\r\n        this.openMultiplayerLocal = adress => {\r\n\r\n            $address.innerText = adress;\r\n            this.show('multiplayer-local-menu');\r\n\r\n        }\r\n\r\n        game.socket.on('delete player', () => $multiplayerLocalMenuSubmit.removeAttribute('disabled'));\r\n\r\n        $multiplayerLocalMenuSubmit.addEventListener('click', () => {\r\n            \r\n            $multiplayerLocalMenuSubmit.setAttribute('disabled', true);\r\n            game.socket.emit('ready');\r\n            \r\n            gameOverSubmit('multiplayer-local-menu', () => $multiplayerLocalMenuSubmit.removeAttribute('disabled'));\r\n\r\n        });\r\n\r\n        $backMultiplayerLocalMenu.addEventListener('click', () => {\r\n\r\n            game.playersInTheRoom.length = 1;\r\n            game.socket.emit('multiplayer-local deny');\r\n            this.show('main-menu');\r\n\r\n        });\r\n\r\n    }\r\n\r\n    $tutorial.addEventListener('click', () => this.show('tutorial-screen'));\r\n    $tutorialBack.addEventListener('click', () => this.show('main-menu'));\r\n\r\n    $submitChooser.addEventListener('click', () =>{\r\n\r\n        game.socket.emit('change color', snakeChooser.currentColor);\r\n\r\n        game.socket.on('color not in use', () => {\r\n\r\n            game.socket.off('color not in use');\r\n    \r\n            // if other player enter\r\n            if(game.multiplayerLocalAllow){\r\n    \r\n                this.listPlayersInTheRoom();\r\n                $multiplayerLocalMenu.className = 'multiplayer-local-viewer';\r\n                $($multiplayerLocalMenu, ('h4')).innerText = 'Waiting to play ...';\r\n                this.show('multiplayer-local-menu');\r\n    \r\n            // If room creator enter\r\n            }else this.show('main-menu');\r\n    \r\n        });\r\n\r\n    });\r\n\r\n    { // Audio\r\n\r\n        this.audioToggle = mute => $audioToggle.className = mute ? 'muted' : '';\r\n        $audioToggle.addEventListener('click', () => game.mute = !game.mute);\r\n\r\n        // Set sounds\r\n        [$singlePlayer, $multiplayer, $multiplayerLocal, $submitChooser].map($el =>\r\n            $el.addEventListener('click', () => game.sounds.menu.play));\r\n\r\n        [$backSinglePlayerMenu, $backMultiplayerMenu, $backMultiplayerLocalMenu].map($el =>\r\n            $el.addEventListener('click', () => game.sounds.back.play));\r\n\r\n        [$singlePlayerSubmit, $multiplayerSubmit, $multiplayerLocalMenuSubmit].map($el =>\r\n            $el.addEventListener('click', () => game.sounds.enter.play));\r\n\r\n    }\r\n\r\n    this.label = (text, type, hideTime = 1000) => {\r\n\r\n        const $type = document.createElement(type == 0 ? 'span' : 'strong');\r\n\r\n        $type.innerText = text;\r\n\r\n        $label.innerHTML = '';\r\n        $label.appendChild($type);\r\n\r\n        setTimeout(() => $type.className = 'show', 0);\r\n        setTimeout(() => $type.remove(), hideTime);\r\n\r\n    }\r\n\r\n    game.socket.on('countdown', n => this.label(n, 1));\r\n\r\n    game.socket.on('show powerup', p => this.label(p, 0, 500));\r\n\r\n}","function Snake(game, props){\r\n\r\n    this.id = null;\r\n\r\n    // Id in relation to the player in the machine itself (0 is player 1, 1 is player 2)\r\n    this.idLocal = null;\r\n\r\n    this.enhancerId = null;\r\n\r\n    this.nickname = null;\r\n\r\n    this.body = [];\r\n\r\n    this.color = 0;\r\n\r\n    let killed = false;\r\n    Object.defineProperty(this, 'killed', {\r\n        get: () => killed,\r\n        set: Bool => {\r\n            if(killed = Bool){\r\n                game.sounds.died.play;\r\n                game.interface.listPlayersInGame();\r\n            }\r\n        }\r\n    });\r\n\r\n    this.merge(props);\r\n\r\n    { // Multiplayer\r\n\r\n        if(this.idLocal == 0) this.touchArea = 'all';\r\n\r\n        if(this.idLocal == 1){\r\n            game.players[0].touchArea = 'right';\r\n            this.touchArea = 'left';\r\n        }\r\n        \r\n    }\r\n\r\n    game.engine.add(this);\r\n\r\n    // Set controlls\r\n    if(!isNaN(this.idLocal)) new SnakeControls(this, game);\r\n\r\n    // Render\r\n    this.draw = () => {\r\n\r\n        if(this.killed) return;\r\n\r\n        game.ctx.fillStyle = gameProps.snakes.colors[this.color];\r\n\r\n        this.body.forEach(bodyFragment => {\r\n            game.ctx.fillRect(\r\n                bodyFragment[0] * game.tileSize,\r\n                bodyFragment[1] * game.tileSize,\r\n                game.tileSize,\r\n                game.tileSize\r\n            );\r\n        });\r\n\r\n    }\r\n\r\n}","function SnakeControls(snake, game){\r\n\r\n    // Emit movement to server\r\n    const pushMovement = moveTo => {\r\n        if(!moveTo) return;\r\n        game.socket.emit('moveTo', {\r\n            id: snake.id,\r\n            moveTo: moveTo\r\n        });\r\n    }\r\n\r\n    var $touchAreas = document.querySelector('#touch-areas');\r\n    var $touchArea = {left: $touchAreas.querySelector('#left'), right: $touchAreas.querySelector('#right')};\r\n\r\n    // Keyboard\r\n    var keyMap = (map => map ? {\r\n\r\n        directions: Object.keys(map),\r\n        keys: Object.keys(map).map(k => map[k]),\r\n\r\n        direction: function(key){\r\n            return this.directions[ this.keys.indexOf(key) ];\r\n        }\r\n\r\n    } : undefined)(gameProps.snakes.keyMaps[snake.idLocal]);\r\n\r\n    keyMap && window.addEventListener('keydown', e => pushMovement(keyMap.direction(e.key)));\r\n\r\n    // For touch devices \r\n    let touchstart = {}, touchmove = {}, sensibilityTouch = gameProps.snakes.sensibilityTouch;\r\n    const directions = [[\"left\", \"right\"], [\"up\", \"down\"]];\r\n    const orientationMap = {0: \"portrait-primary\", 180: \"portrait-secondary\", 90: \"landscape-primary\", \"-90\": \"landscape-secondary\"};\r\n\r\n    const getOrientation = () => screen.msOrientation || (screen.orientation || screen.mozOrientation || {}).type || orientationMap[window.orientation];\r\n    let orientation = getOrientation();\r\n    window.addEventListener('orientationchange', () => orientation = getOrientation());\r\n    \r\n    const touchHandle = touchedArea => {\r\n\r\n        let dragged = [[], []].map((_, axis) => touchstart[touchedArea][axis] - touchmove[touchedArea][axis]);\r\n\r\n        // Windows phone in landscape -_-\r\n        if(isLumia){\r\n            if(orientation === \"landscape-primary\") dragged[0] = -dragged[0];\r\n            else if(orientation === \"landscape-secondary\") dragged[1] = -dragged[1];\r\n            if(orientation.indexOf('landscape') > -1) dragged.reverse();\r\n\r\n            if(orientation === \"portrait-secondary\"){\r\n                dragged[0] = -dragged[0];\r\n                dragged[1] = -dragged[1];\r\n            }\r\n        }\r\n\r\n        if(touchedArea != snake.touchArea && snake.touchArea != 'all') return;\r\n\r\n        let touchAxis = +(Math.abs(dragged[0]) < Math.abs(dragged[1])),\r\n            moveIndex = +(dragged[touchAxis] < 0),\r\n            direction = directions[touchAxis][moveIndex];\r\n\r\n        if(Math.abs(dragged[touchAxis]) >= sensibilityTouch){\r\n            if(direction != snake.direction) pushMovement(direction);\r\n            touchstart[touchedArea] = [...touchmove[touchedArea]];\r\n        }\r\n\r\n    }\r\n\r\n    const touchPos = e => [e.changedTouches[0].pageX, e.changedTouches[0].pageY];\r\n\r\n    if(snake.touchArea){\r\n        const $touchAreaKeys = Object.keys($touchArea);\r\n        for (let i = $touchAreaKeys.length - 1; i >=0 ; i--) {\r\n            const area = $touchAreaKeys[i];\r\n            $touchArea[area].addEventListener('touchstart', e => touchstart[area] = touchPos(e));\r\n            $touchArea[area].addEventListener('touchmove', e => {\r\n\r\n                e.preventDefault();\r\n\r\n                touchmove[area] = touchPos(e);\r\n                touchHandle(area);\r\n\r\n                return false;\r\n\r\n            }, { passive: false });\r\n        }\r\n    }\r\n\r\n}","function Sounds(game){\r\n\r\n    const $canvas = game.ctx.canvas;\r\n\r\n    const path = 'sounds';\r\n\r\n    const soundMap = {\r\n        menu: 'menu.wav',\r\n        back: 'back.wav',\r\n        prev: 'prev.wav',\r\n        next: 'next.wav',\r\n        died: 'died.wav',\r\n        ate: 'ate.wav',\r\n        enter: 'enter.wav',\r\n        gameOver: 'game-over.wav'\r\n    }\r\n\r\n    const addAudioPlayers = (() => {\r\n\r\n        const keys = Object.keys(soundMap);\r\n        for (let i = 0, L = keys.length; i < L; i++) {\r\n            const key = keys[i];\r\n            const sound = soundMap[key];\r\n\r\n            let audioExtension = sound.split('.').lastItem();\r\n\r\n            let $player = document.createElement('audio');\r\n            $player.className = 'sound';\r\n            $player.src = `${path}/${sound}`;\r\n            $player.setAttribute('type', `audio/${audioExtension == 'mp3' ? 'mpeg' : audioExtension}`);\r\n\r\n            $canvas.parentNode.insertBefore($player, $canvas);\r\n\r\n            this[key] = {};\r\n\r\n            Object.defineProperties(this[key], {\r\n\r\n                play: {\r\n                    get: () => {\r\n                        if(!game.mute) $player.play();\r\n                    }\r\n                },\r\n\r\n                volume: {\r\n                    get: () => $player.volume,\r\n                    set: v => $player.volume = v\r\n                }\r\n\r\n            });\r\n\r\n        }\r\n\r\n    })();\r\n\r\n}","function DialogBox($interface){\r\n\r\n    this.alert = (title, text, callback) => {\r\n\r\n        let $modal = $interface.querySelector('.modal');\r\n\r\n        let $alert = document.createElement('div');\r\n        $alert.classList.add('dialog-box', 'alert');\r\n\r\n        $alert.innerHTML = `<h1>${title}</h1>\r\n                           <p>${text}</p>\r\n                           <button>Ok</button>`;\r\n\r\n        let $buttonOk = $alert.querySelector('button');\r\n\r\n        $interface.insertBefore($alert, $modal);\r\n\r\n        $buttonOk.focus();\r\n        $buttonOk.addEventListener('click', () => {\r\n            $buttonOk.parentNode.remove();\r\n            typeof callback == 'function' && callback();\r\n        });\r\n\r\n    }\r\n\r\n}","function InputNumber(){\r\n    var $inputsNumber = document.querySelectorAll('.input-number');\r\n\r\n    for (let i = $inputsNumber.length - 1; i >= 0; i--) {\r\n        const $inputNumber = $inputsNumber[i];\r\n        \r\n        let $input = $inputNumber.querySelector('span'),\r\n            $decrementButton = $inputNumber.querySelector('.decrement'),\r\n            $incrementButton = $inputNumber.querySelector('.increment');\r\n\r\n        $decrementButton.addEventListener('click', () => {\r\n\r\n            let value = +$inputNumber.getAttribute('data-value'),\r\n                min = $inputNumber.getAttribute('data-min') || -Infinity;\r\n\r\n            if(value > min){\r\n                value--;\r\n                $input.innerHTML = (value == 0) ? 'o' : value;\r\n                $inputNumber.setAttribute('data-value', value);\r\n            }\r\n\r\n            game.sounds.prev.play;\r\n\r\n        });\r\n\r\n        $incrementButton.addEventListener('click', () => {\r\n\r\n            let value = +$inputNumber.getAttribute('data-value'),\r\n                max = $inputNumber.getAttribute('data-max') || Infinity;\r\n\r\n            if(value < max){\r\n                value++;\r\n                $input.innerHTML = (value == 0) ? 'o' : value;\r\n                $inputNumber.setAttribute('data-value', value);\r\n            }\r\n\r\n            game.sounds.next.play;\r\n\r\n        });\r\n\r\n    }\r\n}","function SnakeChooser($interface){\r\n\r\n    var $snakeChoosers = $interface.querySelectorAll('.snake-chooser');\r\n\r\n    this.currentColor = 0;\r\n\r\n    this.changeSnakeColor = () => {\r\n\r\n        var colorsInUse = game.colorsInUse;\r\n\r\n        for (let i = $snakeChoosers.length - 1; i >= 0; i--) {\r\n            const $snakeChooser = $snakeChoosers[i];\r\n            \r\n            let $chooserPrev = $snakeChooser.querySelector('.chooser-prev'),\r\n                $chooserNext = $snakeChooser.querySelector('.chooser-next'),\r\n                $snake = $snakeChooser.querySelector('.snake');\r\n\r\n            $chooserPrev.classList.remove('disabled');\r\n            $chooserNext.classList.remove('disabled');\r\n\r\n            if(colorsInUse.includes(this.currentColor))\r\n                $snake.classList.add('color-in-use');\r\n            else\r\n                $snake.classList.remove('color-in-use');\r\n\r\n            if(this.currentColor == 0)\r\n                $chooserPrev.classList.add('disabled');\r\n\r\n            if(this.currentColor == gameProps.snakes.colors.length - 1)\r\n                $chooserNext.classList.add('disabled');\r\n\r\n            $snake.style.background = gameProps.snakes.colors[this.currentColor];\r\n        }\r\n    }\r\n\r\n    for (let i = $snakeChoosers.length - 1; i >= 0; i--) {\r\n        const $snakeChooser = $snakeChoosers[i];\r\n        \r\n        let $chooserPrev = $snakeChooser.querySelector('.chooser-prev'),\r\n            $chooserNext = $snakeChooser.querySelector('.chooser-next');\r\n\r\n        $chooserPrev.addEventListener('click', e => {\r\n            if(e.target.className.indexOf('disabled') == -1){\r\n                this.currentColor--;\r\n                this.changeSnakeColor();\r\n                game.sounds.prev.play;\r\n            }\r\n        });\r\n\r\n        $chooserNext.addEventListener('click', e => {\r\n            if(e.target.className.indexOf('disabled') == -1){\r\n                this.currentColor++;\r\n                this.changeSnakeColor();\r\n                game.sounds.next.play;\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n}"]}