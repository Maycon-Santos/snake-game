{"version":3,"sources":["game/Engine.js","game/Food.js","game/Game.js","game/gameProps.js","game/gameRules.js","game/gestureViewer.js","game/Snake.js","game/snakeControls.js","game/helpers.js","ultils/Array.js","install-SW.js"],"names":["Engine","game","_this","this","canvas","ctx","objects","runFunction","fn","_len","arguments","length","args","Array","_key","i","_objects$i","apply","run","engine","start","performance","now","requestAnimationFrame","timestamp","deltaTime","Math","min","clearRect","width","height","bind","add","object","push","Food","type","foodTypes","key","position","gameProps","foods","types","foodType","chance","create","selectFood","round","random","map","_","axis","tiles","update","draw","fillStyle","color","beginPath","arc","tileSize","PI","closePath","fill","Game","Object","defineProperty","set","val","console","error","floor","get","value","getContext","writable","players","gameRules","addPlayers","addFoods","newGame","gestureViewer","resizeCanvas","prototype","for","food","player","newBody","id","Snake","snakes","qnt","speed","initialSize","bodyStart","initialDirection","reverse","winSize","window","innerWidth","innerHeight","addEventListener","sensibilityTouch","keyMap","left","right","up","down","touchArea","normal","freezer","superSpeed","killed","playerHead","head","index","body","isEqual","collided","otherPlayer","otherID","increase","$gestureViewer","document","querySelector","$canvas","createElement","appendChild","ballPoints","counter","drawLine","x0","y0","x1","y1","strokeStyle","lineCap","lineWidth","moveTo","lineTo","stroke","e","changedTouches","touch","ballPoint","x","pageX","y","pageY","identifier","setTimeout","canvasFullSize","playerProps","directionMap","direction","to","directions","keys","oldDirection","includes","nextPos","tailDirection","defineProperties","tail","penultBodyFragment","snakeControls","SnakeControls","progressMove","abs","progress","currentMovement","splice","pop","forEach","bodyFragment","fillRect","snake","rowMovements","$touchAreas","$touchArea","k","indexOf","touchstart","touchmove","orientationMap","0","180","90","-90","getOrientation","screen","msOrientation","orientation","mozOrientation","touchPos","_loop","area","touchedArea","dragged","isLumia","touchAxis","moveIndex","lastItem","concat","_toConsumableArray","touchHandle","ontouchmove","preventDefault","filter","Boolean","isMobile","test","navigator","userAgent","isElectron","from","newPos","arr","JSON","stringify","sumWith","arrays","sort","a","b","newArray","arrLeng","array","j","itemLeng","item","serviceWorker","register","then","log","catch"],"mappings":"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","file":"snakeGame.js","sourcesContent":["function Engine(game){\r\n\r\n    var canvas = game.ctx.canvas;\r\n\r\n    var objects = [];\r\n\r\n    const runFunction = (fn, ...args) => {\r\n\r\n        var i = objects.length;\r\n\r\n        while(i--){\r\n            if(typeof objects[i][fn] == 'function') objects[i][fn](...args);\r\n        }\r\n\r\n    }\r\n\r\n    const update = (deltaTime) => runFunction('update', deltaTime);\r\n\r\n    const draw = () => {\r\n        game.ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        runFunction('draw');\r\n    }\r\n\r\n\r\n    this.run = () => {\r\n\r\n        let engine = this,\r\n            start = performance.now();\r\n\r\n        requestAnimationFrame(function run(timestamp){\r\n\r\n            let deltaTime = (timestamp - start) / 1000;\r\n            deltaTime = Math.min(1, deltaTime);\r\n\r\n            update(deltaTime);\r\n            draw();\r\n\r\n            if(deltaTime >= 1) return engine.run();\r\n            requestAnimationFrame(run);\r\n\r\n        }.bind(this));\r\n\r\n    }\r\n\r\n    this.add = (object) => objects.push(object);\r\n\r\n}","function Food(game){\r\n\r\n    var foodTypes = [], type;\r\n\r\n    this.position = [];\r\n\r\n    for (const key in gameProps.foods.types) {\r\n        const foodType = gameProps.foods.types[key],\r\n              chance = foodType.chance;\r\n\r\n        for (let i = 0; i < chance; i++) foodTypes.push(foodType);\r\n    }\r\n\r\n    this.create = function(){\r\n\r\n        const selectFood = Math.round(Math.random() * (foodTypes.length - 1));\r\n\r\n        type = foodTypes[selectFood];\r\n\r\n        this.position = [[], []].map((_, axis) => Math.round(Math.random() * (gameProps.tiles[axis] - 1)));\r\n    \r\n    }\r\n\r\n    this.update = () => {\r\n    }\r\n\r\n    this.draw = () => {\r\n\r\n        game.ctx.fillStyle = type.color;\r\n\r\n        game.ctx.beginPath();\r\n\r\n        game.ctx.arc(\r\n            this.position[0] * game.tileSize + game.tileSize / 2,\r\n            this.position[1] * game.tileSize + game.tileSize / 2,\r\n            game.tileSize / 2,\r\n            0,\r\n            Math.PI * 2\r\n        );\r\n        \r\n        game.ctx.closePath();\r\n\r\n        game.ctx.fill();\r\n\r\n    }\r\n\r\n}","function Game(canvas){\r\n\r\n    // Properties\r\n    var tileSize;\r\n    Object.defineProperty(this, 'tileSize', {\r\n        set: function(val){\r\n            if(+val) tileSize = Math.floor(+val);\r\n            else return console.error('Invalid value');\r\n            canvas.width = this.tileSize * gameProps.tiles[0];\r\n            canvas.height = this.tileSize * gameProps.tiles[1];\r\n        },\r\n        get: function(){ return tileSize; }\r\n    });\r\n\r\n    Object.defineProperty(this, 'ctx', {\r\n        value: canvas.getContext('2d'),\r\n        writable: false\r\n    });\r\n\r\n    this.players = [];\r\n    this.foods = [];\r\n\r\n    this.engine = new Engine(this);\r\n    this.engine.add(this);\r\n\r\n    new gameRules(this);\r\n\r\n    this.addPlayers();\r\n    this.addFoods();\r\n\r\n    this.newGame();\r\n    gestureViewer();\r\n\r\n    this.resizeCanvas();\r\n    this.engine.run();\r\n\r\n}\r\n\r\nGame.prototype.newGame = function(){\r\n\r\n    this.for('foods', food => {\r\n        food.create();\r\n    });\r\n\r\n    this.for('players', player => {\r\n        player.newBody();\r\n    });\r\n\r\n}\r\n\r\nGame.prototype.for = function(object, fn){\r\n    for (let id = this[object].length-1; id >= 0; id--)\r\n        fn(this[object][id], id);\r\n}\r\n\r\nGame.prototype.addPlayers = function(){\r\n\r\n    let player = new Snake(this, this.players.length);\r\n\r\n    this.players.push(player);\r\n\r\n    if(this.players.length < gameProps.snakes.players.length)\r\n        this.addPlayers();\r\n\r\n}\r\n\r\nGame.prototype.addFoods = function(){\r\n    let food = new Food(this);\r\n\r\n    this.engine.add(food);\r\n    this.foods.push(food);\r\n\r\n    if(this.foods.length < gameProps.foods.qnt)\r\n        this.addFoods();\r\n}\r\n\r\nGame.prototype.resizeCanvas = function(){\r\n\r\n    const resizeCanvas = () => {\r\n       \r\n        let winSize = [window.innerWidth, window.innerHeight]; // X, Y\r\n        let tileSize = [0, 0].map((val, i) => winSize[i] / gameProps.tiles[i]);\r\n        this.tileSize = tileSize[tileSize[0] > tileSize[1] ? 1 : 0];\r\n        \r\n    }\r\n\r\n    resizeCanvas();\r\n    window.addEventListener('resize', resizeCanvas);\r\n\r\n}","var gameProps = {\r\n    tiles: [64, 36], // X, Y\r\n\r\n    snakes: {\r\n        speed: 15,\r\n        initialSize: 1,\r\n        bodyStart: [7, 4, \"left\"],\r\n        initialDirection: \"right\",\r\n        reverse: false,\r\n        sensibilityTouch: 30, // the higher, the less sensitive\r\n\r\n        players: [\r\n            {\r\n                color: \"#000000\",\r\n                bodyStart: [60, 30, 'up'],\r\n                initialDirection: 'right',\r\n                keyMap: {left: \"ArrowLeft\", right: \"ArrowRight\", up: \"ArrowUp\", down: \"ArrowDown\"},\r\n                touchArea: \"right\"\r\n            },\r\n            {\r\n                color: \"#ff0000\",\r\n                bodyStart: [6, 6, 'left'],\r\n                keyMap: {left: \"a\", right: \"d\", up: \"w\", down: \"s\"},\r\n                touchArea: \"left\"\r\n            },\r\n            // {\r\n            //     color: \"#00ff00\",\r\n            //     bodyStart: [7, 8, 'left'],\r\n            //     keyMap: {left: \"j\", right: \"l\", up: \"i\", down: \"k\"}\r\n            // }\r\n        ]\r\n    },\r\n\r\n    foods: {\r\n        qnt: 1,\r\n\r\n        types: {\r\n            normal: {\r\n                chance: 5,\r\n                color: '#FFE400'\r\n            },\r\n\r\n            freezer: {\r\n                chance: 0,\r\n                color: '#008F30'\r\n            },\r\n\r\n            superSpeed: {\r\n                chance: 0,\r\n                color: '#008F30'\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}","function gameRules(game){\r\n\r\n    game.engine.add(this);\r\n\r\n    const snakeColision = () => {\r\n\r\n        game.for('players', (player, id) => {\r\n\r\n            if(player.killed) return;\r\n\r\n            let playerHead = player.head; // For performance. Accessing an object several times is heavy\r\n\r\n            // player.body.every((bodyFragment, index) => {\r\n            //     player.collided = index > 0 && bodyFragment.isEqual(playerHead);\r\n            //     console.log(index, bodyFragment.isEqual(playerHead));\r\n            //     if(player.collided) return; // Break the loop\r\n            // });\r\n\r\n            for (let index = player.body.length - 1; index >= 0; index--) {\r\n\r\n                if(index > 0 && player.body[index].isEqual(playerHead))\r\n                    return player.collided = true;\r\n\r\n            }\r\n\r\n            !player.collided && game.for('players', (otherPlayer, otherID) => {\r\n\r\n                if(id == otherID || otherPlayer.killed) return;\r\n\r\n                for (let index = otherPlayer.body.length - 1; index >= 0; index--) {\r\n\r\n                    if(otherPlayer.body[index].isEqual(playerHead))\r\n                        return player.collided = true;\r\n\r\n                }\r\n\r\n            });\r\n\r\n        });\r\n\r\n        game.for('players', player => player.killed = player.collided); // Kill the player if collided\r\n    \r\n    }\r\n\r\n    const snakeAteFood = () => {\r\n        game.for('foods', food => {\r\n            game.for('players', player => {\r\n                if(player.head.isEqual(food.position)){\r\n                    player.increase++;\r\n                    food.create();\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    this.update = () => {\r\n\r\n        snakeColision();\r\n        snakeAteFood();\r\n\r\n    }\r\n\r\n}","function gestureViewer(){\r\n\r\n    var $gestureViewer = document.querySelector('#gestureViewer'),\r\n        $canvas = document.createElement('canvas'),\r\n        ctx = $canvas.getContext('2d');\r\n\r\n    $gestureViewer.appendChild($canvas);\r\n\r\n    var ballPoints = {};\r\n    var counter = 0;\r\n\r\n    const drawLine = (x0, y0, x1, y1) => {\r\n        ctx.strokeStyle = \"#7da278\";\r\n        ctx.lineCap = \"round\";\r\n\t    ctx.lineWidth = 8;\r\n        ctx.beginPath();\r\n        ctx.moveTo(x0, y0);\r\n        ctx.lineTo(x1, y1);\r\n        ctx.stroke();\r\n    }\r\n\r\n    window.addEventListener('touchstart', e => {\r\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\r\n            const touch = e.changedTouches[i];\r\n            var ballPoint = {\r\n                x: touch.pageX,\r\n                y: touch.pageY\r\n            }\r\n            ballPoints[touch.identifier || ++counter] = ballPoint;\r\n            drawLine(ballPoint.x - 1, ballPoint.y, ballPoint.x, ballPoint.y);\r\n        }\r\n    });\r\n\r\n    window.addEventListener('touchmove', e => {\r\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\r\n            const touch = e.changedTouches[i];\r\n            var ballPoint = ballPoints[touch.identifier || counter],\r\n                x = touch.pageX, y = touch.pageY;\r\n\r\n            drawLine(ballPoint.x, ballPoint.y, x, y);\r\n            ballPoint.x = x;\r\n            ballPoint.y = y;\r\n        }\r\n    });\r\n\r\n    window.addEventListener('touchend', e => {\r\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\r\n            const touch = e.changedTouches[i];\r\n            delete ballPoints[touch.identifier || counter];\r\n        }\r\n        setTimeout(() => ctx.clearRect(0, 0, $canvas.width, $canvas.height), 200);\r\n    });\r\n\r\n    const canvasFullSize = () => {\r\n        $canvas.width = window.innerWidth;\r\n        $canvas.height = window.innerHeight;\r\n    }\r\n\r\n    canvasFullSize();\r\n    window.addEventListener('resize', canvasFullSize);\r\n}","function Snake(game, id){\r\n\r\n    this.id = id;\r\n    this.body = [];\r\n\r\n    this.increase = 0;\r\n    this.collided = false;\r\n    this.killed = false;\r\n\r\n    this.playerProps = gameProps.snakes.players[id];\r\n\r\n    var directionMap = {\r\n        'left': [-1, 0],\r\n        'right': [1, 0],\r\n        'up': [0, -1],\r\n        'down': [0, 1]\r\n    }\r\n\r\n    var direction = this.playerProps.initialDirection || gameProps.snakes.initialDirection;\r\n    Object.defineProperty(this, 'direction', {\r\n        get: () => direction,\r\n        set: (to) => {\r\n\r\n            let directions = Object.keys(directionMap), // X, Y\r\n                oldDirection = direction,\r\n                reverse = this.playerProps.reverse || gameProps.snakes.reverse;\r\n\r\n            if(directions.includes(to)) direction = to;\r\n\r\n            if(nextPos().isEqual(this.body[1])){\r\n\r\n                if(!reverse) direction = oldDirection;\r\n                else{\r\n                    direction = this.tailDirection;\r\n                    this.body.reverse();\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n    });\r\n\r\n    Object.defineProperties(this, {\r\n        head: { get: () => this.body[0] },\r\n        tail: { get: () => this.body[this.body.length - 1]},\r\n        tailDirection: {\r\n            get: () => {\r\n                let penultBodyFragment = this.body[this.body.length - 2],\r\n                    tail = this.tail;\r\n\r\n                if(tail[0] > penultBodyFragment[0]) return 'right';\r\n                if(tail[0] < penultBodyFragment[0]) return 'left';\r\n\r\n                if(tail[1] > penultBodyFragment[1]) return 'down';\r\n                if(tail[1] < penultBodyFragment[1]) return 'up';\r\n\r\n            }\r\n        }\r\n    });\r\n\r\n    game.engine.add(this);\r\n    const snakeControls = new SnakeControls(this, game);\r\n\r\n    var progressMove = 0;\r\n    const movement = (deltaTime) => {\r\n\r\n        let speed = this.playerProps.speed || gameProps.snakes.speed;\r\n        let progress = deltaTime * speed;\r\n    \r\n        if(~~progress <= ~~progressMove) return;\r\n\r\n        snakeControls.currentMovement();\r\n\r\n        progressMove = progress != speed ? progress : 0;\r\n        \r\n        this.body.splice(0, 0, nextPos());\r\n        this.increase < 1 ? this.body.pop() : this.increase--;\r\n        \r\n    }\r\n\r\n    const nextPos = () => {\r\n\r\n        let direction = directionMap[this.direction],\r\n            axis = Math.abs(direction[1]),\r\n            nextPos = [...this.body[0]];\r\n\r\n        nextPos[axis] += direction[axis];\r\n\r\n        if(nextPos[axis] >= gameProps.tiles[axis]) nextPos[axis] = 0;\r\n        else if(nextPos[axis] < 0) nextPos[axis] = gameProps.tiles[axis] - 1;\r\n\r\n        return nextPos;\r\n\r\n    }\r\n\r\n    this.update = (deltaTime) => {\r\n        if(this.body.length && !this.killed){\r\n            movement(deltaTime);\r\n        }\r\n    }\r\n\r\n    this.draw = () => {\r\n\r\n        if(this.killed) return;\r\n\r\n        game.ctx.fillStyle = this.playerProps.color;\r\n\r\n        this.body.forEach(bodyFragment => {\r\n            game.ctx.fillRect(\r\n                bodyFragment[0] * game.tileSize,\r\n                bodyFragment[1] * game.tileSize,\r\n                game.tileSize,\r\n                game.tileSize\r\n            );\r\n        });\r\n\r\n    }\r\n\r\n}\r\n\r\nSnake.prototype.newBody = function(){\r\n\r\n    var bodyStart = this.playerProps.bodyStart || gameProps.snakes.bodyStart,\r\n        from = [bodyStart[0], bodyStart[1]],\r\n        to = bodyStart[2];\r\n\r\n    this.body = [from];\r\n\r\n    var initialSize = this.playerProps.initialSize || gameProps.snakes.initialSize;\r\n    for (let i = 1; i < initialSize; i++) {\r\n\r\n        this.body.push([]);\r\n\r\n        let newPos = [...from];\r\n\r\n        switch(to){\r\n\r\n            case 'right':\r\n            case 'left':\r\n                newPos[0] = to == 'right' ? from[0]+i : from[0]-i;\r\n                break;\r\n\r\n            case 'up':\r\n            case 'down':\r\n                newPos[1] = to == 'down' ? from[1]+i : from[1]-i;\r\n                break;\r\n\r\n        }\r\n\r\n        for (let axis = 0; axis <= 1; axis++) {\r\n\r\n            if(newPos[axis] < 0) newPos[axis] = gameProps.tiles[axis] - Math.abs(newPos[axis]);\r\n            if(newPos[axis] >= gameProps.tiles[axis]) newPos[axis] = newPos[axis] - gameProps.tiles[axis];\r\n            \r\n            this.body[i].push(newPos[axis]);\r\n            \r\n        }\r\n\r\n    }\r\n\r\n}","function SnakeControls(snake, game){\r\n\r\n    var rowMovements = [];\r\n\r\n    var $touchAreas = document.querySelector('#touch-areas');\r\n    var $touchArea = {left: $touchAreas.querySelector('#left'), right: $touchAreas.querySelector('#right')};\r\n\r\n    // Keyboard\r\n    var keyMap = (map => keyMap = {\r\n\r\n        directions: Object.keys(map),\r\n        keys: Object.keys(map).map(k => map[k]),\r\n\r\n        direction: function(key){\r\n            return this.directions[ this.keys.indexOf(key) ];\r\n        }\r\n\r\n    })(snake.playerProps.keyMap);\r\n\r\n    window.addEventListener('keydown', e => rowMovements.push(keyMap.direction(e.key)));\r\n    \r\n    // Touch devices \r\n    let touchArea = snake.playerProps.touchArea;\r\n    let touchstart = {}, touchmove = {}, sensibilityTouch = gameProps.snakes.sensibilityTouch;\r\n    const directions = [[\"left\", \"right\"], [\"up\", \"down\"]];\r\n    const orientationMap = {0: \"portrait-primary\", 180: \"portrait-secondary\", 90: \"landscape-primary\", \"-90\": \"landscape-secondary\"};\r\n\r\n    const getOrientation = () => screen.msOrientation || (screen.orientation || screen.mozOrientation || {}).type || orientationMap[window.orientation];\r\n    let orientation = getOrientation();\r\n    window.addEventListener('orientationchange', () => orientation = getOrientation());\r\n\r\n    const touchHandle = touchedArea => {\r\n\r\n        let dragged = [[], []].map((_, axis) => touchstart[touchedArea][axis] - touchmove[touchedArea][axis]);\r\n\r\n        if(isLumia){\r\n            if(orientation === \"landscape-primary\") dragged[0] = -dragged[0];\r\n            else if(orientation === \"landscape-secondary\") dragged[1] = -dragged[1];\r\n            if(orientation.indexOf('landscape') > -1) dragged.reverse();\r\n\r\n            if(orientation === \"portrait-secondary\"){\r\n                dragged[0] = -dragged[0];\r\n                dragged[1] = -dragged[1];\r\n            }\r\n        }\r\n\r\n        if(touchedArea != touchArea && touchArea != 'all') return;\r\n\r\n        let touchAxis = +(Math.abs(dragged[0]) < Math.abs(dragged[1])),\r\n            moveIndex = +(dragged[touchAxis] < 0),\r\n            direction = directions[touchAxis][moveIndex];\r\n\r\n        if(Math.abs(dragged[touchAxis]) >= sensibilityTouch){\r\n            if(direction != rowMovements.lastItem() && direction != snake.direction) rowMovements.push(direction);\r\n            touchstart[touchedArea] = [...touchmove[touchedArea]];\r\n        }\r\n\r\n    }\r\n\r\n    const touchPos = e => [e.changedTouches[0].pageX, e.changedTouches[0].pageY];\r\n\r\n    if(touchArea){\r\n        for (const area in $touchArea) {\r\n            $touchArea[area].addEventListener('touchstart', e => touchstart[area] = touchPos(e));\r\n            $touchArea[area].addEventListener('touchmove', e => { touchmove[area] = touchPos(e); touchHandle(area); });\r\n        }\r\n    }\r\n\r\n    document.ontouchmove = function(e){ e.preventDefault(); } // Disable page scroll\r\n\r\n    // Set current movement\r\n    this.currentMovement = () => {\r\n\r\n        rowMovements = rowMovements.filter(Boolean);\r\n\r\n        if(!rowMovements.length) return;\r\n        snake.direction = rowMovements[0];\r\n        rowMovements && rowMovements.splice(0, 1);\r\n\r\n    }\r\n\r\n}","window.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\nwindow.isLumia = /Lumia/i.test(navigator.userAgent);\r\nwindow.isElectron = /Electron/i.test(navigator.userAgent);","Array.prototype.isEqual = function(arr){\r\n\r\n    return JSON.stringify(this) === JSON.stringify(arr);\r\n\r\n}\r\n\r\nArray.prototype.sumWith = function(...arrays){\r\n    var arrays = [this, ...arrays].sort((a, b) => b.length - a.length), // Order by DESC\r\n        newArray = [...arrays[0]]; // Largest array of the list\r\n\r\n    for (let i = 1, arrLeng = arrays.length; i < arrLeng; i++) {\r\n        const array = arrays[i];\r\n        for (let j = 0, itemLeng = array.length; j < itemLeng; j++) {\r\n            const item = array[j];\r\n            newArray[j] += item;\r\n        }\r\n    }\r\n\r\n    return newArray;\r\n}\r\n\r\nArray.prototype.lastItem = function(){\r\n\r\n    return this[this.length - 1];\r\n\r\n}","if('serviceWorker' in navigator && !isElectron){\r\n    navigator.serviceWorker.register('serviceWorker.js')\r\n        .then(() => console.log('Service worker funcionando'))\r\n        .catch(() => console.log('Erro ao instalar service worker'));\r\n}"]}