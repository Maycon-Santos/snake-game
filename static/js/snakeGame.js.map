{"version":3,"sources":["game/Engine.js","game/Food.js","game/Game.js","game/gameProps.js","game/gestureViewer.js","game/interface.js","game/helpers.js","game/Snake.js","game/snakeControls.js"],"names":["_this","game","canvas","ctx","draw","i","clearRect","width","height","fn","objects","arguments","_key","runFunction","length","args","_objects$i","this","run","engine","start","performance","now","deltaTime","timestamp","min","requestAnimationFrame","add","_object","Food","id","type","push","update","object","key","beginPath","arc","position","tileSize","Math","PI","closePath","fill","Object","defineProperty","set","val","console","error","floor","socket","tiles","get","$game","newStatus","status","Game","players","Engine","interface","log","t","gestureViewer","socketEvents","value","prototype","for","parentNode","addPlayers","playersInTheRoom","playerInTheRoom","player","assign","Snake","playerProps","food","foods","gameProps","qnt","resizeCanvas","$snake","document","querySelector","map","style","window","login","playerNickname","callback","_this2","emit","on","data","myID","_this3","addFoods","$canvas","createElement","getContext","$gestureViewer","chooseSnake_snakeSize","drawLine","x0","y0","x1","y1","winSize","lineTo","stroke","touch","e","changedTouches","addEventListener","pageY","ballPoint","x","y","setTimeout","canvasFullSize","innerHeight","Interface","$modal","$interface","className","what","$welcomeText","$mainMenu","open","changeSnakeColor","color","colors","ballPoints","indexOf","counter","classList","remove","lineWidth","moveTo","nickname","body","killed","bodyStart","SnakeControls","fillStyle","snakes","forEach","bodyFragment","_toConsumableArray","Array","isArray","arr","arr2","snake","isMobile","isLumia","isElectron","$touchAreas","navigator","keyMap","$submitChooser","$snakeChooser","k","$loginForm","$chooserPrev","$singlePlayer","touchstart","touchmove","sensibilityTouch","orientationMap","0","180","$inputNickname","orientation","getOrientation","touchPos","currentColor","touchedArea","axis","dragged","background","$chooserNext","touchHandle","area","ontouchmove","preventDefault","test","userAgent","newGame","increase","JSON","stringify","sumWith","arrays","concat","sort","a","b","arrLeng","j","itemLeng","array","item","lastItem","catch"],"mappings":"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","file":"snakeGame.js","sourcesContent":["function Engine(game){\r\n\r\n    var canvas = game.ctx.canvas;\r\n\r\n    var objects = [];\r\n\r\n    const runFunction = (fn, ...args) => {\r\n\r\n        var i = objects.length;\r\n\r\n        while(i--){\r\n            if(typeof objects[i][fn] == 'function') objects[i][fn](...args);\r\n        }\r\n\r\n    }\r\n\r\n    const draw = () => {\r\n        game.ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        runFunction('draw');\r\n    }\r\n\r\n\r\n    this.run = () => {\r\n\r\n        let engine = this,\r\n            start = performance.now();\r\n\r\n        requestAnimationFrame(function run(timestamp){\r\n\r\n            let deltaTime = (timestamp - start) / 1000;\r\n            deltaTime = Math.min(1, deltaTime);\r\n\r\n            draw();\r\n\r\n            if(deltaTime >= 1) return engine.run();\r\n            requestAnimationFrame(run);\r\n\r\n        }.bind(this));\r\n\r\n    }\r\n\r\n    this.add = (object) => {\r\n        objects.push(object);\r\n        \r\n        object.update = _object => {\r\n            for (const key in _object) object[key] = _object[key];\r\n        }\r\n    }\r\n\r\n}","function Food(game, id){\r\n\r\n    this.id = id;\r\n    this.type;\r\n\r\n    this.position = [];\r\n\r\n    game.engine.add(this);\r\n\r\n    game.socket.on(`foodUpdate-${id}`, this.update);\r\n\r\n    this.draw = () => {\r\n\r\n        if(game.status != 'playing' || !this.type) return;\r\n\r\n        game.ctx.fillStyle = this.type.color;\r\n\r\n        game.ctx.beginPath();\r\n\r\n        game.ctx.arc(\r\n            this.position[0] * game.tileSize + game.tileSize / 2,\r\n            this.position[1] * game.tileSize + game.tileSize / 2,\r\n            game.tileSize / 2,\r\n            0,\r\n            Math.PI * 2\r\n        );\r\n        \r\n        game.ctx.closePath();\r\n\r\n        game.ctx.fill();\r\n\r\n    }\r\n\r\n}","function Game(canvas){\r\n\r\n    // Properties\r\n    var tileSize;\r\n    Object.defineProperty(this, 'tileSize', {\r\n        set: function(val){\r\n            if(+val) tileSize = Math.floor(+val);\r\n            else return console.error('Invalid value');\r\n            canvas.width = this.tileSize * gameProps.tiles[0];\r\n            canvas.height = this.tileSize * gameProps.tiles[1];\r\n        },\r\n        get: function(){ return tileSize; }\r\n    });\r\n\r\n    Object.defineProperty(this, 'ctx', {\r\n        value: canvas.getContext('2d'),\r\n        writable: false\r\n    });\r\n\r\n    var status, $game = canvas.parentNode;\r\n    Object.defineProperty(this, 'status', {\r\n        set: newStatus =>\r\n            $game.className = status = newStatus,\r\n        get: () => status\r\n    });\r\n\r\n    this.playersInTheRoom = [];\r\n\r\n    this.id = null;\r\n    this.players = [];\r\n    this.foods = [];\r\n\r\n    this.status = 'toStart';\r\n    this.engine = new Engine(this);\r\n    this.interface = new Interface(this);\r\n    this.socket = io();\r\n\r\n    this.socket.on('teste', t => console.log(t))\r\n\r\n    gestureViewer();\r\n\r\n    this.engine.run();\r\n\r\n    this.socketEvents();\r\n}\r\n\r\nGame.prototype.newGame = function(){\r\n\r\n    this.status = \"playing\";\r\n\r\n    // this.for('foods', food => {\r\n    //     food.create();\r\n    // });\r\n\r\n}\r\n\r\nGame.prototype.for = function(object, fn){\r\n    for (let id = this[object].length-1; id >= 0; id--)\r\n        fn(this[object][id], id);\r\n}\r\n\r\nGame.prototype.addPlayers = function(){\r\n\r\n    for (let i = this.playersInTheRoom.length - 1; i >= 0 ; i--) {\r\n        const playerInTheRoom = this.playersInTheRoom[i];\r\n\r\n        let player = Object.assign(new Snake(this, playerInTheRoom.id), playerInTheRoom.playerProps);\r\n\r\n        this.players.push(player);\r\n\r\n    }\r\n\r\n}\r\n\r\nGame.prototype.addFoods = function(){\r\n    let food = new Food(this, this.foods.length);\r\n\r\n    this.foods.push(food);\r\n\r\n    if(this.foods.length < gameProps.foods.qnt)\r\n        this.addFoods();\r\n}\r\n\r\nGame.prototype.resizeCanvas = function(){\r\n\r\n\r\n    var $snake = document.querySelector('#snake-chooser .snake');\r\n    const chooseSnake_snakeSize = () => {\r\n        $snake.style.width = `${this.tileSize}px`;\r\n        $snake.style.height = `${this.tileSize}px`;\r\n    }\r\n\r\n    const resizeCanvas = () => {\r\n       \r\n        let winSize = [window.innerWidth, window.innerHeight]; // X, Y\r\n        let tileSize = [0, 0].map((val, i) => winSize[i] / gameProps.tiles[i]);\r\n        this.tileSize = tileSize[tileSize[0] > tileSize[1] ? 1 : 0];\r\n\r\n        chooseSnake_snakeSize();\r\n        \r\n    }\r\n\r\n    resizeCanvas();\r\n    window.addEventListener('resize', resizeCanvas);\r\n\r\n}\r\n\r\nGame.prototype.login = function(playerNickname, callback){\r\n\r\n    this.socket.emit('login', {\r\n        playerNickname: playerNickname\r\n    });\r\n\r\n    this.socket.on('logged', data =>{\r\n\r\n        gameProps = Object.assign(gameProps, data.gameProps);\r\n\r\n        this.id = data.myID;\r\n        this.playersInTheRoom = data.players;\r\n\r\n        this.resizeCanvas();\r\n\r\n        if(typeof callback == 'function') callback(data);\r\n\r\n    });\r\n\r\n}\r\n\r\nGame.prototype.socketEvents = function(){\r\n\r\n    this.socket.on('start', () => {\r\n\r\n        this.interface.closeModal();\r\n\r\n        this.addPlayers();\r\n        this.addFoods();\r\n        this.newGame();\r\n        \r\n        this.socket.emit('start');\r\n    });\r\n\r\n    this.socket.on('newPlayer', player =>\r\n        this.playersInTheRoom.push(player));\r\n\r\n    this.socket.on('playersInTheRoomUpdate', data => {\r\n        var i = data.i;\r\n        delete data.i;\r\n\r\n        this.playersInTheRoom[i] = Object.assign(this.playersInTheRoom[i], data);\r\n    \r\n        console.log(this.playersInTheRoom[i]);\r\n        \r\n    });\r\n\r\n}","var gameProps = {}","function gestureViewer(){\r\n\r\n    var $gestureViewer = document.querySelector('#gestureViewer'),\r\n        $canvas = document.createElement('canvas'),\r\n        ctx = $canvas.getContext('2d');\r\n\r\n    $gestureViewer.appendChild($canvas);\r\n\r\n    var ballPoints = {};\r\n    var counter = 0;\r\n\r\n    const drawLine = (x0, y0, x1, y1) => {\r\n        ctx.strokeStyle = \"#7da278\";\r\n        ctx.lineCap = \"round\";\r\n\t    ctx.lineWidth = 8;\r\n        ctx.beginPath();\r\n        ctx.moveTo(x0, y0);\r\n        ctx.lineTo(x1, y1);\r\n        ctx.stroke();\r\n    }\r\n\r\n    window.addEventListener('touchstart', e => {\r\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\r\n            const touch = e.changedTouches[i];\r\n            var ballPoint = {\r\n                x: touch.pageX,\r\n                y: touch.pageY\r\n            }\r\n            ballPoints[touch.identifier || ++counter] = ballPoint;\r\n            drawLine(ballPoint.x - 1, ballPoint.y, ballPoint.x, ballPoint.y);\r\n        }\r\n    });\r\n\r\n    window.addEventListener('touchmove', e => {\r\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\r\n            const touch = e.changedTouches[i];\r\n            var ballPoint = ballPoints[touch.identifier || counter],\r\n                x = touch.pageX, y = touch.pageY;\r\n\r\n            drawLine(ballPoint.x, ballPoint.y, x, y);\r\n            ballPoint.x = x;\r\n            ballPoint.y = y;\r\n        }\r\n    });\r\n\r\n    window.addEventListener('touchend', e => {\r\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\r\n            const touch = e.changedTouches[i];\r\n            delete ballPoints[touch.identifier || counter];\r\n        }\r\n        setTimeout(() => ctx.clearRect(0, 0, $canvas.width, $canvas.height), 200);\r\n    });\r\n\r\n    const canvasFullSize = () => {\r\n        $canvas.width = window.innerWidth;\r\n        $canvas.height = window.innerHeight;\r\n    }\r\n\r\n    canvasFullSize();\r\n    window.addEventListener('resize', canvasFullSize);\r\n}","function Interface(game){\r\n\r\n    var $interface = document.querySelector('#interface'),\r\n        $modal = $interface.querySelector('.modal'),\r\n        $loginForm = $interface.querySelector('#login form'),\r\n        $inputNickname = $loginForm.querySelector('[name=\"player_name\"]'),\r\n\r\n        $snakeChooser = $interface.querySelector('#snake-chooser'),\r\n        $chooserPrev = $snakeChooser.querySelector('#chooser-prev'),\r\n        $chooserNext = $snakeChooser.querySelector('#chooser-next'),\r\n        $snake = $snakeChooser.querySelector('.snake'),\r\n        $submitChooser = $snakeChooser.querySelector('.submit'),\r\n\r\n        $mainMenu = $interface.querySelector('#main-menu'),\r\n        $singlePlayer = $mainMenu.querySelector('#single-player');\r\n\r\n    this.closeModal = () => $modal.classList.add('closed');\r\n\r\n    this.open = what => $interface.className = what;\r\n\r\n    var $welcomeText = $mainMenu.querySelector('#welcome');\r\n    $loginForm.addEventListener('submit', e => {\r\n        game.login($inputNickname.value, data => {\r\n\r\n            $welcomeText.innerHTML = `Hi, ${$inputNickname.value}`;\r\n\r\n            changeSnakeColor(0);\r\n            this.open('snake-chooser');\r\n\r\n        });\r\n    });\r\n\r\n    $singlePlayer.addEventListener('click', e => {\r\n        game.socket.emit('single player');\r\n    });\r\n\r\n    var currentColor = 0;\r\n    const changeSnakeColor = color => {\r\n\r\n        if(currentColor == 0)\r\n            $chooserPrev.className = 'disabled';\r\n\r\n        if(currentColor == gameProps.snakes.colors.length - 1)\r\n            $chooserNext.className = 'disabled';\r\n\r\n        $snake.style.background = gameProps.snakes.colors[color];\r\n    }\r\n    \r\n    $chooserPrev.addEventListener('click', e => {\r\n        if(e.target.className.indexOf('disabled') == -1){\r\n\r\n            $chooserNext.classList.remove('disabled');\r\n\r\n            currentColor--;\r\n\r\n            changeSnakeColor(currentColor);\r\n        }\r\n    });\r\n\r\n    $chooserNext.addEventListener('click', e => {\r\n        if(e.target.className.indexOf('disabled') == -1){\r\n\r\n            $chooserPrev.classList.remove('disabled');\r\n\r\n            currentColor++;\r\n        \r\n            changeSnakeColor(currentColor);\r\n        }\r\n    });\r\n\r\n    $submitChooser.addEventListener('click', () => {\r\n\r\n        game.socket.emit('changeColor', currentColor);\r\n        this.open('main-menu');\r\n\r\n    });\r\n\r\n}","window.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\nwindow.isLumia = /Lumia/i.test(navigator.userAgent);\r\nwindow.isElectron = /Electron/i.test(navigator.userAgent);","function Snake(game, id){\r\n\r\n    this.id = id;\r\n    this.idLocal = 0;\r\n\r\n    this.nickname = null;\r\n\r\n    this.body = [];\r\n    this.color = 0;\r\n\r\n    this.increase = 0;\r\n\r\n    this.killed = false;\r\n\r\n    this.bodyStart = [0, 0];\r\n\r\n    game.engine.add(this);\r\n\r\n    if(game.id == this.id) new SnakeControls(this, game);\r\n\r\n    game.socket.on(`snakeUpdate-${id}`, this.update);\r\n\r\n    this.draw = () => {\r\n\r\n        if(this.killed) return;\r\n\r\n        game.ctx.fillStyle = gameProps.snakes.colors[this.color];\r\n\r\n        this.body.forEach(bodyFragment => {\r\n            game.ctx.fillRect(\r\n                bodyFragment[0] * game.tileSize,\r\n                bodyFragment[1] * game.tileSize,\r\n                game.tileSize,\r\n                game.tileSize\r\n            );\r\n        });\r\n\r\n    }\r\n\r\n}","function SnakeControls(snake, game){\r\n\r\n    //var rowMovements = [];\r\n\r\n    const pushMovement = moveTo => {\r\n        if(!moveTo) return;\r\n        game.socket.emit(`moveTo`, moveTo);\r\n    }\r\n\r\n    var $touchAreas = document.querySelector('#touch-areas');\r\n    var $touchArea = {left: $touchAreas.querySelector('#left'), right: $touchAreas.querySelector('#right')};\r\n\r\n    // Keyboard\r\n    var keyMap = (map => map ? {\r\n\r\n        directions: Object.keys(map),\r\n        keys: Object.keys(map).map(k => map[k]),\r\n\r\n        direction: function(key){\r\n            return this.directions[ this.keys.indexOf(key) ];\r\n        }\r\n\r\n    } : undefined)(gameProps.snakes.keyMaps[snake.idLocal]);\r\n\r\n    keyMap && window.addEventListener('keydown', e => pushMovement(keyMap.direction(e.key)));\r\n    \r\n    // Touch devices \r\n    let touchArea = 'all';\r\n    let touchstart = {}, touchmove = {}, sensibilityTouch = gameProps.snakes.sensibilityTouch;\r\n    const directions = [[\"left\", \"right\"], [\"up\", \"down\"]];\r\n    const orientationMap = {0: \"portrait-primary\", 180: \"portrait-secondary\", 90: \"landscape-primary\", \"-90\": \"landscape-secondary\"};\r\n\r\n    const getOrientation = () => screen.msOrientation || (screen.orientation || screen.mozOrientation || {}).type || orientationMap[window.orientation];\r\n    let orientation = getOrientation();\r\n    window.addEventListener('orientationchange', () => orientation = getOrientation());\r\n\r\n    const touchHandle = touchedArea => {\r\n\r\n        let dragged = [[], []].map((_, axis) => touchstart[touchedArea][axis] - touchmove[touchedArea][axis]);\r\n\r\n        if(isLumia){\r\n            if(orientation === \"landscape-primary\") dragged[0] = -dragged[0];\r\n            else if(orientation === \"landscape-secondary\") dragged[1] = -dragged[1];\r\n            if(orientation.indexOf('landscape') > -1) dragged.reverse();\r\n\r\n            if(orientation === \"portrait-secondary\"){\r\n                dragged[0] = -dragged[0];\r\n                dragged[1] = -dragged[1];\r\n            }\r\n        }\r\n\r\n        if(touchedArea != touchArea && touchArea != 'all') return;\r\n\r\n        let touchAxis = +(Math.abs(dragged[0]) < Math.abs(dragged[1])),\r\n            moveIndex = +(dragged[touchAxis] < 0),\r\n            direction = directions[touchAxis][moveIndex];\r\n\r\n        if(Math.abs(dragged[touchAxis]) >= sensibilityTouch){\r\n            if(direction != rowMovements.lastItem() && direction != snake.direction) pushMovement(direction);\r\n            touchstart[touchedArea] = [...touchmove[touchedArea]];\r\n        }\r\n\r\n    }\r\n\r\n    const touchPos = e => [e.changedTouches[0].pageX, e.changedTouches[0].pageY];\r\n\r\n    if(touchArea){\r\n        for (const area in $touchArea) {\r\n            $touchArea[area].addEventListener('touchstart', e => touchstart[area] = touchPos(e));\r\n            $touchArea[area].addEventListener('touchmove', e => { touchmove[area] = touchPos(e); touchHandle(area); });\r\n        }\r\n    }\r\n\r\n    document.ontouchmove = function(e){ e.preventDefault(); } // Disable page scroll\r\n\r\n}"]}