{"version":3,"sources":["game/Engine.js","game/Food.js","game/Game.js","game/gameProps.js","game/gameRules.js","game/gestureViewer.js","game/helpers.js","game/interface.js","game/Snake.js","game/snakeControls.js"],"names":["_this","game","canvas","ctx","fn","objects","arguments","_key","runFunction","length","i","args","_objects$i","this","update","engine","start","performance","now","requestAnimationFrame","run","timestamp","draw","min","deltaTime","clearRect","width","height","add","Food","selectFood","object","Math","random","foodTypes","type","push","position","map","_","axis","round","gameProps","tiles","beginPath","key","closePath","foodType","Game","tileSize","Object","defineProperty","create","val","get","writable","players","status","fillStyle","emit","log","fill","addPlayers","addFoods","prototype","set","food","player","newBody","for","id","Snake","snakes","foods","Engine","interface","socket","io","console","gameRules","window","innerWidth","innerHeight","winSize","resizeCanvas","speed","bodyStart","initialDirection","login","playerNickname","newGame","data","color","left","right","up","down","freezer","addEventListener","index","body","isEqual","playerHead","collided","otherPlayer","otherID","killed","_index","sensibilityTouch","keyMap","touchArea","head","increase","chance","document","querySelector","$canvas","createElement","getContext","$gestureViewer","appendChild","x0","y0","x1","y1","lineCap","superSpeed","stroke","e","changedTouches","ballPoint","x","y","touch","identifier","counter","pageX","pageY","canvasFullSize","_toConsumableArray","Array","isArray","arr","arr2","playerProps","snakeColision","snakeAteFood","gestureViewer","ballPoints","includes","to","reverse","lineWidth","tailDirection","strokeStyle","oldDirection","tail","drawLine","SnakeControls","progressMove","direction","directionMap","abs","nextPos","concat","isLumia","test","progress","isElectron","navigator","snakeControls","currentMovement","forEach","bodyFragment","directions","rowMovements","$touchAreas","$touchArea","keys","k","indexOf","penultBodyFragment","touchstart","touchmove","orientationMap","movement","orientation","touchPos","_loop","area","fillRect","touchedArea","dragged","touchAxis","moveIndex","touchHandle","from","initialSize","filter","Boolean","newPos","splice","isMobile","userAgent","JSON","stringify","sumWith","arrays","newArray","snake","j"],"mappings":"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","file":"snakeGame.js","sourcesContent":["function Engine(game){\r\n\r\n    var canvas = game.ctx.canvas;\r\n\r\n    var objects = [];\r\n\r\n    const runFunction = (fn, ...args) => {\r\n\r\n        var i = objects.length;\r\n\r\n        while(i--){\r\n            if(typeof objects[i][fn] == 'function') objects[i][fn](...args);\r\n        }\r\n\r\n    }\r\n\r\n    const update = (deltaTime) => runFunction('update', deltaTime);\r\n\r\n    const draw = () => {\r\n        game.ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        runFunction('draw');\r\n    }\r\n\r\n\r\n    this.run = () => {\r\n\r\n        let engine = this,\r\n            start = performance.now();\r\n\r\n        requestAnimationFrame(function run(timestamp){\r\n\r\n            let deltaTime = (timestamp - start) / 1000;\r\n            deltaTime = Math.min(1, deltaTime);\r\n\r\n            update(deltaTime);\r\n            draw();\r\n\r\n            if(deltaTime >= 1) return engine.run();\r\n            requestAnimationFrame(run);\r\n\r\n        }.bind(this));\r\n\r\n    }\r\n\r\n    this.add = (object) => objects.push(object);\r\n\r\n}","function Food(game){\r\n\r\n    var foodTypes = [], type;\r\n\r\n    this.position = [];\r\n\r\n    for (const key in gameProps.foods.types) {\r\n        const foodType = gameProps.foods.types[key],\r\n              chance = foodType.chance;\r\n\r\n        for (let i = 0; i < chance; i++) foodTypes.push(foodType);\r\n    }\r\n\r\n    this.create = function(){\r\n\r\n        const selectFood = Math.round(Math.random() * (foodTypes.length - 1));\r\n\r\n        type = foodTypes[selectFood];\r\n\r\n        this.position = [[], []].map((_, axis) => Math.round(Math.random() * (gameProps.tiles[axis] - 1)));\r\n    \r\n    }\r\n\r\n    this.update = () => {\r\n    }\r\n\r\n    this.draw = () => {\r\n\r\n        if(game.status != 'playing') return;\r\n\r\n        game.ctx.fillStyle = type.color;\r\n\r\n        game.ctx.beginPath();\r\n\r\n        game.ctx.arc(\r\n            this.position[0] * game.tileSize + game.tileSize / 2,\r\n            this.position[1] * game.tileSize + game.tileSize / 2,\r\n            game.tileSize / 2,\r\n            0,\r\n            Math.PI * 2\r\n        );\r\n        \r\n        game.ctx.closePath();\r\n\r\n        game.ctx.fill();\r\n\r\n    }\r\n\r\n}","function Game(canvas){\r\n\r\n    // Properties\r\n    var tileSize;\r\n    Object.defineProperty(this, 'tileSize', {\r\n        set: function(val){\r\n            if(+val) tileSize = Math.floor(+val);\r\n            else return console.error('Invalid value');\r\n            canvas.width = this.tileSize * gameProps.tiles[0];\r\n            canvas.height = this.tileSize * gameProps.tiles[1];\r\n        },\r\n        get: function(){ return tileSize; }\r\n    });\r\n\r\n    Object.defineProperty(this, 'ctx', {\r\n        value: canvas.getContext('2d'),\r\n        writable: false\r\n    });\r\n\r\n    this.players = [];\r\n    this.foods = [];\r\n\r\n    this.status = 'toStart';\r\n    this.engine = new Engine(this);\r\n    this.interface = new Interface(this);\r\n    this.socket = io();\r\n\r\n    this.socket.emit('connection');\r\n    this.socket.on('teste', data => {\r\n        console.log(data);\r\n    });\r\n\r\n    new gameRules(this);\r\n\r\n    this.addPlayers();\r\n    this.addFoods();\r\n\r\n    //this.newGame();\r\n    gestureViewer();\r\n\r\n    this.resizeCanvas();\r\n    this.engine.run();\r\n\r\n}\r\n\r\nGame.prototype.newGame = function(){\r\n\r\n    this.status = \"playing\";\r\n\r\n    this.for('foods', food => {\r\n        food.create();\r\n    });\r\n\r\n    this.for('players', player => {\r\n        player.newBody();\r\n    });\r\n\r\n}\r\n\r\nGame.prototype.for = function(object, fn){\r\n    for (let id = this[object].length-1; id >= 0; id--)\r\n        fn(this[object][id], id);\r\n}\r\n\r\nGame.prototype.addPlayers = function(){\r\n\r\n    let player = new Snake(this, this.players.length);\r\n\r\n    this.players.push(player);\r\n\r\n    if(this.players.length < gameProps.snakes.players.length)\r\n        this.addPlayers();\r\n\r\n}\r\n\r\nGame.prototype.addFoods = function(){\r\n    let food = new Food(this);\r\n\r\n    this.engine.add(food);\r\n    this.foods.push(food);\r\n\r\n    if(this.foods.length < gameProps.foods.qnt)\r\n        this.addFoods();\r\n}\r\n\r\nGame.prototype.resizeCanvas = function(){\r\n\r\n    const resizeCanvas = () => {\r\n       \r\n        let winSize = [window.innerWidth, window.innerHeight]; // X, Y\r\n        let tileSize = [0, 0].map((val, i) => winSize[i] / gameProps.tiles[i]);\r\n        this.tileSize = tileSize[tileSize[0] > tileSize[1] ? 1 : 0];\r\n        \r\n    }\r\n\r\n    resizeCanvas();\r\n    window.addEventListener('resize', resizeCanvas);\r\n\r\n}\r\n\r\nGame.prototype.login = function(playerNickname){\r\n\r\n    this.socket.emit('login', playerNickname);\r\n\r\n    this.socket.on('logged', data => {\r\n        console.log(data);\r\n    });\r\n\r\n}","var gameProps = {\r\n    tiles: [64, 36], // X, Y\r\n\r\n    snakes: {\r\n        speed: 15,\r\n        initialSize: 1,\r\n        bodyStart: [7, 4, \"left\"],\r\n        initialDirection: \"right\",\r\n        reverse: false,\r\n        sensibilityTouch: 30, // the higher, the less sensitive\r\n\r\n        players: [\r\n            {\r\n                color: \"#000000\",\r\n                bodyStart: [60, 30, 'up'],\r\n                initialDirection: 'right',\r\n                keyMap: {left: \"ArrowLeft\", right: \"ArrowRight\", up: \"ArrowUp\", down: \"ArrowDown\"},\r\n                touchArea: \"right\"\r\n            },\r\n            {\r\n                color: \"#ff0000\",\r\n                bodyStart: [6, 6, 'left'],\r\n                keyMap: {left: \"a\", right: \"d\", up: \"w\", down: \"s\"},\r\n                touchArea: \"left\"\r\n            },\r\n            // {\r\n            //     color: \"#00ff00\",\r\n            //     bodyStart: [7, 8, 'left'],\r\n            //     keyMap: {left: \"j\", right: \"l\", up: \"i\", down: \"k\"}\r\n            // }\r\n        ]\r\n    },\r\n\r\n    foods: {\r\n        qnt: 1,\r\n\r\n        types: {\r\n            normal: {\r\n                chance: 5,\r\n                color: '#FFE400'\r\n            },\r\n\r\n            freezer: {\r\n                chance: 0,\r\n                color: '#008F30'\r\n            },\r\n\r\n            superSpeed: {\r\n                chance: 0,\r\n                color: '#008F30'\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}","function gameRules(game){\r\n\r\n    game.engine.add(this);\r\n\r\n    const snakeColision = () => {\r\n\r\n        game.for('players', (player, id) => {\r\n\r\n            if(player.killed) return;\r\n\r\n            let playerHead = player.head; // For performance. Accessing an object several times is heavy\r\n\r\n            // player.body.every((bodyFragment, index) => {\r\n            //     player.collided = index > 0 && bodyFragment.isEqual(playerHead);\r\n            //     console.log(index, bodyFragment.isEqual(playerHead));\r\n            //     if(player.collided) return; // Break the loop\r\n            // });\r\n\r\n            for (let index = player.body.length - 1; index >= 0; index--) {\r\n\r\n                if(index > 0 && player.body[index].isEqual(playerHead))\r\n                    return player.collided = true;\r\n\r\n            }\r\n\r\n            !player.collided && game.for('players', (otherPlayer, otherID) => {\r\n\r\n                if(id == otherID || otherPlayer.killed) return;\r\n\r\n                for (let index = otherPlayer.body.length - 1; index >= 0; index--) {\r\n\r\n                    if(otherPlayer.body[index].isEqual(playerHead))\r\n                        return player.collided = true;\r\n\r\n                }\r\n\r\n            });\r\n\r\n        });\r\n\r\n        game.for('players', player => player.killed = player.collided); // Kill the player if collided\r\n    \r\n    }\r\n\r\n    const snakeAteFood = () => {\r\n        game.for('foods', food => {\r\n            game.for('players', player => {\r\n                if(player.head.isEqual(food.position)){\r\n                    player.increase++;\r\n                    food.create();\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    this.update = () => {\r\n\r\n        if(game.status != 'playing') return;\r\n\r\n        snakeColision();\r\n        snakeAteFood();\r\n\r\n    }\r\n\r\n}","function gestureViewer(){\r\n\r\n    var $gestureViewer = document.querySelector('#gestureViewer'),\r\n        $canvas = document.createElement('canvas'),\r\n        ctx = $canvas.getContext('2d');\r\n\r\n    $gestureViewer.appendChild($canvas);\r\n\r\n    var ballPoints = {};\r\n    var counter = 0;\r\n\r\n    const drawLine = (x0, y0, x1, y1) => {\r\n        ctx.strokeStyle = \"#7da278\";\r\n        ctx.lineCap = \"round\";\r\n\t    ctx.lineWidth = 8;\r\n        ctx.beginPath();\r\n        ctx.moveTo(x0, y0);\r\n        ctx.lineTo(x1, y1);\r\n        ctx.stroke();\r\n    }\r\n\r\n    window.addEventListener('touchstart', e => {\r\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\r\n            const touch = e.changedTouches[i];\r\n            var ballPoint = {\r\n                x: touch.pageX,\r\n                y: touch.pageY\r\n            }\r\n            ballPoints[touch.identifier || ++counter] = ballPoint;\r\n            drawLine(ballPoint.x - 1, ballPoint.y, ballPoint.x, ballPoint.y);\r\n        }\r\n    });\r\n\r\n    window.addEventListener('touchmove', e => {\r\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\r\n            const touch = e.changedTouches[i];\r\n            var ballPoint = ballPoints[touch.identifier || counter],\r\n                x = touch.pageX, y = touch.pageY;\r\n\r\n            drawLine(ballPoint.x, ballPoint.y, x, y);\r\n            ballPoint.x = x;\r\n            ballPoint.y = y;\r\n        }\r\n    });\r\n\r\n    window.addEventListener('touchend', e => {\r\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\r\n            const touch = e.changedTouches[i];\r\n            delete ballPoints[touch.identifier || counter];\r\n        }\r\n        setTimeout(() => ctx.clearRect(0, 0, $canvas.width, $canvas.height), 200);\r\n    });\r\n\r\n    const canvasFullSize = () => {\r\n        $canvas.width = window.innerWidth;\r\n        $canvas.height = window.innerHeight;\r\n    }\r\n\r\n    canvasFullSize();\r\n    window.addEventListener('resize', canvasFullSize);\r\n}","window.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\nwindow.isLumia = /Lumia/i.test(navigator.userAgent);\r\nwindow.isElectron = /Electron/i.test(navigator.userAgent);","function Interface(game){\r\n\r\n    //console.log('teste');\r\n\r\n\r\n}","function Snake(game, id){\r\n\r\n    this.id = id;\r\n    this.body = [];\r\n\r\n    this.increase = 0;\r\n    this.collided = false;\r\n    this.killed = false;\r\n\r\n    this.playerProps = gameProps.snakes.players[id];\r\n\r\n    var directionMap = {\r\n        'left': [-1, 0],\r\n        'right': [1, 0],\r\n        'up': [0, -1],\r\n        'down': [0, 1]\r\n    }\r\n\r\n    var direction = this.playerProps.initialDirection || gameProps.snakes.initialDirection;\r\n    Object.defineProperty(this, 'direction', {\r\n        get: () => direction,\r\n        set: (to) => {\r\n\r\n            let directions = Object.keys(directionMap), // X, Y\r\n                oldDirection = direction,\r\n                reverse = this.playerProps.reverse || gameProps.snakes.reverse;\r\n\r\n            if(directions.includes(to)) direction = to;\r\n\r\n            if(nextPos().isEqual(this.body[1])){\r\n\r\n                if(!reverse) direction = oldDirection;\r\n                else{\r\n                    direction = this.tailDirection;\r\n                    this.body.reverse();\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n    });\r\n\r\n    Object.defineProperties(this, {\r\n        head: { get: () => this.body[0] },\r\n        tail: { get: () => this.body[this.body.length - 1]},\r\n        tailDirection: {\r\n            get: () => {\r\n                let penultBodyFragment = this.body[this.body.length - 2],\r\n                    tail = this.tail;\r\n\r\n                if(tail[0] > penultBodyFragment[0]) return 'right';\r\n                if(tail[0] < penultBodyFragment[0]) return 'left';\r\n\r\n                if(tail[1] > penultBodyFragment[1]) return 'down';\r\n                if(tail[1] < penultBodyFragment[1]) return 'up';\r\n\r\n            }\r\n        }\r\n    });\r\n\r\n    game.engine.add(this);\r\n    const snakeControls = new SnakeControls(this, game);\r\n\r\n    var progressMove = 0;\r\n    const movement = (deltaTime) => {\r\n\r\n        let speed = this.playerProps.speed || gameProps.snakes.speed;\r\n        let progress = deltaTime * speed;\r\n    \r\n        if(~~progress <= ~~progressMove) return;\r\n\r\n        snakeControls.currentMovement();\r\n\r\n        progressMove = progress != speed ? progress : 0;\r\n        \r\n        this.body.splice(0, 0, nextPos());\r\n        this.increase < 1 ? this.body.pop() : this.increase--;\r\n        \r\n    }\r\n\r\n    const nextPos = () => {\r\n\r\n        let direction = directionMap[this.direction],\r\n            axis = Math.abs(direction[1]),\r\n            nextPos = [...this.body[0]];\r\n\r\n        nextPos[axis] += direction[axis];\r\n\r\n        if(nextPos[axis] >= gameProps.tiles[axis]) nextPos[axis] = 0;\r\n        else if(nextPos[axis] < 0) nextPos[axis] = gameProps.tiles[axis] - 1;\r\n\r\n        return nextPos;\r\n\r\n    }\r\n\r\n    this.update = (deltaTime) => {\r\n        if(this.body.length && !this.killed){\r\n            movement(deltaTime);\r\n        }\r\n    }\r\n\r\n    this.draw = () => {\r\n\r\n        if(this.killed) return;\r\n\r\n        game.ctx.fillStyle = this.playerProps.color;\r\n\r\n        this.body.forEach(bodyFragment => {\r\n            game.ctx.fillRect(\r\n                bodyFragment[0] * game.tileSize,\r\n                bodyFragment[1] * game.tileSize,\r\n                game.tileSize,\r\n                game.tileSize\r\n            );\r\n        });\r\n\r\n    }\r\n\r\n}\r\n\r\nSnake.prototype.newBody = function(){\r\n\r\n    var bodyStart = this.playerProps.bodyStart || gameProps.snakes.bodyStart,\r\n        from = [bodyStart[0], bodyStart[1]],\r\n        to = bodyStart[2];\r\n\r\n    this.body = [from];\r\n\r\n    var initialSize = this.playerProps.initialSize || gameProps.snakes.initialSize;\r\n    for (let i = 1; i < initialSize; i++) {\r\n\r\n        this.body.push([]);\r\n\r\n        let newPos = [...from];\r\n\r\n        switch(to){\r\n\r\n            case 'right':\r\n            case 'left':\r\n                newPos[0] = to == 'right' ? from[0]+i : from[0]-i;\r\n                break;\r\n\r\n            case 'up':\r\n            case 'down':\r\n                newPos[1] = to == 'down' ? from[1]+i : from[1]-i;\r\n                break;\r\n\r\n        }\r\n\r\n        for (let axis = 0; axis <= 1; axis++) {\r\n\r\n            if(newPos[axis] < 0) newPos[axis] = gameProps.tiles[axis] - Math.abs(newPos[axis]);\r\n            if(newPos[axis] >= gameProps.tiles[axis]) newPos[axis] = newPos[axis] - gameProps.tiles[axis];\r\n            \r\n            this.body[i].push(newPos[axis]);\r\n            \r\n        }\r\n\r\n    }\r\n\r\n}","function SnakeControls(snake, game){\r\n\r\n    var rowMovements = [];\r\n\r\n    var $touchAreas = document.querySelector('#touch-areas');\r\n    var $touchArea = {left: $touchAreas.querySelector('#left'), right: $touchAreas.querySelector('#right')};\r\n\r\n    // Keyboard\r\n    var keyMap = (map => keyMap = {\r\n\r\n        directions: Object.keys(map),\r\n        keys: Object.keys(map).map(k => map[k]),\r\n\r\n        direction: function(key){\r\n            return this.directions[ this.keys.indexOf(key) ];\r\n        }\r\n\r\n    })(snake.playerProps.keyMap);\r\n\r\n    window.addEventListener('keydown', e => rowMovements.push(keyMap.direction(e.key)));\r\n    \r\n    // Touch devices \r\n    let touchArea = snake.playerProps.touchArea;\r\n    let touchstart = {}, touchmove = {}, sensibilityTouch = gameProps.snakes.sensibilityTouch;\r\n    const directions = [[\"left\", \"right\"], [\"up\", \"down\"]];\r\n    const orientationMap = {0: \"portrait-primary\", 180: \"portrait-secondary\", 90: \"landscape-primary\", \"-90\": \"landscape-secondary\"};\r\n\r\n    const getOrientation = () => screen.msOrientation || (screen.orientation || screen.mozOrientation || {}).type || orientationMap[window.orientation];\r\n    let orientation = getOrientation();\r\n    window.addEventListener('orientationchange', () => orientation = getOrientation());\r\n\r\n    const touchHandle = touchedArea => {\r\n\r\n        let dragged = [[], []].map((_, axis) => touchstart[touchedArea][axis] - touchmove[touchedArea][axis]);\r\n\r\n        if(isLumia){\r\n            if(orientation === \"landscape-primary\") dragged[0] = -dragged[0];\r\n            else if(orientation === \"landscape-secondary\") dragged[1] = -dragged[1];\r\n            if(orientation.indexOf('landscape') > -1) dragged.reverse();\r\n\r\n            if(orientation === \"portrait-secondary\"){\r\n                dragged[0] = -dragged[0];\r\n                dragged[1] = -dragged[1];\r\n            }\r\n        }\r\n\r\n        if(touchedArea != touchArea && touchArea != 'all') return;\r\n\r\n        let touchAxis = +(Math.abs(dragged[0]) < Math.abs(dragged[1])),\r\n            moveIndex = +(dragged[touchAxis] < 0),\r\n            direction = directions[touchAxis][moveIndex];\r\n\r\n        if(Math.abs(dragged[touchAxis]) >= sensibilityTouch){\r\n            if(direction != rowMovements.lastItem() && direction != snake.direction) rowMovements.push(direction);\r\n            touchstart[touchedArea] = [...touchmove[touchedArea]];\r\n        }\r\n\r\n    }\r\n\r\n    const touchPos = e => [e.changedTouches[0].pageX, e.changedTouches[0].pageY];\r\n\r\n    if(touchArea){\r\n        for (const area in $touchArea) {\r\n            $touchArea[area].addEventListener('touchstart', e => touchstart[area] = touchPos(e));\r\n            $touchArea[area].addEventListener('touchmove', e => { touchmove[area] = touchPos(e); touchHandle(area); });\r\n        }\r\n    }\r\n\r\n    document.ontouchmove = function(e){ e.preventDefault(); } // Disable page scroll\r\n\r\n    // Set current movement\r\n    this.currentMovement = () => {\r\n\r\n        rowMovements = rowMovements.filter(Boolean);\r\n\r\n        if(!rowMovements.length) return;\r\n        snake.direction = rowMovements[0];\r\n        rowMovements && rowMovements.splice(0, 1);\r\n\r\n    }\r\n\r\n}"]}