{"version":3,"sources":["game/Engine.js","game/Food.js","game/Game.js","game/gameRules.js","game/gestureViewer.js","game/interface.js","game/helpers.js","game/Snake.js","game/snakeControls.js"],"names":["_this","game","canvas","ctx","fn","objects","arguments","_key","runFunction","length","i","args","_objects$i","this","update","engine","start","performance","now","requestAnimationFrame","run","timestamp","draw","min","deltaTime","clearRect","width","height","add","Food","selectFood","object","Math","random","foodTypes","type","push","position","map","_","axis","round","gameProps","tiles","beginPath","key","closePath","foodType","Game","tileSize","Object","defineProperty","create","val","get","writable","playersInTheRoom","fillStyle","arc","on","data","prototype","newGame","for","id","value","getContext","playerInTheRoom","player","addFoods","status","food","interface","Interface","foods","qnt","socket","resizeCanvas","console","winSize","window","innerWidth","innerHeight","socketEvents","playerNickname","callback","_this2","players","newBody","_this3","closeModal","gameRules","emit","body","index","isEqual","playerHead","otherPlayer","otherID","_index","collided","addEventListener","gestureViewer","assign","counter","strokeStyle","lineCap","lineWidth","lineTo","x1","y1","addPlayers","touch","pageX","y","pageY","changedTouches","ballPoints","identifier","x","snakeColision","killed","e","setTimeout","$canvas","canvasFullSize","$modal","classList","$welcomeText","$mainMenu","querySelector","$loginForm","snakeAteFood","$inputNickname","innerHTML","nickname","$interface","_toConsumableArray","arr","Array","isArray","Snake","$gestureViewer","document","appendChild","snakes","initialDirection","to","stroke","keys","directionMap","includes","direction","ballPoint","tailDirection","oldDirection","head","drawLine","tail","penultBodyFragment","snakeControls","SnakeControls","nextPos","$singlePlayer","progress","speed","isMobile","currentMovement","isLumia","navigator","userAgent","isElectron","splice","test","openMainMenu","colors","bodyFragment","arr2","snake","set","$touchArea","directions","left","$touchAreas","keyMap","keyMaps","reverse","indexOf","undefined","defineProperties","touchmove","sensibilityTouch","orientationMap","90","-90","getOrientation","screen","mozOrientation","orientation","touchPos","touchstart","area","touchedArea","progressMove","movement","touchAxis","abs","increase","moveIndex","dragged","touchHandle","ontouchmove","fillRect","rowMovements","filter","Boolean","from","bodyStart","initialSize","newPos","concat","_len","arrays","sort","a","b","array","item","lastItem"],"mappings":"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","file":"snakeGame.js","sourcesContent":["function Engine(game){\r\n\r\n    var canvas = game.ctx.canvas;\r\n\r\n    var objects = [];\r\n\r\n    const runFunction = (fn, ...args) => {\r\n\r\n        var i = objects.length;\r\n\r\n        while(i--){\r\n            if(typeof objects[i][fn] == 'function') objects[i][fn](...args);\r\n        }\r\n\r\n    }\r\n\r\n    const update = (deltaTime) => runFunction('update', deltaTime);\r\n\r\n    const draw = () => {\r\n        game.ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        runFunction('draw');\r\n    }\r\n\r\n\r\n    this.run = () => {\r\n\r\n        let engine = this,\r\n            start = performance.now();\r\n\r\n        requestAnimationFrame(function run(timestamp){\r\n\r\n            let deltaTime = (timestamp - start) / 1000;\r\n            deltaTime = Math.min(1, deltaTime);\r\n\r\n            update(deltaTime);\r\n            draw();\r\n\r\n            if(deltaTime >= 1) return engine.run();\r\n            requestAnimationFrame(run);\r\n\r\n        }.bind(this));\r\n\r\n    }\r\n\r\n    this.add = (object) => objects.push(object);\r\n\r\n}","function Food(game){\r\n\r\n    var foodTypes = [], type;\r\n\r\n    this.position = [];\r\n\r\n    for (const key in gameProps.foods.types) {\r\n        const foodType = gameProps.foods.types[key],\r\n              chance = foodType.chance;\r\n\r\n        for (let i = 0; i < chance; i++) foodTypes.push(foodType);\r\n    }\r\n\r\n    this.create = function(){\r\n\r\n        const selectFood = Math.round(Math.random() * (foodTypes.length - 1));\r\n\r\n        type = foodTypes[selectFood];\r\n\r\n        this.position = [[], []].map((_, axis) => Math.round(Math.random() * (gameProps.tiles[axis] - 1)));\r\n    \r\n    }\r\n\r\n    this.update = () => {\r\n    }\r\n\r\n    this.draw = () => {\r\n\r\n        if(game.status != 'playing') return;\r\n\r\n        game.ctx.fillStyle = type.color;\r\n\r\n        game.ctx.beginPath();\r\n\r\n        game.ctx.arc(\r\n            this.position[0] * game.tileSize + game.tileSize / 2,\r\n            this.position[1] * game.tileSize + game.tileSize / 2,\r\n            game.tileSize / 2,\r\n            0,\r\n            Math.PI * 2\r\n        );\r\n        \r\n        game.ctx.closePath();\r\n\r\n        game.ctx.fill();\r\n\r\n    }\r\n\r\n}","function Game(canvas){\r\n\r\n    // Properties\r\n    var tileSize;\r\n    Object.defineProperty(this, 'tileSize', {\r\n        set: function(val){\r\n            if(+val) tileSize = Math.floor(+val);\r\n            else return console.error('Invalid value');\r\n            canvas.width = this.tileSize * gameProps.tiles[0];\r\n            canvas.height = this.tileSize * gameProps.tiles[1];\r\n        },\r\n        get: function(){ return tileSize; }\r\n    });\r\n\r\n    Object.defineProperty(this, 'ctx', {\r\n        value: canvas.getContext('2d'),\r\n        writable: false\r\n    });\r\n\r\n    this.playersInTheRoom = [];\r\n\r\n    this.players = [];\r\n    this.foods = [];\r\n\r\n    this.status = 'toStart';\r\n    this.engine = new Engine(this);\r\n    this.interface = new Interface(this);\r\n    this.socket = io();\r\n\r\n    this.socket.emit('connection');\r\n    this.socket.on('teste', data => {\r\n        console.log(data);\r\n    });\r\n\r\n    //new gameRules(this);\r\n\r\n    //this.addFoods();\r\n\r\n    gestureViewer();\r\n\r\n    this.engine.run();\r\n\r\n    this.socketEvents();\r\n}\r\n\r\nGame.prototype.newGame = function(){\r\n\r\n    this.status = \"playing\";\r\n\r\n    // this.for('foods', food => {\r\n    //     food.create();\r\n    // });\r\n\r\n    this.for('players', player => {\r\n        player.newBody();\r\n    });\r\n\r\n}\r\n\r\nGame.prototype.for = function(object, fn){\r\n    for (let id = this[object].length-1; id >= 0; id--)\r\n        fn(this[object][id], id);\r\n}\r\n\r\nGame.prototype.addPlayers = function(){\r\n\r\n    for (let i = this.playersInTheRoom.length - 1; i >= 0 ; i--) {\r\n        const playerInTheRoom = this.playersInTheRoom[i];\r\n\r\n        let player = Object.assign(new Snake(this, playerInTheRoom.id), playerInTheRoom.playerProps);\r\n\r\n        this.players.push(player);\r\n\r\n    }\r\n\r\n}\r\n\r\nGame.prototype.addFoods = function(){\r\n    let food = new Food(this);\r\n\r\n    this.engine.add(food);\r\n    this.foods.push(food);\r\n\r\n    if(this.foods.length < gameProps.foods.qnt)\r\n        this.addFoods();\r\n}\r\n\r\nGame.prototype.resizeCanvas = function(){\r\n\r\n    const resizeCanvas = () => {\r\n       \r\n        let winSize = [window.innerWidth, window.innerHeight]; // X, Y\r\n        let tileSize = [0, 0].map((val, i) => winSize[i] / gameProps.tiles[i]);\r\n        this.tileSize = tileSize[tileSize[0] > tileSize[1] ? 1 : 0];\r\n        \r\n    }\r\n\r\n    resizeCanvas();\r\n    window.addEventListener('resize', resizeCanvas);\r\n\r\n}\r\n\r\nGame.prototype.login = function(playerNickname, callback){\r\n\r\n    this.socket.emit('login', {\r\n        playerNickname: playerNickname\r\n    });\r\n\r\n    this.socket.on('logged', data =>{\r\n\r\n        if(typeof callback == 'function') callback(data);\r\n\r\n        gameProps = Object.assign(gameProps, data.gameProps);\r\n\r\n        this.playersInTheRoom = data.players;\r\n\r\n        this.resizeCanvas();\r\n\r\n    });\r\n\r\n}\r\n\r\nGame.prototype.socketEvents = function(){\r\n\r\n    this.socket.on('start', data => {\r\n\r\n        this.interface.closeModal();\r\n\r\n        this.addPlayers();\r\n        this.newGame();\r\n        \r\n    });\r\n\r\n}","function gameRules(game){\r\n\r\n    game.engine.add(this);\r\n\r\n    const snakeColision = () => {\r\n\r\n        game.for('players', (player, id) => {\r\n\r\n            if(player.killed) return;\r\n\r\n            let playerHead = player.head; // For performance. Accessing an object several times is heavy\r\n\r\n            // player.body.every((bodyFragment, index) => {\r\n            //     player.collided = index > 0 && bodyFragment.isEqual(playerHead);\r\n            //     console.log(index, bodyFragment.isEqual(playerHead));\r\n            //     if(player.collided) return; // Break the loop\r\n            // });\r\n\r\n            for (let index = player.body.length - 1; index >= 0; index--) {\r\n\r\n                if(index > 0 && player.body[index].isEqual(playerHead))\r\n                    return player.collided = true;\r\n\r\n            }\r\n\r\n            !player.collided && game.for('players', (otherPlayer, otherID) => {\r\n\r\n                if(id == otherID || otherPlayer.killed) return;\r\n\r\n                for (let index = otherPlayer.body.length - 1; index >= 0; index--) {\r\n\r\n                    if(otherPlayer.body[index].isEqual(playerHead))\r\n                        return player.collided = true;\r\n\r\n                }\r\n\r\n            });\r\n\r\n        });\r\n\r\n        game.for('players', player => player.killed = player.collided); // Kill the player if collided\r\n    \r\n    }\r\n\r\n    const snakeAteFood = () => {\r\n        game.for('foods', food => {\r\n            game.for('players', player => {\r\n                if(player.head.isEqual(food.position)){\r\n                    player.increase++;\r\n                    food.create();\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    this.update = () => {\r\n\r\n        if(game.status != 'playing') return;\r\n\r\n        snakeColision();\r\n        snakeAteFood();\r\n\r\n    }\r\n\r\n}","function gestureViewer(){\r\n\r\n    var $gestureViewer = document.querySelector('#gestureViewer'),\r\n        $canvas = document.createElement('canvas'),\r\n        ctx = $canvas.getContext('2d');\r\n\r\n    $gestureViewer.appendChild($canvas);\r\n\r\n    var ballPoints = {};\r\n    var counter = 0;\r\n\r\n    const drawLine = (x0, y0, x1, y1) => {\r\n        ctx.strokeStyle = \"#7da278\";\r\n        ctx.lineCap = \"round\";\r\n\t    ctx.lineWidth = 8;\r\n        ctx.beginPath();\r\n        ctx.moveTo(x0, y0);\r\n        ctx.lineTo(x1, y1);\r\n        ctx.stroke();\r\n    }\r\n\r\n    window.addEventListener('touchstart', e => {\r\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\r\n            const touch = e.changedTouches[i];\r\n            var ballPoint = {\r\n                x: touch.pageX,\r\n                y: touch.pageY\r\n            }\r\n            ballPoints[touch.identifier || ++counter] = ballPoint;\r\n            drawLine(ballPoint.x - 1, ballPoint.y, ballPoint.x, ballPoint.y);\r\n        }\r\n    });\r\n\r\n    window.addEventListener('touchmove', e => {\r\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\r\n            const touch = e.changedTouches[i];\r\n            var ballPoint = ballPoints[touch.identifier || counter],\r\n                x = touch.pageX, y = touch.pageY;\r\n\r\n            drawLine(ballPoint.x, ballPoint.y, x, y);\r\n            ballPoint.x = x;\r\n            ballPoint.y = y;\r\n        }\r\n    });\r\n\r\n    window.addEventListener('touchend', e => {\r\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\r\n            const touch = e.changedTouches[i];\r\n            delete ballPoints[touch.identifier || counter];\r\n        }\r\n        setTimeout(() => ctx.clearRect(0, 0, $canvas.width, $canvas.height), 200);\r\n    });\r\n\r\n    const canvasFullSize = () => {\r\n        $canvas.width = window.innerWidth;\r\n        $canvas.height = window.innerHeight;\r\n    }\r\n\r\n    canvasFullSize();\r\n    window.addEventListener('resize', canvasFullSize);\r\n}","function Interface(game){\r\n\r\n    var $interface = document.querySelector('#interface'),\r\n        $modal = $interface.querySelector('.modal'),\r\n        $loginForm = $interface.querySelector('#login form'),\r\n        $inputNickname = $loginForm.querySelector('[name=\"player_name\"]'),\r\n        $mainMenu = $interface.querySelector('#main-menu'),\r\n        \r\n        $singlePlayer = $mainMenu.querySelector('#single-player');\r\n\r\n    this.closeModal = () => {\r\n        $modal.classList.add('closed');\r\n    }\r\n\r\n    var $welcomeText = $mainMenu.querySelector('#welcome');\r\n    const openMainMenu = nickname => {\r\n        $welcomeText.innerHTML = `Hi, ${nickname}`;\r\n        $interface.className = 'main-menu';\r\n    }\r\n\r\n    $loginForm.addEventListener('submit', e => {\r\n        game.login($inputNickname.value, data => {\r\n            console.log(data);\r\n            openMainMenu($inputNickname.value);\r\n        });\r\n    });\r\n\r\n    $singlePlayer.addEventListener('click', e => {\r\n        game.socket.emit('single player');\r\n    });\r\n\r\n}","window.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\nwindow.isLumia = /Lumia/i.test(navigator.userAgent);\r\nwindow.isElectron = /Electron/i.test(navigator.userAgent);","function Snake(game, id){\r\n\r\n    this.id = id;\r\n    this.body = [];\r\n\r\n    this.increase = 0;\r\n    this.collided = false;\r\n    this.killed = false;\r\n\r\n    this.bodyStart = [0, 0];\r\n\r\n    //this.playerProps = gameProps.snakes.players[id];\r\n\r\n    var directionMap = {\r\n        'left': [-1, 0],\r\n        'right': [1, 0],\r\n        'up': [0, -1],\r\n        'down': [0, 1]\r\n    }\r\n\r\n    var direction = gameProps.snakes.initialDirection;\r\n    Object.defineProperty(this, 'direction', {\r\n        get: () => direction,\r\n        set: (to) => {\r\n\r\n            let directions = Object.keys(directionMap), // X, Y\r\n                oldDirection = direction,\r\n                reverse = gameProps.snakes.reverse;\r\n\r\n            if(directions.includes(to)) direction = to;\r\n\r\n            if(nextPos().isEqual(this.body[1])){\r\n\r\n                if(!reverse) direction = oldDirection;\r\n                else{\r\n                    direction = this.tailDirection;\r\n                    this.body.reverse();\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n    });\r\n\r\n    Object.defineProperties(this, {\r\n        head: { get: () => this.body[0] },\r\n        tail: { get: () => this.body[this.body.length - 1]},\r\n        tailDirection: {\r\n            get: () => {\r\n                let penultBodyFragment = this.body[this.body.length - 2],\r\n                    tail = this.tail;\r\n\r\n                if(tail[0] > penultBodyFragment[0]) return 'right';\r\n                if(tail[0] < penultBodyFragment[0]) return 'left';\r\n\r\n                if(tail[1] > penultBodyFragment[1]) return 'down';\r\n                if(tail[1] < penultBodyFragment[1]) return 'up';\r\n\r\n            }\r\n        }\r\n    });\r\n\r\n    game.engine.add(this);\r\n    const snakeControls = new SnakeControls(this, game);\r\n\r\n    var progressMove = 0;\r\n    const movement = (deltaTime) => {\r\n\r\n        let speed = gameProps.snakes.speed;\r\n        let progress = deltaTime * speed;\r\n    \r\n        if(~~progress <= ~~progressMove) return;\r\n\r\n        snakeControls.currentMovement();\r\n\r\n        progressMove = progress != speed ? progress : 0;\r\n        \r\n        this.body.splice(0, 0, nextPos());\r\n        this.increase < 1 ? this.body.pop() : this.increase--;\r\n        \r\n    }\r\n\r\n    const nextPos = () => {\r\n\r\n        let direction = directionMap[this.direction],\r\n            axis = Math.abs(direction[1]),\r\n            nextPos = [...this.body[0]];\r\n\r\n        nextPos[axis] += direction[axis];\r\n\r\n        if(nextPos[axis] >= gameProps.tiles[axis]) nextPos[axis] = 0;\r\n        else if(nextPos[axis] < 0) nextPos[axis] = gameProps.tiles[axis] - 1;\r\n\r\n        return nextPos;\r\n\r\n    }\r\n\r\n    this.update = (deltaTime) => {\r\n        if(this.body.length && !this.killed){\r\n            movement(deltaTime);\r\n        }\r\n    }\r\n\r\n    this.draw = () => {\r\n\r\n        if(this.killed) return;\r\n\r\n        game.ctx.fillStyle = gameProps.colors[this.id];\r\n\r\n        this.body.forEach(bodyFragment => {\r\n            game.ctx.fillRect(\r\n                bodyFragment[0] * game.tileSize,\r\n                bodyFragment[1] * game.tileSize,\r\n                game.tileSize,\r\n                game.tileSize\r\n            );\r\n        });\r\n\r\n    }\r\n\r\n}\r\n\r\nSnake.prototype.newBody = function(){\r\n\r\n    var bodyStart = this.bodyStart,\r\n        from = [bodyStart[0], bodyStart[1]],\r\n        to = bodyStart[2];\r\n\r\n    this.body = [from];\r\n\r\n    var initialSize = gameProps.snakes.initialSize;\r\n    for (let i = 1; i < initialSize; i++) {\r\n\r\n        this.body.push([]);\r\n\r\n        let newPos = [...from];\r\n\r\n        switch(to){\r\n\r\n            case 'right':\r\n            case 'left':\r\n                newPos[0] = to == 'right' ? from[0]+i : from[0]-i;\r\n                break;\r\n\r\n            case 'up':\r\n            case 'down':\r\n                newPos[1] = to == 'down' ? from[1]+i : from[1]-i;\r\n                break;\r\n\r\n        }\r\n\r\n        for (let axis = 0; axis <= 1; axis++) {\r\n\r\n            if(newPos[axis] < 0) newPos[axis] = gameProps.tiles[axis] - Math.abs(newPos[axis]);\r\n            if(newPos[axis] >= gameProps.tiles[axis]) newPos[axis] = newPos[axis] - gameProps.tiles[axis];\r\n            \r\n            this.body[i].push(newPos[axis]);\r\n            \r\n        }\r\n\r\n    }\r\n\r\n}","function SnakeControls(snake, game){\r\n\r\n    var rowMovements = [];\r\n\r\n    var $touchAreas = document.querySelector('#touch-areas');\r\n    var $touchArea = {left: $touchAreas.querySelector('#left'), right: $touchAreas.querySelector('#right')};\r\n\r\n    // Keyboard\r\n    var keyMap = (map => map ? {\r\n\r\n        directions: Object.keys(map),\r\n        keys: Object.keys(map).map(k => map[k]),\r\n\r\n        direction: function(key){\r\n            return this.directions[ this.keys.indexOf(key) ];\r\n        }\r\n\r\n    } : undefined)(gameProps.snakes.keyMaps[snake.id]);\r\n\r\n    keyMap && window.addEventListener('keydown', e => rowMovements.push(keyMap.direction(e.key)));\r\n    \r\n    // Touch devices \r\n    let touchArea = 'all';\r\n    let touchstart = {}, touchmove = {}, sensibilityTouch = gameProps.snakes.sensibilityTouch;\r\n    const directions = [[\"left\", \"right\"], [\"up\", \"down\"]];\r\n    const orientationMap = {0: \"portrait-primary\", 180: \"portrait-secondary\", 90: \"landscape-primary\", \"-90\": \"landscape-secondary\"};\r\n\r\n    const getOrientation = () => screen.msOrientation || (screen.orientation || screen.mozOrientation || {}).type || orientationMap[window.orientation];\r\n    let orientation = getOrientation();\r\n    window.addEventListener('orientationchange', () => orientation = getOrientation());\r\n\r\n    const touchHandle = touchedArea => {\r\n\r\n        let dragged = [[], []].map((_, axis) => touchstart[touchedArea][axis] - touchmove[touchedArea][axis]);\r\n\r\n        if(isLumia){\r\n            if(orientation === \"landscape-primary\") dragged[0] = -dragged[0];\r\n            else if(orientation === \"landscape-secondary\") dragged[1] = -dragged[1];\r\n            if(orientation.indexOf('landscape') > -1) dragged.reverse();\r\n\r\n            if(orientation === \"portrait-secondary\"){\r\n                dragged[0] = -dragged[0];\r\n                dragged[1] = -dragged[1];\r\n            }\r\n        }\r\n\r\n        if(touchedArea != touchArea && touchArea != 'all') return;\r\n\r\n        let touchAxis = +(Math.abs(dragged[0]) < Math.abs(dragged[1])),\r\n            moveIndex = +(dragged[touchAxis] < 0),\r\n            direction = directions[touchAxis][moveIndex];\r\n\r\n        if(Math.abs(dragged[touchAxis]) >= sensibilityTouch){\r\n            if(direction != rowMovements.lastItem() && direction != snake.direction) rowMovements.push(direction);\r\n            touchstart[touchedArea] = [...touchmove[touchedArea]];\r\n        }\r\n\r\n    }\r\n\r\n    const touchPos = e => [e.changedTouches[0].pageX, e.changedTouches[0].pageY];\r\n\r\n    if(touchArea){\r\n        for (const area in $touchArea) {\r\n            $touchArea[area].addEventListener('touchstart', e => touchstart[area] = touchPos(e));\r\n            $touchArea[area].addEventListener('touchmove', e => { touchmove[area] = touchPos(e); touchHandle(area); });\r\n        }\r\n    }\r\n\r\n    document.ontouchmove = function(e){ e.preventDefault(); } // Disable page scroll\r\n\r\n    // Set current movement\r\n    this.currentMovement = () => {\r\n\r\n        rowMovements = rowMovements.filter(Boolean);\r\n\r\n        if(!rowMovements.length) return;\r\n        snake.direction = rowMovements[0];\r\n        rowMovements && rowMovements.splice(0, 1);\r\n\r\n    }\r\n\r\n}"]}