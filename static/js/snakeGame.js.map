{"version":3,"sources":["game/Engine.js","game/Food.js","game/Game.js","game/gameProps.js","game/gestureViewer.js","game/helpers.js","game/interface.js","game/Snake.js","game/snakeControls.js"],"names":["_this","game","canvas","ctx","draw","i","clearRect","width","height","fn","objects","arguments","_key","runFunction","length","args","_objects$i","this","run","engine","start","performance","now","deltaTime","timestamp","min","requestAnimationFrame","add","_object","Food","id","type","push","update","object","key","beginPath","arc","position","tileSize","Math","PI","closePath","fill","Object","val","socket","gameProps","tiles","status","className","newStatus","get","defineProperty","colorsInUse","playersInTheRoom","player","color","players","foods","value","getContext","writable","io","multiplayerLocalAllow","console","log","t","set","Game","prototype","newGame","addPlayers","Snake","food","qnt","addFoods","$snakes","document","querySelectorAll","resizeCanvas","on","winSize","_this2","style","window","data","assign","multiplayerLocal","_this3","playerInTheRoom","callback","_this4","arr","chooseSnake_snakeSize","interface","listPlayersInTheRoom","addEventListener","filter","Boolean","$gestureViewer","querySelector","$canvas","createElement","playerNickname","ballPoints","drawLine","x0","y0","x1","y1","moveTo","stroke","e","socketEvents","ballPoint","x","touch","pageX","off","identifier","counter","y","dialogBox","pageY","changedTouches","setTimeout","preventDefault","canvasFullSize","emit","innerHeight","Interface","$interface","$modal","$loginForm","$inputNickname","$submitChooser","$mainMenu","$singlePlayer","$multiplayer","$multiplayerMenu","$multiplayerSubmit","$player2Name","$playersQtn","$multiplayerLocal","$multiplayerLocalMenu","$connectedPlayers","snakeChooser","InputNumber","closeModal","what","gestureViewer","appendChild","j","snakes","colors","nickname","lineWidth","innerHTML","lineTo","changeSnakeColor","open","currentColor","alert","nPlayers","getAttribute","props","idLocal","ontouchmove","bodyStart","isMobile","isLumia","navigator","userAgent","isElectron","killed","bodyFragment","pushMovement","$touchAreas","$touchArea","$_connectedPlayers","playersInTheRoomLength","lis","keys","map","keyMap","direction","sensibilityTouch","$welcomeText","90","-90","screen","orientation","mozOrientation","orientationMap","getOrientation","snake","touchArea","$touchAreaKeys","area","touchmove","touchPos","touchedArea","includes","dragged","indexOf","reverse","touchHandle","_loop","Array","isArray","arr2","title","$buttonOk","$alert","insertBefore","parentNode","directions","$inputNumber","k","$input","$decrementButton","$incrementButton","Infinity","undefined","setAttribute","touchstart","SnakeChooser","_","$chooserNext","$snakeChooser","$snake","$chooserPrev","classList","remove","background","touchAxis","abs","moveIndex","target","test","JSON","stringify","sumWith","isNaN","b","a","newArray","arrays","item","lastItem","catch"],"mappings":"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","file":"snakeGame.js","sourcesContent":["function Engine(game){\r\n\r\n    var canvas = game.ctx.canvas;\r\n\r\n    var objects = [];\r\n\r\n    const runFunction = (fn, ...args) => {\r\n\r\n        var i = objects.length;\r\n\r\n        while(i--){\r\n            if(typeof objects[i][fn] == 'function') objects[i][fn](...args);\r\n        }\r\n\r\n    }\r\n\r\n    const draw = () => {\r\n        game.ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        runFunction('draw');\r\n    }\r\n\r\n\r\n    this.run = () => {\r\n\r\n        let engine = this,\r\n            start = performance.now();\r\n\r\n        requestAnimationFrame(function run(timestamp){\r\n\r\n            let deltaTime = (timestamp - start) / 1000;\r\n            deltaTime = Math.min(1, deltaTime);\r\n\r\n            draw();\r\n\r\n            if(deltaTime >= 1) return engine.run();\r\n            requestAnimationFrame(run);\r\n\r\n        }.bind(this));\r\n\r\n    }\r\n\r\n    this.add = (object) => {\r\n        objects.push(object);\r\n        \r\n        object.update = _object => {\r\n            for (const key in _object) object[key] = _object[key];\r\n        }\r\n    }\r\n\r\n}","function Food(game, id){\r\n\r\n    this.id = id;\r\n    this.type;\r\n\r\n    this.position = [];\r\n\r\n    game.engine.add(this);\r\n\r\n    game.socket.on(`foodUpdate-${id}`, this.update);\r\n\r\n    this.draw = () => {\r\n\r\n        if(game.status != 'playing' || !this.type) return;\r\n\r\n        game.ctx.fillStyle = this.type.color;\r\n\r\n        game.ctx.beginPath();\r\n\r\n        game.ctx.arc(\r\n            this.position[0] * game.tileSize + game.tileSize / 2,\r\n            this.position[1] * game.tileSize + game.tileSize / 2,\r\n            game.tileSize / 2,\r\n            0,\r\n            Math.PI * 2\r\n        );\r\n        \r\n        game.ctx.closePath();\r\n\r\n        game.ctx.fill();\r\n\r\n    }\r\n\r\n}","function Game(canvas){\r\n\r\n    // Properties\r\n    var tileSize;\r\n    Object.defineProperty(this, 'tileSize', {\r\n        set: function(val){\r\n            if(+val) tileSize = Math.floor(+val);\r\n            else return console.error('Invalid value');\r\n            canvas.width = this.tileSize * gameProps.tiles[0];\r\n            canvas.height = this.tileSize * gameProps.tiles[1];\r\n        },\r\n        get: function(){ return tileSize; }\r\n    });\r\n\r\n    Object.defineProperty(this, 'ctx', {\r\n        value: canvas.getContext('2d'),\r\n        writable: false\r\n    });\r\n\r\n    var status, $game = canvas.parentNode;\r\n    Object.defineProperty(this, 'status', {\r\n        set: newStatus =>\r\n            $game.className = status = newStatus,\r\n        get: () => status\r\n    });\r\n\r\n    Object.defineProperty(this, 'colorsInUse', {\r\n        get: () => {\r\n            var colorsInUse = [];\r\n            for (let i = this.playersInTheRoom.length - 1; i >= 0; i--) {\r\n                const player = this.playersInTheRoom[i];\r\n                colorsInUse.push(player.color);\r\n            }\r\n            return colorsInUse;\r\n        }\r\n    });\r\n\r\n    this.playersInTheRoom = [];\r\n\r\n    this.id = null;\r\n    this.players = [];\r\n    this.foods = [];\r\n\r\n    this.status = 'toStart';\r\n    this.engine = new Engine(this);\r\n    this.interface = new Interface(this);\r\n    this.socket = io();\r\n\r\n    this.multiplayerLocalAllow = false;\r\n\r\n    this.socket.on('teste', t => console.log(t))\r\n\r\n    gestureViewer(this);\r\n\r\n    this.engine.run();\r\n\r\n}\r\n\r\nGame.prototype.newGame = function(){\r\n\r\n    this.status = \"playing\";\r\n\r\n}\r\n\r\nGame.prototype.addPlayers = function(){\r\n\r\n    let playersInTheRoom = this.playersInTheRoom.length;\r\n    for (let i = 0; i < playersInTheRoom; i++) {\r\n\r\n        const playerInTheRoom = this.playersInTheRoom[i];\r\n        let player = new Snake(this, playerInTheRoom);\r\n        this.players.push(player);\r\n\r\n    }\r\n\r\n}\r\n\r\nGame.prototype.addFoods = function(){\r\n    let food = new Food(this, this.foods.length);\r\n\r\n    this.foods.push(food);\r\n\r\n    if(this.foods.length < gameProps.foods.qnt)\r\n        this.addFoods();\r\n}\r\n\r\nGame.prototype.resizeCanvas = function(){\r\n\r\n\r\n    var $snakes = document.querySelectorAll('.snake-chooser .snake');\r\n    const chooseSnake_snakeSize = () => {\r\n        for (let i = $snakes.length - 1; i >= 0; i--) {\r\n            $snakes[i].style.width = `${this.tileSize}px`;\r\n            $snakes[i].style.height = `${this.tileSize}px`;\r\n        }\r\n    }\r\n\r\n    const resizeCanvas = () => {\r\n       \r\n        let winSize = [window.innerWidth, window.innerHeight]; // X, Y\r\n        let tileSize = [0, 0].map((val, i) => winSize[i] / gameProps.tiles[i]);\r\n        this.tileSize = tileSize[tileSize[0] > tileSize[1] ? 1 : 0];\r\n\r\n        chooseSnake_snakeSize();\r\n        \r\n    }\r\n\r\n    resizeCanvas();\r\n    window.addEventListener('resize', resizeCanvas);\r\n\r\n}\r\n\r\nGame.prototype.login = function(playerNickname, callback){\r\n\r\n    this.socket.emit('login', {\r\n        playerNickname: playerNickname\r\n    });\r\n\r\n    this.socket.on('logged', data =>{\r\n\r\n        gameProps = Object.assign(gameProps, data.gameProps);\r\n\r\n        data.player.idLocal = 0;\r\n        this.multiplayerLocalAllow = data.multiplayerLocal;\r\n\r\n        this.id = data.myID;\r\n        this.playersInTheRoom.push(data.player);\r\n        this.playersInTheRoom = Object.assign(this.playersInTheRoom, data.playersInTheRoom);\r\n        \r\n        this.resizeCanvas();\r\n        this.socketEvents();\r\n\r\n        if(typeof callback == 'function') callback(data);\r\n\r\n    });\r\n\r\n    this.socket.on('multiplayer disabled', () => {\r\n        this.socket.off('login');\r\n        this.socket.off('logged');\r\n        this.socket.off('multiplayer disabled');\r\n\r\n        this.interface.dialogBox.alert('Danied', 'Local multiplayer disabled.');\r\n    });\r\n\r\n}\r\n\r\nGame.prototype.socketEvents = function(){\r\n\r\n    this.socket.on('start', () => {\r\n        \r\n        this.interface.closeModal();\r\n\r\n        this.addPlayers();\r\n        this.addFoods();\r\n        this.newGame();\r\n\r\n    });\r\n\r\n    this.socket.on('newPlayer', player =>{\r\n        this.playersInTheRoom.push(player);\r\n        this.interface.listPlayersInTheRoom();\r\n    });\r\n\r\n    this.socket.on('prepare multiplayer', arr => {\r\n\r\n        for (let i = arr.length - 1; i >= 0; i--) {\r\n            const player = arr[i];\r\n            this.playersInTheRoom.push(player);\r\n        }\r\n\r\n        this.socket.emit('start');\r\n\r\n    });\r\n\r\n    this.socket.on('playersInTheRoom update', data => {\r\n        var i = data.i;\r\n        delete data.i;\r\n        this.playersInTheRoom[i] = Object.assign(this.playersInTheRoom[i], data);  \r\n        game.interface.listPlayersInTheRoom();      \r\n    });\r\n\r\n    this.socket.on('delPlayer', i => {\r\n        delete this.playersInTheRoom[i];\r\n        this.playersInTheRoom = this.playersInTheRoom.filter(Boolean);\r\n    });\r\n\r\n}","var gameProps = {}","function gestureViewer(game){\r\n\r\n    var $gestureViewer = document.querySelector('#gestureViewer'),\r\n        $canvas = document.createElement('canvas'),\r\n        ctx = $canvas.getContext('2d');\r\n\r\n    $gestureViewer.appendChild($canvas);\r\n\r\n    var ballPoints = {};\r\n    var counter = 0;\r\n\r\n    const drawLine = (x0, y0, x1, y1) => {\r\n        ctx.strokeStyle = \"#7da278\";\r\n        ctx.lineCap = \"round\";\r\n\t    ctx.lineWidth = 8;\r\n        ctx.beginPath();\r\n        ctx.moveTo(x0, y0);\r\n        ctx.lineTo(x1, y1);\r\n        ctx.stroke();\r\n    }\r\n\r\n    window.addEventListener('touchstart', e => {\r\n        if(game.status != 'playing') return;\r\n\r\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\r\n            const touch = e.changedTouches[i];\r\n            var ballPoint = {\r\n                x: touch.pageX,\r\n                y: touch.pageY\r\n            }\r\n            ballPoints[touch.identifier || ++counter] = ballPoint;\r\n            drawLine(ballPoint.x - 1, ballPoint.y, ballPoint.x, ballPoint.y);\r\n        }\r\n    });\r\n\r\n    window.addEventListener('touchmove', e => {\r\n        if(game.status != 'playing') return;\r\n\r\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\r\n            const touch = e.changedTouches[i];\r\n            var ballPoint = ballPoints[touch.identifier || counter],\r\n                x = touch.pageX, y = touch.pageY;\r\n\r\n            drawLine(ballPoint.x, ballPoint.y, x, y);\r\n            ballPoint.x = x;\r\n            ballPoint.y = y;\r\n        }\r\n    });\r\n\r\n    window.addEventListener('touchend', e => {\r\n        if(game.status != 'playing') return;\r\n        \r\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\r\n            const touch = e.changedTouches[i];\r\n            delete ballPoints[touch.identifier || counter];\r\n        }\r\n        setTimeout(() => ctx.clearRect(0, 0, $canvas.width, $canvas.height), 200);\r\n    });\r\n\r\n    document.ontouchmove = function(e){ e.preventDefault(); } // Disable page scroll\r\n\r\n    const canvasFullSize = () => {\r\n        $canvas.width = window.innerWidth;\r\n        $canvas.height = window.innerHeight;\r\n    }\r\n\r\n    canvasFullSize();\r\n    window.addEventListener('resize', canvasFullSize);\r\n}","window.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\nwindow.isLumia = /Lumia/i.test(navigator.userAgent);\r\nwindow.isElectron = /Electron/i.test(navigator.userAgent);","function Interface(game){\r\n\r\n    var $interface = document.querySelector('#interface'),\r\n        $modal = $interface.querySelector('.modal'),\r\n        $loginForm = $interface.querySelector('#login form'),\r\n        $inputNickname = $loginForm.querySelector('[name=\"player_name\"]'),\r\n        \r\n        $submitChooser = document.querySelector('#after-login .submit'),\r\n\r\n        $mainMenu = $interface.querySelector('#main-menu'),\r\n        $singlePlayer = $mainMenu.querySelector('#single-player'),\r\n        $multiplayer = $mainMenu.querySelector('#multiplayer'),\r\n\r\n        $multiplayerMenu = $interface.querySelector('#multiplayer-menu'),\r\n        $multiplayerSubmit = $multiplayerMenu.querySelector('.submit'),\r\n        $player2Name = $multiplayerMenu.querySelector('[name=\"player_name\"]'),\r\n        $playersQtn = $multiplayerMenu.querySelector('.input-number'),\r\n        \r\n        $multiplayerLocal = $interface.querySelector('#multiplayer-local'),\r\n        $multiplayerLocalMenu = $interface.querySelector('#multiplayer-local-menu'),\r\n        $connectedPlayers = $interface.querySelectorAll('.connected-players ul');\r\n\r\n    this.dialogBox = new DialogBox($interface);\r\n    const snakeChooser = new SnakeChooser($interface);\r\n    new InputNumber();\r\n    \r\n    this.closeModal = () => $modal.classList.add('closed');\r\n    this.open = what => $interface.className = what;\r\n\r\n    this.listPlayersInTheRoom = () => {\r\n        for (let i = $connectedPlayers.length - 1; i >= 0; i--) {\r\n            const $_connectedPlayers = $connectedPlayers[i];\r\n\r\n            let playersInTheRoomLength = game.playersInTheRoom.length;\r\n            let lis = '';\r\n\r\n            for (let j = 0; j < playersInTheRoomLength; j++) {\r\n                const playerInTheRoom = game.playersInTheRoom[j];\r\n                console.log(gameProps.snakes.colors[playerInTheRoom.color]);\r\n                lis += `<li>\r\n                            <span\r\n                                style=\"color: ${gameProps.snakes.colors[playerInTheRoom.color]};\">\r\n                                ${playerInTheRoom.nickname}\r\n                            </span>\r\n                            <div class=\"snake\"\r\n                                style=\"background: ${gameProps.snakes.colors[playerInTheRoom.color]};\r\n                                width: ${game.tileSize}px; height: ${game.tileSize}px;\">\r\n                            </div>\r\n                        </li>`;\r\n            }\r\n\r\n            $_connectedPlayers.innerHTML = lis;\r\n\r\n        }\r\n    }\r\n\r\n    var $welcomeText = $mainMenu.querySelector('#welcome');\r\n    $loginForm.addEventListener('submit', e => {\r\n        game.login($inputNickname.value, data => {\r\n\r\n            $welcomeText.innerHTML = `Hi, ${$inputNickname.value}`;\r\n            snakeChooser.changeSnakeColor();\r\n            this.open('after-login');\r\n\r\n        });\r\n    });\r\n\r\n    $singlePlayer.addEventListener('click', e => {\r\n        game.socket.emit('start');\r\n    });\r\n\r\n    $submitChooser.addEventListener('click', () => {\r\n\r\n        var colorsInUse = game.colorsInUse;\r\n        if(colorsInUse.includes(snakeChooser.currentColor))\r\n            return this.dialogBox.alert('Denied', 'This color is being used.');\r\n\r\n        game.socket.emit('changeColor', snakeChooser.currentColor);\r\n\r\n        if(game.multiplayerLocalAllow){\r\n            this.listPlayersInTheRoom();\r\n            $multiplayerLocalMenu.className = 'multiplayer-local-viewer';\r\n            this.open('multiplayer-local-menu');\r\n        }else\r\n            this.open('main-menu');\r\n\r\n    });\r\n\r\n    $multiplayer.addEventListener('click', () => {\r\n\r\n        snakeChooser.currentColor = 0;\r\n        snakeChooser.changeSnakeColor();\r\n        this.open('multiplayer-menu');\r\n\r\n    });\r\n\r\n    $multiplayerSubmit.addEventListener('click', () => {\r\n\r\n        var colorsInUse = game.colorsInUse;\r\n        if(colorsInUse.includes(snakeChooser.currentColor))\r\n            return this.dialogBox.alert('Denied', 'This color is being used.');\r\n\r\n        game.socket.emit('prepare multiplayer', {\r\n            nickname: $player2Name.value,\r\n            color: snakeChooser.currentColor,\r\n            nPlayers: $playersQtn.getAttribute('data-value')\r\n        });\r\n\r\n    });\r\n\r\n    $multiplayerLocal.addEventListener('click', () => {\r\n\r\n        this.open('multiplayer-local-menu');\r\n\r\n        game.multiplayerLocalAllow = true;\r\n        game.socket.emit('multiplayer-local-allow');\r\n\r\n    });\r\n\r\n}","function Snake(game, props){\r\n\r\n    this.id = null;\r\n    this.idLocal = null;\r\n    this.nickname = null;\r\n    this.body = [];\r\n    this.color = 0;\r\n    this.bodyStart = [0, 0];\r\n    this.killed = false;\r\n\r\n    this.merge(props);\r\n\r\n    if(this.idLocal == 0) this.touchArea = 'all';\r\n\r\n    if(this.idLocal == 1){\r\n        game.players[0].touchArea = 'right';\r\n        this.touchArea = 'left';\r\n    }\r\n\r\n    console.log(this);\r\n    game.engine.add(this);\r\n\r\n    if(!isNaN(this.idLocal)) new SnakeControls(this, game);\r\n\r\n    game.socket.on(`snakeUpdate-${this.id}`, (data) => this.update(data));\r\n\r\n    this.draw = () => {\r\n\r\n        if(this.killed) return;\r\n\r\n        game.ctx.fillStyle = gameProps.snakes.colors[this.color];\r\n\r\n        this.body.forEach(bodyFragment => {\r\n            game.ctx.fillRect(\r\n                bodyFragment[0] * game.tileSize,\r\n                bodyFragment[1] * game.tileSize,\r\n                game.tileSize,\r\n                game.tileSize\r\n            );\r\n        });\r\n\r\n    }\r\n\r\n}","function SnakeControls(snake, game){\r\n\r\n    const pushMovement = moveTo => {\r\n        if(!moveTo) return;\r\n        game.socket.emit('moveTo', {\r\n            id: snake.id,\r\n            moveTo: moveTo\r\n        });\r\n    }\r\n\r\n    var $touchAreas = document.querySelector('#touch-areas');\r\n    var $touchArea = {left: $touchAreas.querySelector('#left'), right: $touchAreas.querySelector('#right')};\r\n\r\n    // Keyboard\r\n    var keyMap = (map => map ? {\r\n\r\n        directions: Object.keys(map),\r\n        keys: Object.keys(map).map(k => map[k]),\r\n\r\n        direction: function(key){\r\n            return this.directions[ this.keys.indexOf(key) ];\r\n        }\r\n\r\n    } : undefined)(gameProps.snakes.keyMaps[snake.idLocal]);\r\n\r\n    keyMap && window.addEventListener('keydown', e => pushMovement(keyMap.direction(e.key)));\r\n\r\n    // Touch devices \r\n    let touchstart = {}, touchmove = {}, sensibilityTouch = gameProps.snakes.sensibilityTouch;\r\n    const directions = [[\"left\", \"right\"], [\"up\", \"down\"]];\r\n    const orientationMap = {0: \"portrait-primary\", 180: \"portrait-secondary\", 90: \"landscape-primary\", \"-90\": \"landscape-secondary\"};\r\n\r\n    const getOrientation = () => screen.msOrientation || (screen.orientation || screen.mozOrientation || {}).type || orientationMap[window.orientation];\r\n    let orientation = getOrientation();\r\n    window.addEventListener('orientationchange', () => orientation = getOrientation());\r\n    \r\n    const touchHandle = touchedArea => {\r\n\r\n        let dragged = [[], []].map((_, axis) => touchstart[touchedArea][axis] - touchmove[touchedArea][axis]);\r\n\r\n        if(isLumia){\r\n            if(orientation === \"landscape-primary\") dragged[0] = -dragged[0];\r\n            else if(orientation === \"landscape-secondary\") dragged[1] = -dragged[1];\r\n            if(orientation.indexOf('landscape') > -1) dragged.reverse();\r\n\r\n            if(orientation === \"portrait-secondary\"){\r\n                dragged[0] = -dragged[0];\r\n                dragged[1] = -dragged[1];\r\n            }\r\n        }\r\n\r\n        if(touchedArea != snake.touchArea && snake.touchArea != 'all') return;\r\n\r\n        let touchAxis = +(Math.abs(dragged[0]) < Math.abs(dragged[1])),\r\n            moveIndex = +(dragged[touchAxis] < 0),\r\n            direction = directions[touchAxis][moveIndex];\r\n\r\n        if(Math.abs(dragged[touchAxis]) >= sensibilityTouch){\r\n            if(direction != snake.direction) pushMovement(direction);\r\n            touchstart[touchedArea] = [...touchmove[touchedArea]];\r\n        }\r\n\r\n    }\r\n\r\n    const touchPos = e => [e.changedTouches[0].pageX, e.changedTouches[0].pageY];\r\n\r\n    if(snake.touchArea){\r\n        const $touchAreaKeys = Object.keys($touchArea);\r\n        for (let i = $touchAreaKeys.length - 1; i >=0 ; i--) {\r\n            const area = $touchAreaKeys[i];\r\n            console.log($touchArea[area]);\r\n            $touchArea[area].addEventListener('touchstart', e => touchstart[area] = touchPos(e));\r\n            $touchArea[area].addEventListener('touchmove', e => { touchmove[area] = touchPos(e); touchHandle(area); });\r\n        }\r\n    }\r\n\r\n}"]}