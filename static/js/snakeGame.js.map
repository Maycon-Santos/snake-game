{"version":3,"sources":["game/Engine.js","game/Food.js","game/Game.js","game/gameProps.js","game/gestureViewer.js","game/interface.js","game/helpers.js","game/Snake.js","game/snakeControls.js"],"names":["_this","game","canvas","ctx","draw","i","clearRect","width","height","fn","objects","arguments","_key","runFunction","length","args","_objects$i","this","run","engine","start","performance","now","deltaTime","timestamp","min","requestAnimationFrame","add","_object","Food","id","type","push","update","object","key","beginPath","arc","position","tileSize","Math","PI","closePath","fill","Object","val","socket","gameProps","tiles","status","className","newStatus","get","defineProperty","colorsInUse","playersInTheRoom","player","color","players","foods","value","getContext","writable","io","on","t","gestureViewer","set","Game","prototype","newGame","addPlayers","Snake","addFoods","food","qnt","_this2","resizeCanvas","window","innerWidth","innerHeight","map","console","log","$snakes","style","login","playerNickname","callback","assign","data","idLocal","_this3","playerInTheRoom","_this4","arr","chooseSnake_snakeSize","winSize","Boolean","ballPoints","addEventListener","lineCap","moveTo","x0","y0","e","changedTouches","drawLine","x","ballPoint","y","touch","counter","pageX","pageY","interface","closeModal","identifier","setTimeout","$canvas","canvasFullSize","Interface","classList","open","$interface","what","snakeChooser","SnakeChooser","dialogBox","InputNumber","$welcomeText","$mainMenu","querySelector","$loginForm","changeSnakeColor","$gestureViewer","document","$submitChooser","appendChild","$multiplayer","currentColor","includes","alert","lineTo","x1","stroke","$player2Name","bodyStart","isNaN","SnakeControls","snakes","colors","bodyFragment","fillRect","_toConsumableArray","Array","isArray","arr2","from","snake","isMobile","isLumia","isElectron","$touchAreas","navigator","keyMap","$multiplayerMenu","$modal","k","keys","indexOf","$multiplayerSubmit","touchstart","sensibilityTouch","directions","180","90","DialogBox","msOrientation","screen","orientation","mozOrientation","orientationMap","$inputNickname","$touchArea","nickname","nPlayers","$playersQtn","area","touchPos","touchedArea","axis","touchmove","dragged","lastItem","direction","concat","_loop","ontouchmove","merge","killed","$alert","innerHTML","title","text","$buttonOk","parentNode","remove","$inputsNumber","pushMovement","$input","$inputNumber","$decrementButton","$incrementButton","touchArea","getAttribute","Infinity","setAttribute","getOrientation","$snakeChoosers","querySelectorAll","$snakeChooser","$chooserPrev","$chooserNext","$snake","touchAxis","abs","rowMovements","background","target","$touchAreaKeys","test","userAgent","isEqual","fillStyle","_len","b","a","array","j","itemLeng","item","serviceWorker","register","then","catch"],"mappings":"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","file":"snakeGame.js","sourcesContent":["function Engine(game){\r\n\r\n    var canvas = game.ctx.canvas;\r\n\r\n    var objects = [];\r\n\r\n    const runFunction = (fn, ...args) => {\r\n\r\n        var i = objects.length;\r\n\r\n        while(i--){\r\n            if(typeof objects[i][fn] == 'function') objects[i][fn](...args);\r\n        }\r\n\r\n    }\r\n\r\n    const draw = () => {\r\n        game.ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        runFunction('draw');\r\n    }\r\n\r\n\r\n    this.run = () => {\r\n\r\n        let engine = this,\r\n            start = performance.now();\r\n\r\n        requestAnimationFrame(function run(timestamp){\r\n\r\n            let deltaTime = (timestamp - start) / 1000;\r\n            deltaTime = Math.min(1, deltaTime);\r\n\r\n            draw();\r\n\r\n            if(deltaTime >= 1) return engine.run();\r\n            requestAnimationFrame(run);\r\n\r\n        }.bind(this));\r\n\r\n    }\r\n\r\n    this.add = (object) => {\r\n        objects.push(object);\r\n        \r\n        object.update = _object => {\r\n            for (const key in _object) object[key] = _object[key];\r\n        }\r\n    }\r\n\r\n}","function Food(game, id){\r\n\r\n    this.id = id;\r\n    this.type;\r\n\r\n    this.position = [];\r\n\r\n    game.engine.add(this);\r\n\r\n    game.socket.on(`foodUpdate-${id}`, this.update);\r\n\r\n    this.draw = () => {\r\n\r\n        if(game.status != 'playing' || !this.type) return;\r\n\r\n        game.ctx.fillStyle = this.type.color;\r\n\r\n        game.ctx.beginPath();\r\n\r\n        game.ctx.arc(\r\n            this.position[0] * game.tileSize + game.tileSize / 2,\r\n            this.position[1] * game.tileSize + game.tileSize / 2,\r\n            game.tileSize / 2,\r\n            0,\r\n            Math.PI * 2\r\n        );\r\n        \r\n        game.ctx.closePath();\r\n\r\n        game.ctx.fill();\r\n\r\n    }\r\n\r\n}","function Game(canvas){\r\n\r\n    // Properties\r\n    var tileSize;\r\n    Object.defineProperty(this, 'tileSize', {\r\n        set: function(val){\r\n            if(+val) tileSize = Math.floor(+val);\r\n            else return console.error('Invalid value');\r\n            canvas.width = this.tileSize * gameProps.tiles[0];\r\n            canvas.height = this.tileSize * gameProps.tiles[1];\r\n        },\r\n        get: function(){ return tileSize; }\r\n    });\r\n\r\n    Object.defineProperty(this, 'ctx', {\r\n        value: canvas.getContext('2d'),\r\n        writable: false\r\n    });\r\n\r\n    var status, $game = canvas.parentNode;\r\n    Object.defineProperty(this, 'status', {\r\n        set: newStatus =>\r\n            $game.className = status = newStatus,\r\n        get: () => status\r\n    });\r\n\r\n    Object.defineProperty(this, 'colorsInUse', {\r\n        get: () => {\r\n            var colorsInUse = [];\r\n            for (let i = this.playersInTheRoom.length - 1; i >= 0; i--) {\r\n                const player = this.playersInTheRoom[i];\r\n                colorsInUse.push(player.color);\r\n            }\r\n            return colorsInUse;\r\n        }\r\n    });\r\n\r\n    this.playersInTheRoom = [];\r\n\r\n    this.id = null;\r\n    this.players = [];\r\n    this.foods = [];\r\n\r\n    this.status = 'toStart';\r\n    this.engine = new Engine(this);\r\n    this.interface = new Interface(this);\r\n    this.socket = io();\r\n\r\n    this.socket.on('teste', t => console.log(t))\r\n\r\n    gestureViewer();\r\n\r\n    this.engine.run();\r\n\r\n    this.socketEvents();\r\n}\r\n\r\nGame.prototype.newGame = function(){\r\n\r\n    this.status = \"playing\";\r\n\r\n}\r\n\r\nGame.prototype.addPlayers = function(){\r\n\r\n    for (let i = this.playersInTheRoom.length - 1; i >= 0 ; i--) {\r\n        const playerInTheRoom = this.playersInTheRoom[i];\r\n\r\n        let player = new Snake(this, playerInTheRoom);\r\n\r\n        this.players.push(player);\r\n\r\n    }\r\n\r\n}\r\n\r\nGame.prototype.addFoods = function(){\r\n    let food = new Food(this, this.foods.length);\r\n\r\n    this.foods.push(food);\r\n\r\n    if(this.foods.length < gameProps.foods.qnt)\r\n        this.addFoods();\r\n}\r\n\r\nGame.prototype.resizeCanvas = function(){\r\n\r\n\r\n    var $snakes = document.querySelectorAll('.snake-chooser .snake');\r\n    const chooseSnake_snakeSize = () => {\r\n        for (let i = $snakes.length - 1; i >= 0; i--) {\r\n            $snakes[i].style.width = `${this.tileSize}px`;\r\n            $snakes[i].style.height = `${this.tileSize}px`;\r\n        }\r\n    }\r\n\r\n    const resizeCanvas = () => {\r\n       \r\n        let winSize = [window.innerWidth, window.innerHeight]; // X, Y\r\n        let tileSize = [0, 0].map((val, i) => winSize[i] / gameProps.tiles[i]);\r\n        this.tileSize = tileSize[tileSize[0] > tileSize[1] ? 1 : 0];\r\n\r\n        chooseSnake_snakeSize();\r\n        \r\n    }\r\n\r\n    resizeCanvas();\r\n    window.addEventListener('resize', resizeCanvas);\r\n\r\n}\r\n\r\nGame.prototype.login = function(playerNickname, callback){\r\n\r\n    this.socket.emit('login', {\r\n        playerNickname: playerNickname\r\n    });\r\n\r\n    this.socket.on('logged', data =>{\r\n\r\n        gameProps = Object.assign(gameProps, data.gameProps);\r\n\r\n        data.player.idLocal = 0;\r\n\r\n        this.id = data.myID;\r\n        this.playersInTheRoom.push(data.player);\r\n        this.playersInTheRoom = Object.assign(this.playersInTheRoom, data.playersInTheRoom);\r\n        \r\n        this.resizeCanvas();\r\n\r\n        if(typeof callback == 'function') callback(data);\r\n\r\n    });\r\n\r\n}\r\n\r\nGame.prototype.socketEvents = function(){\r\n\r\n    this.socket.on('start', () => {\r\n        \r\n        this.interface.closeModal();\r\n\r\n        this.addPlayers();\r\n        this.addFoods();\r\n        this.newGame();\r\n\r\n    });\r\n\r\n    this.socket.on('newPlayer', player =>\r\n        this.playersInTheRoom.push(player));\r\n\r\n    this.socket.on('prepare multiplayer', arr => {\r\n        for (let i = arr.length - 1; i >= 0; i--) {\r\n            const player = arr[i];\r\n            this.playersInTheRoom.push(player);\r\n        }\r\n        this.socket.emit('start');\r\n    });\r\n\r\n    this.socket.on('playersInTheRoom update', data => {\r\n        var i = data.i;\r\n        delete data.i;\r\n        this.playersInTheRoom[i] = Object.assign(this.playersInTheRoom[i], data);        \r\n    });\r\n\r\n    this.socket.on('delPlayer', i => {\r\n        delete this.playersInTheRoom[i];\r\n        this.playersInTheRoom = this.playersInTheRoom.filter(Boolean);\r\n    });\r\n\r\n}","var gameProps = {}","function gestureViewer(){\r\n\r\n    var $gestureViewer = document.querySelector('#gestureViewer'),\r\n        $canvas = document.createElement('canvas'),\r\n        ctx = $canvas.getContext('2d');\r\n\r\n    $gestureViewer.appendChild($canvas);\r\n\r\n    var ballPoints = {};\r\n    var counter = 0;\r\n\r\n    const drawLine = (x0, y0, x1, y1) => {\r\n        ctx.strokeStyle = \"#7da278\";\r\n        ctx.lineCap = \"round\";\r\n\t    ctx.lineWidth = 8;\r\n        ctx.beginPath();\r\n        ctx.moveTo(x0, y0);\r\n        ctx.lineTo(x1, y1);\r\n        ctx.stroke();\r\n    }\r\n\r\n    window.addEventListener('touchstart', e => {\r\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\r\n            const touch = e.changedTouches[i];\r\n            var ballPoint = {\r\n                x: touch.pageX,\r\n                y: touch.pageY\r\n            }\r\n            ballPoints[touch.identifier || ++counter] = ballPoint;\r\n            drawLine(ballPoint.x - 1, ballPoint.y, ballPoint.x, ballPoint.y);\r\n        }\r\n    });\r\n\r\n    window.addEventListener('touchmove', e => {\r\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\r\n            const touch = e.changedTouches[i];\r\n            var ballPoint = ballPoints[touch.identifier || counter],\r\n                x = touch.pageX, y = touch.pageY;\r\n\r\n            drawLine(ballPoint.x, ballPoint.y, x, y);\r\n            ballPoint.x = x;\r\n            ballPoint.y = y;\r\n        }\r\n    });\r\n\r\n    window.addEventListener('touchend', e => {\r\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\r\n            const touch = e.changedTouches[i];\r\n            delete ballPoints[touch.identifier || counter];\r\n        }\r\n        setTimeout(() => ctx.clearRect(0, 0, $canvas.width, $canvas.height), 200);\r\n    });\r\n\r\n    const canvasFullSize = () => {\r\n        $canvas.width = window.innerWidth;\r\n        $canvas.height = window.innerHeight;\r\n    }\r\n\r\n    canvasFullSize();\r\n    window.addEventListener('resize', canvasFullSize);\r\n}","function Interface(game){\r\n\r\n    var $interface = document.querySelector('#interface'),\r\n        $modal = $interface.querySelector('.modal'),\r\n        $loginForm = $interface.querySelector('#login form'),\r\n        $inputNickname = $loginForm.querySelector('[name=\"player_name\"]'),\r\n        \r\n        $submitChooser = document.querySelector('#after-login .submit'),\r\n\r\n        $mainMenu = $interface.querySelector('#main-menu'),\r\n        $singlePlayer = $mainMenu.querySelector('#single-player'),\r\n        $multiplayer = $mainMenu.querySelector('#multiplayer'),\r\n\r\n        $multiplayerMenu = $interface.querySelector('#multiplayer-menu'),\r\n        $multiplayerSubmit = $multiplayerMenu.querySelector('.submit'),\r\n        $player2Name = $multiplayerMenu.querySelector('[name=\"player_name\"]'),\r\n        $playersQtn = $multiplayerMenu.querySelector('.input-number');\r\n\r\n    this.closeModal = () => $modal.classList.add('closed');\r\n\r\n    this.open = what => $interface.className = what;\r\n\r\n    const snakeChooser = new SnakeChooser($interface);\r\n    const dialogBox = new DialogBox($interface);\r\n    new InputNumber();\r\n\r\n    var $welcomeText = $mainMenu.querySelector('#welcome');\r\n    $loginForm.addEventListener('submit', e => {\r\n        game.login($inputNickname.value, data => {\r\n\r\n            $welcomeText.innerHTML = `Hi, ${$inputNickname.value}`;\r\n\r\n            snakeChooser.changeSnakeColor();\r\n            this.open('after-login');\r\n\r\n        });\r\n    });\r\n\r\n    $singlePlayer.addEventListener('click', e => {\r\n        game.socket.emit('start');\r\n    });\r\n\r\n    $submitChooser.addEventListener('click', () => {\r\n\r\n        game.socket.emit('changeColor', snakeChooser.currentColor);\r\n        this.open('main-menu');\r\n\r\n    });\r\n\r\n    $multiplayer.addEventListener('click', () => {\r\n\r\n        snakeChooser.currentColor = 0;\r\n        snakeChooser.changeSnakeColor();\r\n        this.open('multiplayer-menu');\r\n\r\n    });\r\n\r\n    $multiplayerSubmit.addEventListener('click', () => {\r\n\r\n        var colorsInUse = game.colorsInUse;\r\n        if(colorsInUse.includes(snakeChooser.currentColor))\r\n            return dialogBox.alert('Denied', 'This color is being used.');\r\n\r\n        game.socket.emit('prepare multiplayer', {\r\n            nickname: $player2Name.value,\r\n            color: snakeChooser.currentColor,\r\n            nPlayers: $playersQtn.getAttribute('data-value')\r\n        });\r\n\r\n    });\r\n\r\n}","window.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\nwindow.isLumia = /Lumia/i.test(navigator.userAgent);\r\nwindow.isElectron = /Electron/i.test(navigator.userAgent);","function Snake(game, props){\r\n\r\n    this.id = null;\r\n    this.idLocal = null;\r\n    this.nickname = null;\r\n    this.body = [];\r\n    this.color = 0;\r\n    this.bodyStart = [0, 0];\r\n\r\n    this.merge(props);\r\n\r\n    this.killed = false;\r\n\r\n    game.engine.add(this);\r\n\r\n    if(!isNaN(this.idLocal)) new SnakeControls(this, game);\r\n\r\n    game.socket.on(`snakeUpdate-${this.id}`, this.update);\r\n\r\n    this.draw = () => {\r\n\r\n        if(this.killed) return;\r\n\r\n        game.ctx.fillStyle = gameProps.snakes.colors[this.color];\r\n\r\n        this.body.forEach(bodyFragment => {\r\n            game.ctx.fillRect(\r\n                bodyFragment[0] * game.tileSize,\r\n                bodyFragment[1] * game.tileSize,\r\n                game.tileSize,\r\n                game.tileSize\r\n            );\r\n        });\r\n\r\n    }\r\n\r\n}","function SnakeControls(snake, game){\r\n\r\n    const pushMovement = moveTo => {\r\n        if(!moveTo) return;\r\n        game.socket.emit('moveTo', {\r\n            id: snake.id,\r\n            moveTo: moveTo\r\n        });\r\n    }\r\n\r\n    var $touchAreas = document.querySelector('#touch-areas');\r\n    var $touchArea = {left: $touchAreas.querySelector('#left'), right: $touchAreas.querySelector('#right')};\r\n\r\n    // Keyboard\r\n    var keyMap = (map => map ? {\r\n\r\n        directions: Object.keys(map),\r\n        keys: Object.keys(map).map(k => map[k]),\r\n\r\n        direction: function(key){\r\n            return this.directions[ this.keys.indexOf(key) ];\r\n        }\r\n\r\n    } : undefined)(gameProps.snakes.keyMaps[snake.idLocal]);\r\n\r\n    keyMap && window.addEventListener('keydown', e => pushMovement(keyMap.direction(e.key)));\r\n\r\n    // Touch devices \r\n    let touchArea = 'all';\r\n    let touchstart = {}, touchmove = {}, sensibilityTouch = gameProps.snakes.sensibilityTouch;\r\n    const directions = [[\"left\", \"right\"], [\"up\", \"down\"]];\r\n    const orientationMap = {0: \"portrait-primary\", 180: \"portrait-secondary\", 90: \"landscape-primary\", \"-90\": \"landscape-secondary\"};\r\n\r\n    const getOrientation = () => screen.msOrientation || (screen.orientation || screen.mozOrientation || {}).type || orientationMap[window.orientation];\r\n    let orientation = getOrientation();\r\n    window.addEventListener('orientationchange', () => orientation = getOrientation());\r\n    \r\n    const touchHandle = touchedArea => {\r\n\r\n        let dragged = [[], []].map((_, axis) => touchstart[touchedArea][axis] - touchmove[touchedArea][axis]);\r\n\r\n        if(isLumia){\r\n            if(orientation === \"landscape-primary\") dragged[0] = -dragged[0];\r\n            else if(orientation === \"landscape-secondary\") dragged[1] = -dragged[1];\r\n            if(orientation.indexOf('landscape') > -1) dragged.reverse();\r\n\r\n            if(orientation === \"portrait-secondary\"){\r\n                dragged[0] = -dragged[0];\r\n                dragged[1] = -dragged[1];\r\n            }\r\n        }\r\n\r\n        if(touchedArea != touchArea && touchArea != 'all') return;\r\n\r\n        let touchAxis = +(Math.abs(dragged[0]) < Math.abs(dragged[1])),\r\n            moveIndex = +(dragged[touchAxis] < 0),\r\n            direction = directions[touchAxis][moveIndex];\r\n\r\n        if(Math.abs(dragged[touchAxis]) >= sensibilityTouch){\r\n            if(direction != rowMovements.lastItem() && direction != snake.direction) pushMovement(direction);\r\n            touchstart[touchedArea] = [...touchmove[touchedArea]];\r\n        }\r\n\r\n    }\r\n\r\n    const touchPos = e => [e.changedTouches[0].pageX, e.changedTouches[0].pageY];\r\n\r\n    if(touchArea){\r\n        const $touchAreaKeys = Object.keys($touchArea);\r\n        for (let i = $touchAreaKeys.length - 1; i >=0 ; i--) {\r\n            const area = $touchAreaKeys[i];\r\n            $touchArea[area].addEventListener('touchstart', e => touchstart[area] = touchPos(e));\r\n            $touchArea[area].addEventListener('touchmove', e => { touchmove[area] = touchPos(e); touchHandle(area); });\r\n        }\r\n    }\r\n\r\n    document.ontouchmove = function(e){ e.preventDefault(); } // Disable page scroll\r\n\r\n}"]}