{"version":3,"sources":["game/Engine.js","game/Food.js","game/Game.js","game/gameProps.js","game/gestureViewer.js","game/helpers.js","game/interface.js","game/Snake.js","game/snakeControls.js"],"names":["_this","game","canvas","ctx","draw","i","clearRect","width","height","fn","objects","arguments","_key","runFunction","length","args","_objects$i","this","run","engine","start","performance","now","deltaTime","timestamp","min","requestAnimationFrame","add","_object","Food","id","type","push","update","object","key","beginPath","arc","position","tileSize","Math","PI","closePath","fill","Object","defineProperty","set","val","console","error","floor","socket","tiles","get","$game","newStatus","status","Game","players","Engine","interface","log","t","gestureViewer","socketEvents","value","prototype","addPlayers","playersInTheRoom","parentNode","Snake","playerInTheRoom","playerProps","player","addFoods","foods","gameProps","qnt","$snakes","document","querySelectorAll","resizeCanvas","map","winSize","style","window","newGame","on","data","assign","callback","_this3","closeModal","food","chooseSnake_snakeSize","filter","Boolean","$canvas","createElement","getContext","ballPoints","counter","drawLine","y1","strokeStyle","lineCap","moveTo","x0","y0","addEventListener","e","login","changedTouches","playerNickname","ballPoint","y","touch","pageY","identifier","myID","x","pageX","setTimeout","canvasFullSize","innerWidth","innerHeight","$interface","querySelector","$modal","$loginForm","$inputNickname","$snakeChoosers","$submitChooser","$mainMenu","$singlePlayer","$multiplayer","$multiplayerMenu","$multiplayerSubmit","$player2Name","$playersQtn","className","what","$welcomeText","open","color","$gestureViewer","classList","background","snakes","colors","lineTo","$snakeChooser","$chooserNext","target","indexOf","changeSnakeColor","$chooserPrev","remove","_loop","currentColor","emit","nPlayers","idLocal","bodyStart","isLumia","fillStyle","test","navigator","userAgent","isElectron","forEach","arr","$touchAreas","right","innerHTML","directions","keys","undefined","keyMap","direction","sensibilityTouch","orientationMap","0","90","-90","screen","mozOrientation","orientation","$snake","area","touchPos","$touchArea","touchedArea","touchstart","axis","touchmove","lastItem","snake","_toConsumableArray","preventDefault","nickname","arr2","Array","from","isMobile","JSON","stringify","sumWith","arrays","_len","body","b","a","newArray","concat","arrLeng","itemLeng","array","j","item","killed","$inputNumber","bodyFragment","$decrementButton","getAttribute","Infinity","pushMovement","$input","setAttribute","left","serviceWorker","register","then"],"mappings":"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","file":"snakeGame.js","sourcesContent":["function Engine(game){\r\n\r\n    var canvas = game.ctx.canvas;\r\n\r\n    var objects = [];\r\n\r\n    const runFunction = (fn, ...args) => {\r\n\r\n        var i = objects.length;\r\n\r\n        while(i--){\r\n            if(typeof objects[i][fn] == 'function') objects[i][fn](...args);\r\n        }\r\n\r\n    }\r\n\r\n    const draw = () => {\r\n        game.ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        runFunction('draw');\r\n    }\r\n\r\n\r\n    this.run = () => {\r\n\r\n        let engine = this,\r\n            start = performance.now();\r\n\r\n        requestAnimationFrame(function run(timestamp){\r\n\r\n            let deltaTime = (timestamp - start) / 1000;\r\n            deltaTime = Math.min(1, deltaTime);\r\n\r\n            draw();\r\n\r\n            if(deltaTime >= 1) return engine.run();\r\n            requestAnimationFrame(run);\r\n\r\n        }.bind(this));\r\n\r\n    }\r\n\r\n    this.add = (object) => {\r\n        objects.push(object);\r\n        \r\n        object.update = _object => {\r\n            for (const key in _object) object[key] = _object[key];\r\n        }\r\n    }\r\n\r\n}","function Food(game, id){\r\n\r\n    this.id = id;\r\n    this.type;\r\n\r\n    this.position = [];\r\n\r\n    game.engine.add(this);\r\n\r\n    game.socket.on(`foodUpdate-${id}`, this.update);\r\n\r\n    this.draw = () => {\r\n\r\n        if(game.status != 'playing' || !this.type) return;\r\n\r\n        game.ctx.fillStyle = this.type.color;\r\n\r\n        game.ctx.beginPath();\r\n\r\n        game.ctx.arc(\r\n            this.position[0] * game.tileSize + game.tileSize / 2,\r\n            this.position[1] * game.tileSize + game.tileSize / 2,\r\n            game.tileSize / 2,\r\n            0,\r\n            Math.PI * 2\r\n        );\r\n        \r\n        game.ctx.closePath();\r\n\r\n        game.ctx.fill();\r\n\r\n    }\r\n\r\n}","function Game(canvas){\r\n\r\n    // Properties\r\n    var tileSize;\r\n    Object.defineProperty(this, 'tileSize', {\r\n        set: function(val){\r\n            if(+val) tileSize = Math.floor(+val);\r\n            else return console.error('Invalid value');\r\n            canvas.width = this.tileSize * gameProps.tiles[0];\r\n            canvas.height = this.tileSize * gameProps.tiles[1];\r\n        },\r\n        get: function(){ return tileSize; }\r\n    });\r\n\r\n    Object.defineProperty(this, 'ctx', {\r\n        value: canvas.getContext('2d'),\r\n        writable: false\r\n    });\r\n\r\n    var status, $game = canvas.parentNode;\r\n    Object.defineProperty(this, 'status', {\r\n        set: newStatus =>\r\n            $game.className = status = newStatus,\r\n        get: () => status\r\n    });\r\n\r\n    this.playersInTheRoom = [];\r\n\r\n    this.id = null;\r\n    this.players = [];\r\n    this.foods = [];\r\n\r\n    this.status = 'toStart';\r\n    this.engine = new Engine(this);\r\n    this.interface = new Interface(this);\r\n    this.socket = io();\r\n\r\n    this.socket.on('teste', t => console.log(t))\r\n\r\n    gestureViewer();\r\n\r\n    this.engine.run();\r\n\r\n    this.socketEvents();\r\n}\r\n\r\nGame.prototype.newGame = function(){\r\n\r\n    this.status = \"playing\";\r\n\r\n}\r\n\r\nGame.prototype.addPlayers = function(){\r\n\r\n    for (let i = this.playersInTheRoom.length - 1; i >= 0 ; i--) {\r\n        const playerInTheRoom = this.playersInTheRoom[i];\r\n\r\n        let player = Object.assign(new Snake(this, playerInTheRoom.id), playerInTheRoom.playerProps);\r\n\r\n        this.players.push(player);\r\n\r\n    }\r\n\r\n}\r\n\r\nGame.prototype.addFoods = function(){\r\n    let food = new Food(this, this.foods.length);\r\n\r\n    this.foods.push(food);\r\n\r\n    if(this.foods.length < gameProps.foods.qnt)\r\n        this.addFoods();\r\n}\r\n\r\nGame.prototype.resizeCanvas = function(){\r\n\r\n\r\n    var $snakes = document.querySelectorAll('.snake-chooser .snake');\r\n    const chooseSnake_snakeSize = () => {\r\n        for (let i = $snakes.length - 1; i >= 0; i--) {\r\n            $snakes[i].style.width = `${this.tileSize}px`;\r\n            $snakes[i].style.height = `${this.tileSize}px`;\r\n        }\r\n    }\r\n\r\n    const resizeCanvas = () => {\r\n       \r\n        let winSize = [window.innerWidth, window.innerHeight]; // X, Y\r\n        let tileSize = [0, 0].map((val, i) => winSize[i] / gameProps.tiles[i]);\r\n        this.tileSize = tileSize[tileSize[0] > tileSize[1] ? 1 : 0];\r\n\r\n        chooseSnake_snakeSize();\r\n        \r\n    }\r\n\r\n    resizeCanvas();\r\n    window.addEventListener('resize', resizeCanvas);\r\n\r\n}\r\n\r\nGame.prototype.login = function(playerNickname, callback){\r\n\r\n    this.socket.emit('login', {\r\n        playerNickname: playerNickname\r\n    });\r\n\r\n    this.socket.on('logged', data =>{\r\n\r\n        gameProps = Object.assign(gameProps, data.gameProps);\r\n\r\n        this.id = data.myID;\r\n        this.playersInTheRoom = data.players;\r\n\r\n        this.resizeCanvas();\r\n\r\n        if(typeof callback == 'function') callback(data);\r\n\r\n    });\r\n\r\n}\r\n\r\nGame.prototype.socketEvents = function(){\r\n\r\n    this.socket.on('start', () => {\r\n\r\n        this.interface.closeModal();\r\n\r\n        this.addPlayers();\r\n        this.addFoods();\r\n        this.newGame();\r\n        \r\n        this.socket.emit('start');\r\n    });\r\n\r\n    this.socket.on('newPlayer', player =>\r\n        this.playersInTheRoom.push(player));\r\n\r\n    this.socket.on('playersInTheRoomUpdate', data => {\r\n        var i = data.i;\r\n        delete data.i;\r\n        this.playersInTheRoom[i].playerProps = Object.assign(this.playersInTheRoom[i].playerProps, data);        \r\n    });\r\n\r\n    this.socket.on('delPlayer', i => {\r\n        delete this.playersInTheRoom[i];\r\n        this.playersInTheRoom = this.playersInTheRoom.filter(Boolean);\r\n    });\r\n\r\n}","var gameProps = {}","function gestureViewer(){\r\n\r\n    var $gestureViewer = document.querySelector('#gestureViewer'),\r\n        $canvas = document.createElement('canvas'),\r\n        ctx = $canvas.getContext('2d');\r\n\r\n    $gestureViewer.appendChild($canvas);\r\n\r\n    var ballPoints = {};\r\n    var counter = 0;\r\n\r\n    const drawLine = (x0, y0, x1, y1) => {\r\n        ctx.strokeStyle = \"#7da278\";\r\n        ctx.lineCap = \"round\";\r\n\t    ctx.lineWidth = 8;\r\n        ctx.beginPath();\r\n        ctx.moveTo(x0, y0);\r\n        ctx.lineTo(x1, y1);\r\n        ctx.stroke();\r\n    }\r\n\r\n    window.addEventListener('touchstart', e => {\r\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\r\n            const touch = e.changedTouches[i];\r\n            var ballPoint = {\r\n                x: touch.pageX,\r\n                y: touch.pageY\r\n            }\r\n            ballPoints[touch.identifier || ++counter] = ballPoint;\r\n            drawLine(ballPoint.x - 1, ballPoint.y, ballPoint.x, ballPoint.y);\r\n        }\r\n    });\r\n\r\n    window.addEventListener('touchmove', e => {\r\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\r\n            const touch = e.changedTouches[i];\r\n            var ballPoint = ballPoints[touch.identifier || counter],\r\n                x = touch.pageX, y = touch.pageY;\r\n\r\n            drawLine(ballPoint.x, ballPoint.y, x, y);\r\n            ballPoint.x = x;\r\n            ballPoint.y = y;\r\n        }\r\n    });\r\n\r\n    window.addEventListener('touchend', e => {\r\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\r\n            const touch = e.changedTouches[i];\r\n            delete ballPoints[touch.identifier || counter];\r\n        }\r\n        setTimeout(() => ctx.clearRect(0, 0, $canvas.width, $canvas.height), 200);\r\n    });\r\n\r\n    const canvasFullSize = () => {\r\n        $canvas.width = window.innerWidth;\r\n        $canvas.height = window.innerHeight;\r\n    }\r\n\r\n    canvasFullSize();\r\n    window.addEventListener('resize', canvasFullSize);\r\n}","window.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\nwindow.isLumia = /Lumia/i.test(navigator.userAgent);\r\nwindow.isElectron = /Electron/i.test(navigator.userAgent);","function Interface(game){\r\n\r\n    var $interface = document.querySelector('#interface'),\r\n        $modal = $interface.querySelector('.modal'),\r\n        $loginForm = $interface.querySelector('#login form'),\r\n        $inputNickname = $loginForm.querySelector('[name=\"player_name\"]'),\r\n\r\n        $snakeChoosers = $interface.querySelectorAll('.snake-chooser'),\r\n        \r\n        $submitChooser = document.querySelector('#after-login .submit'),\r\n\r\n        $mainMenu = $interface.querySelector('#main-menu'),\r\n        $singlePlayer = $mainMenu.querySelector('#single-player'),\r\n        $multiplayer = $mainMenu.querySelector('#multiplayer'),\r\n\r\n        $multiplayerMenu = $interface.querySelector('#multiplayer-menu'),\r\n        $multiplayerSubmit = $multiplayerMenu.querySelector('.submit'),\r\n        $player2Name = $multiplayerMenu.querySelector('[name=\"player_name\"]'),\r\n        $playersQtn = $multiplayerMenu.querySelector('.input-number');\r\n\r\n    this.closeModal = () => $modal.classList.add('closed');\r\n\r\n    this.open = what => $interface.className = what;\r\n\r\n    var $welcomeText = $mainMenu.querySelector('#welcome');\r\n    $loginForm.addEventListener('submit', e => {\r\n        game.login($inputNickname.value, data => {\r\n\r\n            $welcomeText.innerHTML = `Hi, ${$inputNickname.value}`;\r\n\r\n            changeSnakeColor(0);\r\n            this.open('after-login');\r\n\r\n        });\r\n    });\r\n\r\n    $singlePlayer.addEventListener('click', e => {\r\n        game.socket.emit('single player');\r\n    });\r\n\r\n    var currentColor = 0;\r\n    const changeSnakeColor = color => {\r\n\r\n        for (let i = $snakeChoosers.length - 1; i >= 0; i--) {\r\n            const $snakeChooser = $snakeChoosers[i];\r\n            \r\n            let $chooserPrev = $snakeChooser.querySelector('.chooser-prev'),\r\n                $chooserNext = $snakeChooser.querySelector('.chooser-next'),\r\n                $snake = $snakeChooser.querySelector('.snake');\r\n\r\n            if(currentColor == 0)\r\n                $chooserPrev.classList.add('disabled');\r\n\r\n            if(currentColor == gameProps.snakes.colors.length - 1)\r\n                $chooserNext.classList.add('disabled');\r\n\r\n            $snake.style.background = gameProps.snakes.colors[color];\r\n        }\r\n    }\r\n\r\n    for (let i = $snakeChoosers.length - 1; i >= 0; i--) {\r\n        const $snakeChooser = $snakeChoosers[i];\r\n        \r\n        let $chooserPrev = $snakeChooser.querySelector('.chooser-prev'),\r\n            $chooserNext = $snakeChooser.querySelector('.chooser-next');\r\n\r\n        $chooserPrev.addEventListener('click', e => {\r\n            if(e.target.className.indexOf('disabled') == -1){\r\n    \r\n                $chooserNext.classList.remove('disabled');\r\n    \r\n                currentColor--;\r\n    \r\n                changeSnakeColor(currentColor);\r\n            }\r\n        });\r\n    \r\n        $chooserNext.addEventListener('click', e => {\r\n            if(e.target.className.indexOf('disabled') == -1){\r\n    \r\n                $chooserPrev.classList.remove('disabled');\r\n    \r\n                currentColor++;\r\n            \r\n                changeSnakeColor(currentColor);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    $submitChooser.addEventListener('click', () => {\r\n\r\n        game.socket.emit('changeColor', currentColor);\r\n        this.open('main-menu');\r\n\r\n    });\r\n\r\n    $multiplayer.addEventListener('click', () => {\r\n\r\n        this.open('multiplayer-menu');\r\n\r\n    });\r\n\r\n    $multiplayerSubmit.addEventListener('click', () => {\r\n        game.socket.emit('multiplayer', {\r\n            nickname: $player2Name.value,\r\n            color: currentColor,\r\n            nPlayers: $playersQtn.getAttribute('data-value')\r\n        });\r\n    });\r\n\r\n}","function Snake(game, id){\r\n\r\n    this.id = id;\r\n    this.idLocal = 0;\r\n\r\n    this.nickname = null;\r\n\r\n    this.body = [];\r\n    this.color = 0;\r\n\r\n    this.killed = false;\r\n\r\n    this.bodyStart = [0, 0];\r\n\r\n    game.engine.add(this);\r\n\r\n    if(game.id == this.id) new SnakeControls(this, game);\r\n\r\n    game.socket.on(`snakeUpdate-${id}`, this.update);\r\n\r\n    this.draw = () => {\r\n\r\n        if(this.killed) return;\r\n\r\n        game.ctx.fillStyle = gameProps.snakes.colors[this.color];\r\n\r\n        this.body.forEach(bodyFragment => {\r\n            game.ctx.fillRect(\r\n                bodyFragment[0] * game.tileSize,\r\n                bodyFragment[1] * game.tileSize,\r\n                game.tileSize,\r\n                game.tileSize\r\n            );\r\n        });\r\n\r\n    }\r\n\r\n}","function SnakeControls(snake, game){\r\n\r\n    //var rowMovements = [];\r\n\r\n    const pushMovement = moveTo => {\r\n        if(!moveTo) return;\r\n        game.socket.emit(`moveTo`, moveTo);\r\n    }\r\n\r\n    var $touchAreas = document.querySelector('#touch-areas');\r\n    var $touchArea = {left: $touchAreas.querySelector('#left'), right: $touchAreas.querySelector('#right')};\r\n\r\n    // Keyboard\r\n    var keyMap = (map => map ? {\r\n\r\n        directions: Object.keys(map),\r\n        keys: Object.keys(map).map(k => map[k]),\r\n\r\n        direction: function(key){\r\n            return this.directions[ this.keys.indexOf(key) ];\r\n        }\r\n\r\n    } : undefined)(gameProps.snakes.keyMaps[snake.idLocal]);\r\n\r\n    keyMap && window.addEventListener('keydown', e => pushMovement(keyMap.direction(e.key)));\r\n    \r\n    // Touch devices \r\n    let touchArea = 'all';\r\n    let touchstart = {}, touchmove = {}, sensibilityTouch = gameProps.snakes.sensibilityTouch;\r\n    const directions = [[\"left\", \"right\"], [\"up\", \"down\"]];\r\n    const orientationMap = {0: \"portrait-primary\", 180: \"portrait-secondary\", 90: \"landscape-primary\", \"-90\": \"landscape-secondary\"};\r\n\r\n    const getOrientation = () => screen.msOrientation || (screen.orientation || screen.mozOrientation || {}).type || orientationMap[window.orientation];\r\n    let orientation = getOrientation();\r\n    window.addEventListener('orientationchange', () => orientation = getOrientation());\r\n\r\n    const touchHandle = touchedArea => {\r\n\r\n        let dragged = [[], []].map((_, axis) => touchstart[touchedArea][axis] - touchmove[touchedArea][axis]);\r\n\r\n        if(isLumia){\r\n            if(orientation === \"landscape-primary\") dragged[0] = -dragged[0];\r\n            else if(orientation === \"landscape-secondary\") dragged[1] = -dragged[1];\r\n            if(orientation.indexOf('landscape') > -1) dragged.reverse();\r\n\r\n            if(orientation === \"portrait-secondary\"){\r\n                dragged[0] = -dragged[0];\r\n                dragged[1] = -dragged[1];\r\n            }\r\n        }\r\n\r\n        if(touchedArea != touchArea && touchArea != 'all') return;\r\n\r\n        let touchAxis = +(Math.abs(dragged[0]) < Math.abs(dragged[1])),\r\n            moveIndex = +(dragged[touchAxis] < 0),\r\n            direction = directions[touchAxis][moveIndex];\r\n\r\n        if(Math.abs(dragged[touchAxis]) >= sensibilityTouch){\r\n            if(direction != rowMovements.lastItem() && direction != snake.direction) pushMovement(direction);\r\n            touchstart[touchedArea] = [...touchmove[touchedArea]];\r\n        }\r\n\r\n    }\r\n\r\n    const touchPos = e => [e.changedTouches[0].pageX, e.changedTouches[0].pageY];\r\n\r\n    if(touchArea){\r\n        for (const area in $touchArea) {\r\n            $touchArea[area].addEventListener('touchstart', e => touchstart[area] = touchPos(e));\r\n            $touchArea[area].addEventListener('touchmove', e => { touchmove[area] = touchPos(e); touchHandle(area); });\r\n        }\r\n    }\r\n\r\n    document.ontouchmove = function(e){ e.preventDefault(); } // Disable page scroll\r\n\r\n}"]}