{"version":3,"sources":["game/Engine.js","game/Food.js","game/Game.js","game/gameProps.js","game/gestureViewer.js","game/helpers.js","game/interface.js","game/Snake.js","game/snakeControls.js"],"names":["_this","game","canvas","ctx","draw","i","clearRect","width","height","fn","objects","arguments","_key","runFunction","length","args","_objects$i","this","run","engine","start","performance","now","deltaTime","timestamp","min","requestAnimationFrame","add","_object","Food","id","type","push","update","object","key","beginPath","arc","position","tileSize","Math","PI","closePath","fill","Object","defineProperty","set","val","console","error","floor","socket","tiles","get","$game","newStatus","status","Game","players","Engine","interface","log","t","gestureViewer","socketEvents","value","prototype","addPlayers","playersInTheRoom","parentNode","Snake","playerInTheRoom","playerProps","player","addFoods","foods","gameProps","qnt","$snake","document","querySelector","resizeCanvas","window","Interface","innerHeight","on","winSize","style","playerNickname","callback","_this2","newGame","data","myID","_this3","closeModal","food","assign","chooseSnake_snakeSize","Boolean","$canvas","createElement","getContext","ballPoints","counter","drawLine","y1","strokeStyle","lineCap","moveTo","x0","y0","addEventListener","e","login","changedTouches","ballPoint","y","touch","pageY","identifier","x","pageX","setTimeout","canvasFullSize","innerWidth","$interface","$modal","$loginForm","$inputNickname","$snakeChooser","$chooserPrev","$chooserNext","$submitChooser","$mainMenu","$singlePlayer","$multiplayer","className","what","$welcomeText","open","color","$gestureViewer","appendChild","background","snakes","colors","indexOf","classList","remove","lineWidth","stroke","target","changeSnakeColor","emit","idLocal","nickname","body","SnakeControls","fillStyle","forEach","bodyFragment","fillRect","arr","isLumia","userAgent","isElectron","$touchAreas","snake","k","keys","keyMap","getOrientation","screen","msOrientation","orientation","mozOrientation","orientationMap","currentColor","$touchArea","area","touchstart","touchPos","map","_","axis","touchedArea","touchmove","dragged","abs","moveIndex","touchAxis","direction","directions","sensibilityTouch","rowMovements","lastItem","concat","_toConsumableArray","ontouchmove","preventDefault","Array","isArray","arr2","isMobile","test","navigator","killed","stringify","JSON","bodyStart","arrays","sort","a","b","newArray","arrLeng","itemLeng","item","register","then","catch"],"mappings":"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","file":"snakeGame.js","sourcesContent":["function Engine(game){\r\n\r\n    var canvas = game.ctx.canvas;\r\n\r\n    var objects = [];\r\n\r\n    const runFunction = (fn, ...args) => {\r\n\r\n        var i = objects.length;\r\n\r\n        while(i--){\r\n            if(typeof objects[i][fn] == 'function') objects[i][fn](...args);\r\n        }\r\n\r\n    }\r\n\r\n    const draw = () => {\r\n        game.ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        runFunction('draw');\r\n    }\r\n\r\n\r\n    this.run = () => {\r\n\r\n        let engine = this,\r\n            start = performance.now();\r\n\r\n        requestAnimationFrame(function run(timestamp){\r\n\r\n            let deltaTime = (timestamp - start) / 1000;\r\n            deltaTime = Math.min(1, deltaTime);\r\n\r\n            draw();\r\n\r\n            if(deltaTime >= 1) return engine.run();\r\n            requestAnimationFrame(run);\r\n\r\n        }.bind(this));\r\n\r\n    }\r\n\r\n    this.add = (object) => {\r\n        objects.push(object);\r\n        \r\n        object.update = _object => {\r\n            for (const key in _object) object[key] = _object[key];\r\n        }\r\n    }\r\n\r\n}","function Food(game, id){\r\n\r\n    this.id = id;\r\n    this.type;\r\n\r\n    this.position = [];\r\n\r\n    game.engine.add(this);\r\n\r\n    game.socket.on(`foodUpdate-${id}`, this.update);\r\n\r\n    this.draw = () => {\r\n\r\n        if(game.status != 'playing' || !this.type) return;\r\n\r\n        game.ctx.fillStyle = this.type.color;\r\n\r\n        game.ctx.beginPath();\r\n\r\n        game.ctx.arc(\r\n            this.position[0] * game.tileSize + game.tileSize / 2,\r\n            this.position[1] * game.tileSize + game.tileSize / 2,\r\n            game.tileSize / 2,\r\n            0,\r\n            Math.PI * 2\r\n        );\r\n        \r\n        game.ctx.closePath();\r\n\r\n        game.ctx.fill();\r\n\r\n    }\r\n\r\n}","function Game(canvas){\r\n\r\n    // Properties\r\n    var tileSize;\r\n    Object.defineProperty(this, 'tileSize', {\r\n        set: function(val){\r\n            if(+val) tileSize = Math.floor(+val);\r\n            else return console.error('Invalid value');\r\n            canvas.width = this.tileSize * gameProps.tiles[0];\r\n            canvas.height = this.tileSize * gameProps.tiles[1];\r\n        },\r\n        get: function(){ return tileSize; }\r\n    });\r\n\r\n    Object.defineProperty(this, 'ctx', {\r\n        value: canvas.getContext('2d'),\r\n        writable: false\r\n    });\r\n\r\n    var status, $game = canvas.parentNode;\r\n    Object.defineProperty(this, 'status', {\r\n        set: newStatus =>\r\n            $game.className = status = newStatus,\r\n        get: () => status\r\n    });\r\n\r\n    this.playersInTheRoom = [];\r\n\r\n    this.id = null;\r\n    this.players = [];\r\n    this.foods = [];\r\n\r\n    this.status = 'toStart';\r\n    this.engine = new Engine(this);\r\n    this.interface = new Interface(this);\r\n    this.socket = io();\r\n\r\n    this.socket.on('teste', t => console.log(t))\r\n\r\n    gestureViewer();\r\n\r\n    this.engine.run();\r\n\r\n    this.socketEvents();\r\n}\r\n\r\nGame.prototype.newGame = function(){\r\n\r\n    this.status = \"playing\";\r\n\r\n}\r\n\r\nGame.prototype.addPlayers = function(){\r\n\r\n    for (let i = this.playersInTheRoom.length - 1; i >= 0 ; i--) {\r\n        const playerInTheRoom = this.playersInTheRoom[i];\r\n\r\n        let player = Object.assign(new Snake(this, playerInTheRoom.id), playerInTheRoom.playerProps);\r\n\r\n        this.players.push(player);\r\n\r\n    }\r\n\r\n}\r\n\r\nGame.prototype.addFoods = function(){\r\n    let food = new Food(this, this.foods.length);\r\n\r\n    this.foods.push(food);\r\n\r\n    if(this.foods.length < gameProps.foods.qnt)\r\n        this.addFoods();\r\n}\r\n\r\nGame.prototype.resizeCanvas = function(){\r\n\r\n\r\n    var $snake = document.querySelector('#snake-chooser .snake');\r\n    const chooseSnake_snakeSize = () => {\r\n        $snake.style.width = `${this.tileSize}px`;\r\n        $snake.style.height = `${this.tileSize}px`;\r\n    }\r\n\r\n    const resizeCanvas = () => {\r\n       \r\n        let winSize = [window.innerWidth, window.innerHeight]; // X, Y\r\n        let tileSize = [0, 0].map((val, i) => winSize[i] / gameProps.tiles[i]);\r\n        this.tileSize = tileSize[tileSize[0] > tileSize[1] ? 1 : 0];\r\n\r\n        chooseSnake_snakeSize();\r\n        \r\n    }\r\n\r\n    resizeCanvas();\r\n    window.addEventListener('resize', resizeCanvas);\r\n\r\n}\r\n\r\nGame.prototype.login = function(playerNickname, callback){\r\n\r\n    this.socket.emit('login', {\r\n        playerNickname: playerNickname\r\n    });\r\n\r\n    this.socket.on('logged', data =>{\r\n\r\n        gameProps = Object.assign(gameProps, data.gameProps);\r\n\r\n        this.id = data.myID;\r\n        this.playersInTheRoom = data.players;\r\n\r\n        this.resizeCanvas();\r\n\r\n        if(typeof callback == 'function') callback(data);\r\n\r\n    });\r\n\r\n}\r\n\r\nGame.prototype.socketEvents = function(){\r\n\r\n    this.socket.on('start', () => {\r\n\r\n        this.interface.closeModal();\r\n\r\n        this.addPlayers();\r\n        this.addFoods();\r\n        this.newGame();\r\n        \r\n        this.socket.emit('start');\r\n    });\r\n\r\n    this.socket.on('newPlayer', player =>\r\n        this.playersInTheRoom.push(player));\r\n\r\n    this.socket.on('playersInTheRoomUpdate', data => {\r\n        var i = data.i;\r\n        delete data.i;\r\n        this.playersInTheRoom[i].playerProps = Object.assign(this.playersInTheRoom[i].playerProps, data);        \r\n    });\r\n\r\n    this.socket.on('delPlayer', i => {\r\n        delete this.playersInTheRoom[i];\r\n        this.playersInTheRoom = this.playersInTheRoom.filter(Boolean);\r\n    });\r\n\r\n}","var gameProps = {}","function gestureViewer(){\r\n\r\n    var $gestureViewer = document.querySelector('#gestureViewer'),\r\n        $canvas = document.createElement('canvas'),\r\n        ctx = $canvas.getContext('2d');\r\n\r\n    $gestureViewer.appendChild($canvas);\r\n\r\n    var ballPoints = {};\r\n    var counter = 0;\r\n\r\n    const drawLine = (x0, y0, x1, y1) => {\r\n        ctx.strokeStyle = \"#7da278\";\r\n        ctx.lineCap = \"round\";\r\n\t    ctx.lineWidth = 8;\r\n        ctx.beginPath();\r\n        ctx.moveTo(x0, y0);\r\n        ctx.lineTo(x1, y1);\r\n        ctx.stroke();\r\n    }\r\n\r\n    window.addEventListener('touchstart', e => {\r\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\r\n            const touch = e.changedTouches[i];\r\n            var ballPoint = {\r\n                x: touch.pageX,\r\n                y: touch.pageY\r\n            }\r\n            ballPoints[touch.identifier || ++counter] = ballPoint;\r\n            drawLine(ballPoint.x - 1, ballPoint.y, ballPoint.x, ballPoint.y);\r\n        }\r\n    });\r\n\r\n    window.addEventListener('touchmove', e => {\r\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\r\n            const touch = e.changedTouches[i];\r\n            var ballPoint = ballPoints[touch.identifier || counter],\r\n                x = touch.pageX, y = touch.pageY;\r\n\r\n            drawLine(ballPoint.x, ballPoint.y, x, y);\r\n            ballPoint.x = x;\r\n            ballPoint.y = y;\r\n        }\r\n    });\r\n\r\n    window.addEventListener('touchend', e => {\r\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\r\n            const touch = e.changedTouches[i];\r\n            delete ballPoints[touch.identifier || counter];\r\n        }\r\n        setTimeout(() => ctx.clearRect(0, 0, $canvas.width, $canvas.height), 200);\r\n    });\r\n\r\n    const canvasFullSize = () => {\r\n        $canvas.width = window.innerWidth;\r\n        $canvas.height = window.innerHeight;\r\n    }\r\n\r\n    canvasFullSize();\r\n    window.addEventListener('resize', canvasFullSize);\r\n}","window.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\nwindow.isLumia = /Lumia/i.test(navigator.userAgent);\r\nwindow.isElectron = /Electron/i.test(navigator.userAgent);","function Interface(game){\r\n\r\n    var $interface = document.querySelector('#interface'),\r\n        $modal = $interface.querySelector('.modal'),\r\n        $loginForm = $interface.querySelector('#login form'),\r\n        $inputNickname = $loginForm.querySelector('[name=\"player_name\"]'),\r\n\r\n        $snakeChooser = $interface.querySelector('#snake-chooser'),\r\n        $chooserPrev = $snakeChooser.querySelector('#chooser-prev'),\r\n        $chooserNext = $snakeChooser.querySelector('#chooser-next'),\r\n        $snake = $snakeChooser.querySelector('.snake'),\r\n        $submitChooser = $snakeChooser.querySelector('.submit'),\r\n\r\n        $mainMenu = $interface.querySelector('#main-menu'),\r\n        $singlePlayer = $mainMenu.querySelector('#single-player'),\r\n        $multiplayer = $mainMenu.querySelector('#multiplayer');\r\n\r\n    this.closeModal = () => $modal.classList.add('closed');\r\n\r\n    this.open = what => $interface.className = what;\r\n\r\n    var $welcomeText = $mainMenu.querySelector('#welcome');\r\n    $loginForm.addEventListener('submit', e => {\r\n        game.login($inputNickname.value, data => {\r\n\r\n            $welcomeText.innerHTML = `Hi, ${$inputNickname.value}`;\r\n\r\n            changeSnakeColor(0);\r\n            this.open('snake-chooser');\r\n\r\n        });\r\n    });\r\n\r\n    $singlePlayer.addEventListener('click', e => {\r\n        game.socket.emit('single player');\r\n    });\r\n\r\n    var currentColor = 0;\r\n    const changeSnakeColor = color => {\r\n\r\n        if(currentColor == 0)\r\n            $chooserPrev.className = 'disabled';\r\n\r\n        if(currentColor == gameProps.snakes.colors.length - 1)\r\n            $chooserNext.className = 'disabled';\r\n\r\n        $snake.style.background = gameProps.snakes.colors[color];\r\n    }\r\n    \r\n    $chooserPrev.addEventListener('click', e => {\r\n        if(e.target.className.indexOf('disabled') == -1){\r\n\r\n            $chooserNext.classList.remove('disabled');\r\n\r\n            currentColor--;\r\n\r\n            changeSnakeColor(currentColor);\r\n        }\r\n    });\r\n\r\n    $chooserNext.addEventListener('click', e => {\r\n        if(e.target.className.indexOf('disabled') == -1){\r\n\r\n            $chooserPrev.classList.remove('disabled');\r\n\r\n            currentColor++;\r\n        \r\n            changeSnakeColor(currentColor);\r\n        }\r\n    });\r\n\r\n    $submitChooser.addEventListener('click', () => {\r\n\r\n        game.socket.emit('changeColor', currentColor);\r\n        this.open('main-menu');\r\n\r\n    });\r\n\r\n    $multiplayer.addEventListener('click', () => {\r\n\r\n        game.socket.emit('multiplayer');\r\n\r\n    });\r\n\r\n}","function Snake(game, id){\r\n\r\n    this.id = id;\r\n    this.idLocal = 0;\r\n\r\n    this.nickname = null;\r\n\r\n    this.body = [];\r\n    this.color = 0;\r\n\r\n    this.killed = false;\r\n\r\n    this.bodyStart = [0, 0];\r\n\r\n    game.engine.add(this);\r\n\r\n    if(game.id == this.id) new SnakeControls(this, game);\r\n\r\n    game.socket.on(`snakeUpdate-${id}`, this.update);\r\n\r\n    this.draw = () => {\r\n\r\n        if(this.killed) return;\r\n\r\n        game.ctx.fillStyle = gameProps.snakes.colors[this.color];\r\n\r\n        this.body.forEach(bodyFragment => {\r\n            game.ctx.fillRect(\r\n                bodyFragment[0] * game.tileSize,\r\n                bodyFragment[1] * game.tileSize,\r\n                game.tileSize,\r\n                game.tileSize\r\n            );\r\n        });\r\n\r\n    }\r\n\r\n}","function SnakeControls(snake, game){\r\n\r\n    //var rowMovements = [];\r\n\r\n    const pushMovement = moveTo => {\r\n        if(!moveTo) return;\r\n        game.socket.emit(`moveTo`, moveTo);\r\n    }\r\n\r\n    var $touchAreas = document.querySelector('#touch-areas');\r\n    var $touchArea = {left: $touchAreas.querySelector('#left'), right: $touchAreas.querySelector('#right')};\r\n\r\n    // Keyboard\r\n    var keyMap = (map => map ? {\r\n\r\n        directions: Object.keys(map),\r\n        keys: Object.keys(map).map(k => map[k]),\r\n\r\n        direction: function(key){\r\n            return this.directions[ this.keys.indexOf(key) ];\r\n        }\r\n\r\n    } : undefined)(gameProps.snakes.keyMaps[snake.idLocal]);\r\n\r\n    keyMap && window.addEventListener('keydown', e => pushMovement(keyMap.direction(e.key)));\r\n    \r\n    // Touch devices \r\n    let touchArea = 'all';\r\n    let touchstart = {}, touchmove = {}, sensibilityTouch = gameProps.snakes.sensibilityTouch;\r\n    const directions = [[\"left\", \"right\"], [\"up\", \"down\"]];\r\n    const orientationMap = {0: \"portrait-primary\", 180: \"portrait-secondary\", 90: \"landscape-primary\", \"-90\": \"landscape-secondary\"};\r\n\r\n    const getOrientation = () => screen.msOrientation || (screen.orientation || screen.mozOrientation || {}).type || orientationMap[window.orientation];\r\n    let orientation = getOrientation();\r\n    window.addEventListener('orientationchange', () => orientation = getOrientation());\r\n\r\n    const touchHandle = touchedArea => {\r\n\r\n        let dragged = [[], []].map((_, axis) => touchstart[touchedArea][axis] - touchmove[touchedArea][axis]);\r\n\r\n        if(isLumia){\r\n            if(orientation === \"landscape-primary\") dragged[0] = -dragged[0];\r\n            else if(orientation === \"landscape-secondary\") dragged[1] = -dragged[1];\r\n            if(orientation.indexOf('landscape') > -1) dragged.reverse();\r\n\r\n            if(orientation === \"portrait-secondary\"){\r\n                dragged[0] = -dragged[0];\r\n                dragged[1] = -dragged[1];\r\n            }\r\n        }\r\n\r\n        if(touchedArea != touchArea && touchArea != 'all') return;\r\n\r\n        let touchAxis = +(Math.abs(dragged[0]) < Math.abs(dragged[1])),\r\n            moveIndex = +(dragged[touchAxis] < 0),\r\n            direction = directions[touchAxis][moveIndex];\r\n\r\n        if(Math.abs(dragged[touchAxis]) >= sensibilityTouch){\r\n            if(direction != rowMovements.lastItem() && direction != snake.direction) pushMovement(direction);\r\n            touchstart[touchedArea] = [...touchmove[touchedArea]];\r\n        }\r\n\r\n    }\r\n\r\n    const touchPos = e => [e.changedTouches[0].pageX, e.changedTouches[0].pageY];\r\n\r\n    if(touchArea){\r\n        for (const area in $touchArea) {\r\n            $touchArea[area].addEventListener('touchstart', e => touchstart[area] = touchPos(e));\r\n            $touchArea[area].addEventListener('touchmove', e => { touchmove[area] = touchPos(e); touchHandle(area); });\r\n        }\r\n    }\r\n\r\n    document.ontouchmove = function(e){ e.preventDefault(); } // Disable page scroll\r\n\r\n}"]}