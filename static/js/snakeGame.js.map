{"version":3,"sources":["game/Engine.js","game/Food.js","game/Game.js","game/gestureViewer.js","game/helpers.js","game/interface.js","game/Snake.js","game/snakeControls.js"],"names":["_this","game","canvas","ctx","draw","i","clearRect","width","height","fn","objects","arguments","_key","runFunction","length","args","_objects$i","this","run","engine","start","performance","now","deltaTime","timestamp","min","requestAnimationFrame","add","_object","Food","id","type","push","update","object","key","beginPath","arc","position","tileSize","Math","PI","closePath","fill","Object","defineProperty","set","val","console","error","floor","socket","tiles","get","$game","newStatus","status","Game","players","Engine","interface","log","t","gestureViewer","socketEvents","value","prototype","addPlayers","parentNode","playersInTheRoom","player","addFoods","foods","gameProps","qnt","$snakes","document","querySelectorAll","resizeCanvas","map","winSize","style","window","newGame","on","data","assign","myID","_this2","playerInTheRoom","_this3","closeModal","food","arr","chooseSnake_snakeSize","emit","innerWidth","filter","Boolean","$gestureViewer","querySelector","$canvas","createElement","getContext","addEventListener","drawLine","x0","y0","x1","y1","lineWidth","playerNickname","stroke","e","idLocal","pageX","ballPoints","ballPoint","x","y","callback","touch","changedTouches","identifier","counter","pageY","setTimeout","canvasFullSize","Interface","classList","open","$interface","className","what","$welcomeText","$mainMenu","$loginForm","login","innerHTML","$inputNickname","changeSnakeColor","color","$snakeChoosers","snakes","colors","lineCap","$snakeChooser","$chooserNext","lineTo","target","indexOf","remove","currentColor","$submitChooser","$multiplayer","nickname","$player2Name","Snake","body","isLumia","fillStyle","test","navigator","userAgent","isElectron","forEach","$modal","$multiplayerMenu","$multiplayerSubmit","moveTo","snake","$touchAreas","keyMaps","directions","keys","k","pushMovement","touchstart","sensibilityTouch","$snake","0","90","getOrientation","screen","msOrientation","orientation","mozOrientation","orientationMap","touchPos","$touchArea","area","$chooserPrev","axis","touchmove","touchedArea","dragged","reverse","direction","concat","_toConsumableArray","nPlayers","$playersQtn","getAttribute","preventDefault","props","Array","arr2","from","isMobile","bodyStart","killed","arrays","_len","isNaN","b","a","arrLeng","j","itemLeng","array","item","lastItem","$inputsNumber","_loop","$decrementButton","$inputNumber","$incrementButton","Infinity","setAttribute","right","keyMap","serviceWorker","undefined"],"mappings":"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","file":"snakeGame.js","sourcesContent":["function Engine(game){\r\n\r\n    var canvas = game.ctx.canvas;\r\n\r\n    var objects = [];\r\n\r\n    const runFunction = (fn, ...args) => {\r\n\r\n        var i = objects.length;\r\n\r\n        while(i--){\r\n            if(typeof objects[i][fn] == 'function') objects[i][fn](...args);\r\n        }\r\n\r\n    }\r\n\r\n    const draw = () => {\r\n        game.ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        runFunction('draw');\r\n    }\r\n\r\n\r\n    this.run = () => {\r\n\r\n        let engine = this,\r\n            start = performance.now();\r\n\r\n        requestAnimationFrame(function run(timestamp){\r\n\r\n            let deltaTime = (timestamp - start) / 1000;\r\n            deltaTime = Math.min(1, deltaTime);\r\n\r\n            draw();\r\n\r\n            if(deltaTime >= 1) return engine.run();\r\n            requestAnimationFrame(run);\r\n\r\n        }.bind(this));\r\n\r\n    }\r\n\r\n    this.add = (object) => {\r\n        objects.push(object);\r\n        \r\n        object.update = _object => {\r\n            for (const key in _object) object[key] = _object[key];\r\n        }\r\n    }\r\n\r\n}","function Food(game, id){\r\n\r\n    this.id = id;\r\n    this.type;\r\n\r\n    this.position = [];\r\n\r\n    game.engine.add(this);\r\n\r\n    game.socket.on(`foodUpdate-${id}`, this.update);\r\n\r\n    this.draw = () => {\r\n\r\n        if(game.status != 'playing' || !this.type) return;\r\n\r\n        game.ctx.fillStyle = this.type.color;\r\n\r\n        game.ctx.beginPath();\r\n\r\n        game.ctx.arc(\r\n            this.position[0] * game.tileSize + game.tileSize / 2,\r\n            this.position[1] * game.tileSize + game.tileSize / 2,\r\n            game.tileSize / 2,\r\n            0,\r\n            Math.PI * 2\r\n        );\r\n        \r\n        game.ctx.closePath();\r\n\r\n        game.ctx.fill();\r\n\r\n    }\r\n\r\n}","function Game(canvas){\r\n\r\n    // Properties\r\n    var tileSize;\r\n    Object.defineProperty(this, 'tileSize', {\r\n        set: function(val){\r\n            if(+val) tileSize = Math.floor(+val);\r\n            else return console.error('Invalid value');\r\n            canvas.width = this.tileSize * gameProps.tiles[0];\r\n            canvas.height = this.tileSize * gameProps.tiles[1];\r\n        },\r\n        get: function(){ return tileSize; }\r\n    });\r\n\r\n    Object.defineProperty(this, 'ctx', {\r\n        value: canvas.getContext('2d'),\r\n        writable: false\r\n    });\r\n\r\n    var status, $game = canvas.parentNode;\r\n    Object.defineProperty(this, 'status', {\r\n        set: newStatus =>\r\n            $game.className = status = newStatus,\r\n        get: () => status\r\n    });\r\n\r\n    this.playersInTheRoom = [];\r\n\r\n    this.id = null;\r\n    this.players = [];\r\n    this.foods = [];\r\n\r\n    this.status = 'toStart';\r\n    this.engine = new Engine(this);\r\n    this.interface = new Interface(this);\r\n    this.socket = io();\r\n\r\n    this.socket.on('teste', t => console.log(t))\r\n\r\n    gestureViewer();\r\n\r\n    this.engine.run();\r\n\r\n    this.socketEvents();\r\n}\r\n\r\nGame.prototype.newGame = function(){\r\n\r\n    this.status = \"playing\";\r\n\r\n}\r\n\r\nGame.prototype.addPlayers = function(){\r\n\r\n    for (let i = this.playersInTheRoom.length - 1; i >= 0 ; i--) {\r\n        const playerInTheRoom = this.playersInTheRoom[i];\r\n\r\n        let player = new Snake(this, playerInTheRoom);\r\n\r\n        this.players.push(player);\r\n\r\n    }\r\n\r\n}\r\n\r\nGame.prototype.addFoods = function(){\r\n    let food = new Food(this, this.foods.length);\r\n\r\n    this.foods.push(food);\r\n\r\n    if(this.foods.length < gameProps.foods.qnt)\r\n        this.addFoods();\r\n}\r\n\r\nGame.prototype.resizeCanvas = function(){\r\n\r\n\r\n    var $snakes = document.querySelectorAll('.snake-chooser .snake');\r\n    const chooseSnake_snakeSize = () => {\r\n        for (let i = $snakes.length - 1; i >= 0; i--) {\r\n            $snakes[i].style.width = `${this.tileSize}px`;\r\n            $snakes[i].style.height = `${this.tileSize}px`;\r\n        }\r\n    }\r\n\r\n    const resizeCanvas = () => {\r\n       \r\n        let winSize = [window.innerWidth, window.innerHeight]; // X, Y\r\n        let tileSize = [0, 0].map((val, i) => winSize[i] / gameProps.tiles[i]);\r\n        this.tileSize = tileSize[tileSize[0] > tileSize[1] ? 1 : 0];\r\n\r\n        chooseSnake_snakeSize();\r\n        \r\n    }\r\n\r\n    resizeCanvas();\r\n    window.addEventListener('resize', resizeCanvas);\r\n\r\n}\r\n\r\nGame.prototype.login = function(playerNickname, callback){\r\n\r\n    this.socket.emit('login', {\r\n        playerNickname: playerNickname\r\n    });\r\n\r\n    this.socket.on('logged', data =>{\r\n\r\n        gameProps = Object.assign(gameProps, data.gameProps);\r\n\r\n        data.player.idLocal = 0;\r\n\r\n        this.id = data.myID;\r\n        this.playersInTheRoom.push(data.player);\r\n        this.playersInTheRoom = Object.assign(this.playersInTheRoom, data.playersInTheRoom);\r\n        \r\n        this.resizeCanvas();\r\n\r\n        if(typeof callback == 'function') callback(data);\r\n\r\n    });\r\n\r\n}\r\n\r\nGame.prototype.socketEvents = function(){\r\n\r\n    this.socket.on('start', () => {\r\n        \r\n        this.interface.closeModal();\r\n\r\n        this.addPlayers();\r\n        this.addFoods();\r\n        this.newGame();\r\n        \r\n        this.socket.emit('start');\r\n\r\n    });\r\n\r\n    this.socket.on('newPlayer', player =>\r\n        this.playersInTheRoom.push(player));\r\n\r\n    this.socket.on('prepare multiplayer', arr => {\r\n        for (let i = arr.length - 1; i >= 0; i--) {\r\n            const player = arr[i];\r\n            this.playersInTheRoom.push(player);\r\n        }\r\n        this.socket.emit('multiplayer');\r\n    });\r\n\r\n    this.socket.on('playersInTheRoom update', data => {\r\n        var i = data.i;\r\n        delete data.i;\r\n        this.playersInTheRoom[i] = Object.assign(this.playersInTheRoom[i], data);        \r\n    });\r\n\r\n    this.socket.on('delPlayer', i => {\r\n        delete this.playersInTheRoom[i];\r\n        this.playersInTheRoom = this.playersInTheRoom.filter(Boolean);\r\n    });\r\n\r\n}","function gestureViewer(){\r\n\r\n    var $gestureViewer = document.querySelector('#gestureViewer'),\r\n        $canvas = document.createElement('canvas'),\r\n        ctx = $canvas.getContext('2d');\r\n\r\n    $gestureViewer.appendChild($canvas);\r\n\r\n    var ballPoints = {};\r\n    var counter = 0;\r\n\r\n    const drawLine = (x0, y0, x1, y1) => {\r\n        ctx.strokeStyle = \"#7da278\";\r\n        ctx.lineCap = \"round\";\r\n\t    ctx.lineWidth = 8;\r\n        ctx.beginPath();\r\n        ctx.moveTo(x0, y0);\r\n        ctx.lineTo(x1, y1);\r\n        ctx.stroke();\r\n    }\r\n\r\n    window.addEventListener('touchstart', e => {\r\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\r\n            const touch = e.changedTouches[i];\r\n            var ballPoint = {\r\n                x: touch.pageX,\r\n                y: touch.pageY\r\n            }\r\n            ballPoints[touch.identifier || ++counter] = ballPoint;\r\n            drawLine(ballPoint.x - 1, ballPoint.y, ballPoint.x, ballPoint.y);\r\n        }\r\n    });\r\n\r\n    window.addEventListener('touchmove', e => {\r\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\r\n            const touch = e.changedTouches[i];\r\n            var ballPoint = ballPoints[touch.identifier || counter],\r\n                x = touch.pageX, y = touch.pageY;\r\n\r\n            drawLine(ballPoint.x, ballPoint.y, x, y);\r\n            ballPoint.x = x;\r\n            ballPoint.y = y;\r\n        }\r\n    });\r\n\r\n    window.addEventListener('touchend', e => {\r\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\r\n            const touch = e.changedTouches[i];\r\n            delete ballPoints[touch.identifier || counter];\r\n        }\r\n        setTimeout(() => ctx.clearRect(0, 0, $canvas.width, $canvas.height), 200);\r\n    });\r\n\r\n    const canvasFullSize = () => {\r\n        $canvas.width = window.innerWidth;\r\n        $canvas.height = window.innerHeight;\r\n    }\r\n\r\n    canvasFullSize();\r\n    window.addEventListener('resize', canvasFullSize);\r\n}","window.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\nwindow.isLumia = /Lumia/i.test(navigator.userAgent);\r\nwindow.isElectron = /Electron/i.test(navigator.userAgent);","function Interface(game){\r\n\r\n    var $interface = document.querySelector('#interface'),\r\n        $modal = $interface.querySelector('.modal'),\r\n        $loginForm = $interface.querySelector('#login form'),\r\n        $inputNickname = $loginForm.querySelector('[name=\"player_name\"]'),\r\n\r\n        $snakeChoosers = $interface.querySelectorAll('.snake-chooser'),\r\n        \r\n        $submitChooser = document.querySelector('#after-login .submit'),\r\n\r\n        $mainMenu = $interface.querySelector('#main-menu'),\r\n        $singlePlayer = $mainMenu.querySelector('#single-player'),\r\n        $multiplayer = $mainMenu.querySelector('#multiplayer'),\r\n\r\n        $multiplayerMenu = $interface.querySelector('#multiplayer-menu'),\r\n        $multiplayerSubmit = $multiplayerMenu.querySelector('.submit'),\r\n        $player2Name = $multiplayerMenu.querySelector('[name=\"player_name\"]'),\r\n        $playersQtn = $multiplayerMenu.querySelector('.input-number');\r\n\r\n    this.closeModal = () => $modal.classList.add('closed');\r\n\r\n    this.open = what => $interface.className = what;\r\n\r\n    var $welcomeText = $mainMenu.querySelector('#welcome');\r\n    $loginForm.addEventListener('submit', e => {\r\n        game.login($inputNickname.value, data => {\r\n\r\n            $welcomeText.innerHTML = `Hi, ${$inputNickname.value}`;\r\n\r\n            changeSnakeColor(0);\r\n            this.open('after-login');\r\n\r\n        });\r\n    });\r\n\r\n    $singlePlayer.addEventListener('click', e => {\r\n        game.socket.emit('single player');\r\n    });\r\n\r\n    var currentColor = 0;\r\n    const changeSnakeColor = color => {\r\n\r\n        for (let i = $snakeChoosers.length - 1; i >= 0; i--) {\r\n            const $snakeChooser = $snakeChoosers[i];\r\n            \r\n            let $chooserPrev = $snakeChooser.querySelector('.chooser-prev'),\r\n                $chooserNext = $snakeChooser.querySelector('.chooser-next'),\r\n                $snake = $snakeChooser.querySelector('.snake');\r\n\r\n            if(currentColor == 0)\r\n                $chooserPrev.classList.add('disabled');\r\n\r\n            if(currentColor == gameProps.snakes.colors.length - 1)\r\n                $chooserNext.classList.add('disabled');\r\n\r\n            $snake.style.background = gameProps.snakes.colors[color];\r\n        }\r\n    }\r\n\r\n    for (let i = $snakeChoosers.length - 1; i >= 0; i--) {\r\n        const $snakeChooser = $snakeChoosers[i];\r\n        \r\n        let $chooserPrev = $snakeChooser.querySelector('.chooser-prev'),\r\n            $chooserNext = $snakeChooser.querySelector('.chooser-next');\r\n\r\n        $chooserPrev.addEventListener('click', e => {\r\n            if(e.target.className.indexOf('disabled') == -1){\r\n    \r\n                $chooserNext.classList.remove('disabled');\r\n    \r\n                currentColor--;\r\n    \r\n                changeSnakeColor(currentColor);\r\n            }\r\n        });\r\n    \r\n        $chooserNext.addEventListener('click', e => {\r\n            if(e.target.className.indexOf('disabled') == -1){\r\n    \r\n                $chooserPrev.classList.remove('disabled');\r\n    \r\n                currentColor++;\r\n            \r\n                changeSnakeColor(currentColor);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    $submitChooser.addEventListener('click', () => {\r\n\r\n        game.socket.emit('changeColor', currentColor);\r\n        this.open('main-menu');\r\n\r\n    });\r\n\r\n    $multiplayer.addEventListener('click', () => {\r\n\r\n        this.open('multiplayer-menu');\r\n\r\n    });\r\n\r\n    $multiplayerSubmit.addEventListener('click', () => {\r\n        game.socket.emit('prepare multiplayer', {\r\n            nickname: $player2Name.value,\r\n            color: currentColor,\r\n            nPlayers: $playersQtn.getAttribute('data-value')\r\n        });\r\n    });\r\n\r\n}","function Snake(game, props){\r\n\r\n    this.id = null;\r\n    this.idLocal = null;\r\n    this.nickname = null;\r\n    this.body = [];\r\n    this.color = 0;\r\n    this.bodyStart = [0, 0];\r\n\r\n    this.merge(props);\r\n\r\n    this.killed = false;\r\n\r\n    game.engine.add(this);\r\n\r\n    if(!isNaN(this.idLocal)) new SnakeControls(this, game);\r\n\r\n    console.log(`snakeUpdate-${this.id}`);\r\n    game.socket.on(`snakeUpdate-${this.id}`, this.update);\r\n\r\n    this.draw = () => {\r\n\r\n        if(this.killed) return;\r\n\r\n        game.ctx.fillStyle = gameProps.snakes.colors[this.color];\r\n\r\n        this.body.forEach(bodyFragment => {\r\n            game.ctx.fillRect(\r\n                bodyFragment[0] * game.tileSize,\r\n                bodyFragment[1] * game.tileSize,\r\n                game.tileSize,\r\n                game.tileSize\r\n            );\r\n        });\r\n\r\n    }\r\n\r\n}","function SnakeControls(snake, game){\r\n\r\n    const pushMovement = moveTo => {\r\n        if(!moveTo) return;\r\n        console.log({\r\n            id: snake.id,\r\n            moveTo: moveTo\r\n        });\r\n        game.socket.emit(`moveTo`, {\r\n            id: snake.id,\r\n            moveTo: moveTo\r\n        });\r\n    }\r\n\r\n    var $touchAreas = document.querySelector('#touch-areas');\r\n    var $touchArea = {left: $touchAreas.querySelector('#left'), right: $touchAreas.querySelector('#right')};\r\n\r\n    // Keyboard\r\n    var keyMap = (map => map ? {\r\n\r\n        directions: Object.keys(map),\r\n        keys: Object.keys(map).map(k => map[k]),\r\n\r\n        direction: function(key){\r\n            return this.directions[ this.keys.indexOf(key) ];\r\n        }\r\n\r\n    } : undefined)(gameProps.snakes.keyMaps[snake.idLocal]);\r\n\r\n    keyMap && window.addEventListener('keydown', e => pushMovement(keyMap.direction(e.key)));\r\n\r\n    // Touch devices \r\n    let touchArea = 'all';\r\n    let touchstart = {}, touchmove = {}, sensibilityTouch = gameProps.snakes.sensibilityTouch;\r\n    const directions = [[\"left\", \"right\"], [\"up\", \"down\"]];\r\n    const orientationMap = {0: \"portrait-primary\", 180: \"portrait-secondary\", 90: \"landscape-primary\", \"-90\": \"landscape-secondary\"};\r\n\r\n    const getOrientation = () => screen.msOrientation || (screen.orientation || screen.mozOrientation || {}).type || orientationMap[window.orientation];\r\n    let orientation = getOrientation();\r\n    window.addEventListener('orientationchange', () => orientation = getOrientation());\r\n    \r\n    const touchHandle = touchedArea => {\r\n\r\n        let dragged = [[], []].map((_, axis) => touchstart[touchedArea][axis] - touchmove[touchedArea][axis]);\r\n\r\n        if(isLumia){\r\n            if(orientation === \"landscape-primary\") dragged[0] = -dragged[0];\r\n            else if(orientation === \"landscape-secondary\") dragged[1] = -dragged[1];\r\n            if(orientation.indexOf('landscape') > -1) dragged.reverse();\r\n\r\n            if(orientation === \"portrait-secondary\"){\r\n                dragged[0] = -dragged[0];\r\n                dragged[1] = -dragged[1];\r\n            }\r\n        }\r\n\r\n        if(touchedArea != touchArea && touchArea != 'all') return;\r\n\r\n        let touchAxis = +(Math.abs(dragged[0]) < Math.abs(dragged[1])),\r\n            moveIndex = +(dragged[touchAxis] < 0),\r\n            direction = directions[touchAxis][moveIndex];\r\n\r\n        if(Math.abs(dragged[touchAxis]) >= sensibilityTouch){\r\n            if(direction != rowMovements.lastItem() && direction != snake.direction) pushMovement(direction);\r\n            touchstart[touchedArea] = [...touchmove[touchedArea]];\r\n        }\r\n\r\n    }\r\n\r\n    const touchPos = e => [e.changedTouches[0].pageX, e.changedTouches[0].pageY];\r\n\r\n    if(touchArea){\r\n        const $touchAreaKeys = Object.keys($touchArea);\r\n        for (let i = $touchAreaKeys.length - 1; i >=0 ; i--) {\r\n            const area = $touchAreaKeys[i];\r\n            $touchArea[area].addEventListener('touchstart', e => touchstart[area] = touchPos(e));\r\n            $touchArea[area].addEventListener('touchmove', e => { touchmove[area] = touchPos(e); touchHandle(area); });\r\n        }\r\n    }\r\n\r\n    document.ontouchmove = function(e){ e.preventDefault(); } // Disable page scroll\r\n\r\n}"]}