{"version":3,"sources":["game/Engine.js","game/Food.js","game/Game.js","game/gameProps.js","game/gameRules.js","game/gestureViewer.js","game/helpers.js","game/interface.js","game/Snake.js","game/snakeControls.js"],"names":["_this","game","canvas","ctx","draw","i","clearRect","width","height","fn","objects","arguments","_key","runFunction","length","args","_objects$i","this","run","engine","start","performance","now","deltaTime","timestamp","min","requestAnimationFrame","add","_object","Food","id","type","push","update","object","key","beginPath","arc","position","tileSize","Math","PI","closePath","fill","Object","defineProperty","set","val","console","error","floor","socket","tiles","get","$game","newStatus","status","Game","players","Engine","interface","log","t","gestureViewer","socketEvents","value","prototype","for","parentNode","addPlayers","playersInTheRoom","playerInTheRoom","player","assign","Snake","playerProps","food","foods","gameProps","qnt","resizeCanvas","map","winSize","login","playerNickname","callback","newGame","data","_this2","myID","on","_this3","closeModal","gameRules","index","window","innerWidth","otherPlayer","otherID","killed","_index","body","collided","head","isEqual","$gestureViewer","appendChild","$canvas","counter","strokeStyle","lineCap","addFoods","lineWidth","moveTo","emit","lineTo","x1","y1","addEventListener","e","changedTouches","touch","y","pageY","x","ballPoint","snakeColision","ballPoints","identifier","pageX","canvasFullSize","Interface","$interface","document","querySelector","$modal","$loginForm","$inputNickname","$mainMenu","$singlePlayer","$welcomeText","nickname","create","snakeAteFood","increase","snakes","colors","idLocal","fillRect","bodyFragment","arr","arr2","Array","from","SnakeControls","pushMovement","drawLine","$touchArea","left","$touchAreas","keyMap","keys","k","directions","indexOf","undefined","setTimeout","touchmove","sensibilityTouch","orientationMap","0","getOrientation","_loop","area","touchPos","touchedArea","isLumia","test","navigator","userAgent","isElectron","touchstart","axis","abs","dragged","moveIndex","touchAxis","direction","openMainMenu","innerHTML","snake","concat","_toConsumableArray","bodyStart","stringify","JSON","sumWith","fillStyle","arrays","forEach","sort","a","b","newArray","j","then","catch"],"mappings":"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","file":"snakeGame.js","sourcesContent":["function Engine(game){\r\n\r\n    var canvas = game.ctx.canvas;\r\n\r\n    var objects = [];\r\n\r\n    const runFunction = (fn, ...args) => {\r\n\r\n        var i = objects.length;\r\n\r\n        while(i--){\r\n            if(typeof objects[i][fn] == 'function') objects[i][fn](...args);\r\n        }\r\n\r\n    }\r\n\r\n    const draw = () => {\r\n        game.ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        runFunction('draw');\r\n    }\r\n\r\n\r\n    this.run = () => {\r\n\r\n        let engine = this,\r\n            start = performance.now();\r\n\r\n        requestAnimationFrame(function run(timestamp){\r\n\r\n            let deltaTime = (timestamp - start) / 1000;\r\n            deltaTime = Math.min(1, deltaTime);\r\n\r\n            draw();\r\n\r\n            if(deltaTime >= 1) return engine.run();\r\n            requestAnimationFrame(run);\r\n\r\n        }.bind(this));\r\n\r\n    }\r\n\r\n    this.add = (object) => {\r\n        objects.push(object);\r\n        \r\n        object.update = _object => {\r\n            for (const key in _object) object[key] = _object[key];\r\n        }\r\n    }\r\n\r\n}","function Food(game, id){\r\n\r\n    this.id = id;\r\n    this.type;\r\n\r\n    this.position = [];\r\n\r\n    game.engine.add(this);\r\n\r\n    game.socket.on(`foodUpdate-${id}`, this.update);\r\n\r\n    this.draw = () => {\r\n\r\n        if(game.status != 'playing' || !this.type) return;\r\n\r\n        game.ctx.fillStyle = this.type.color;\r\n\r\n        game.ctx.beginPath();\r\n\r\n        game.ctx.arc(\r\n            this.position[0] * game.tileSize + game.tileSize / 2,\r\n            this.position[1] * game.tileSize + game.tileSize / 2,\r\n            game.tileSize / 2,\r\n            0,\r\n            Math.PI * 2\r\n        );\r\n        \r\n        game.ctx.closePath();\r\n\r\n        game.ctx.fill();\r\n\r\n    }\r\n\r\n}","function Game(canvas){\r\n\r\n    // Properties\r\n    var tileSize;\r\n    Object.defineProperty(this, 'tileSize', {\r\n        set: function(val){\r\n            if(+val) tileSize = Math.floor(+val);\r\n            else return console.error('Invalid value');\r\n            canvas.width = this.tileSize * gameProps.tiles[0];\r\n            canvas.height = this.tileSize * gameProps.tiles[1];\r\n        },\r\n        get: function(){ return tileSize; }\r\n    });\r\n\r\n    Object.defineProperty(this, 'ctx', {\r\n        value: canvas.getContext('2d'),\r\n        writable: false\r\n    });\r\n\r\n    var status, $game = canvas.parentNode;\r\n    Object.defineProperty(this, 'status', {\r\n        set: newStatus =>\r\n            $game.className = status = newStatus,\r\n        get: () => status\r\n    });\r\n\r\n    this.playersInTheRoom = [];\r\n\r\n    this.id = null;\r\n    this.players = [];\r\n    this.foods = [];\r\n\r\n    this.status = 'toStart';\r\n    this.engine = new Engine(this);\r\n    this.interface = new Interface(this);\r\n    this.socket = io();\r\n\r\n    this.socket.on('teste', t => console.log(t))\r\n\r\n    gestureViewer();\r\n\r\n    this.engine.run();\r\n\r\n    this.socketEvents();\r\n}\r\n\r\nGame.prototype.newGame = function(){\r\n\r\n    this.status = \"playing\";\r\n\r\n    // this.for('foods', food => {\r\n    //     food.create();\r\n    // });\r\n\r\n}\r\n\r\nGame.prototype.for = function(object, fn){\r\n    for (let id = this[object].length-1; id >= 0; id--)\r\n        fn(this[object][id], id);\r\n}\r\n\r\nGame.prototype.addPlayers = function(){\r\n\r\n    for (let i = this.playersInTheRoom.length - 1; i >= 0 ; i--) {\r\n        const playerInTheRoom = this.playersInTheRoom[i];\r\n\r\n        let player = Object.assign(new Snake(this, playerInTheRoom.id), playerInTheRoom.playerProps);\r\n\r\n        this.players.push(player);\r\n\r\n    }\r\n\r\n}\r\n\r\nGame.prototype.addFoods = function(){\r\n    let food = new Food(this, this.foods.length);\r\n\r\n    this.foods.push(food);\r\n\r\n    if(this.foods.length < gameProps.foods.qnt)\r\n        this.addFoods();\r\n}\r\n\r\nGame.prototype.resizeCanvas = function(){\r\n\r\n    const resizeCanvas = () => {\r\n       \r\n        let winSize = [window.innerWidth, window.innerHeight]; // X, Y\r\n        let tileSize = [0, 0].map((val, i) => winSize[i] / gameProps.tiles[i]);\r\n        this.tileSize = tileSize[tileSize[0] > tileSize[1] ? 1 : 0];\r\n        \r\n    }\r\n\r\n    resizeCanvas();\r\n    window.addEventListener('resize', resizeCanvas);\r\n\r\n}\r\n\r\nGame.prototype.login = function(playerNickname, callback){\r\n\r\n    this.socket.emit('login', {\r\n        playerNickname: playerNickname\r\n    });\r\n\r\n    this.socket.on('logged', data =>{\r\n\r\n        if(typeof callback == 'function') callback(data);\r\n\r\n        gameProps = Object.assign(gameProps, data.gameProps);\r\n\r\n        this.id = data.myID;\r\n        this.playersInTheRoom = data.players;\r\n\r\n        this.resizeCanvas();\r\n\r\n    });\r\n\r\n}\r\n\r\nGame.prototype.socketEvents = function(){\r\n\r\n    this.socket.on('start', () => {\r\n\r\n        this.interface.closeModal();\r\n\r\n        this.addPlayers();\r\n        this.addFoods();\r\n        this.newGame();\r\n        \r\n        this.socket.emit('start');\r\n    });\r\n\r\n    this.socket.on('newPlayer', player =>\r\n        this.playersInTheRoom.push(player));\r\n\r\n}","var gameProps = {}","function gameRules(game){\r\n\r\n    game.engine.add(this);\r\n\r\n    const snakeColision = () => {\r\n\r\n        game.for('players', (player, id) => {\r\n\r\n            if(player.killed) return;\r\n\r\n            let playerHead = player.head; // For performance. Accessing an object several times is heavy\r\n\r\n            // player.body.every((bodyFragment, index) => {\r\n            //     player.collided = index > 0 && bodyFragment.isEqual(playerHead);\r\n            //     console.log(index, bodyFragment.isEqual(playerHead));\r\n            //     if(player.collided) return; // Break the loop\r\n            // });\r\n\r\n            for (let index = player.body.length - 1; index >= 0; index--) {\r\n\r\n                if(index > 0 && player.body[index].isEqual(playerHead))\r\n                    return player.collided = true;\r\n\r\n            }\r\n\r\n            !player.collided && game.for('players', (otherPlayer, otherID) => {\r\n\r\n                if(id == otherID || otherPlayer.killed) return;\r\n\r\n                for (let index = otherPlayer.body.length - 1; index >= 0; index--) {\r\n\r\n                    if(otherPlayer.body[index].isEqual(playerHead))\r\n                        return player.collided = true;\r\n\r\n                }\r\n\r\n            });\r\n\r\n        });\r\n\r\n        game.for('players', player => player.killed = player.collided); // Kill the player if collided\r\n    \r\n    }\r\n\r\n    const snakeAteFood = () => {\r\n        game.for('foods', food => {\r\n            game.for('players', player => {\r\n                if(player.head.isEqual(food.position)){\r\n                    player.increase++;\r\n                    food.create();\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    this.update = () => {\r\n\r\n        if(game.status != 'playing') return;\r\n\r\n        snakeColision();\r\n        snakeAteFood();\r\n\r\n    }\r\n\r\n}","function gestureViewer(){\r\n\r\n    var $gestureViewer = document.querySelector('#gestureViewer'),\r\n        $canvas = document.createElement('canvas'),\r\n        ctx = $canvas.getContext('2d');\r\n\r\n    $gestureViewer.appendChild($canvas);\r\n\r\n    var ballPoints = {};\r\n    var counter = 0;\r\n\r\n    const drawLine = (x0, y0, x1, y1) => {\r\n        ctx.strokeStyle = \"#7da278\";\r\n        ctx.lineCap = \"round\";\r\n\t    ctx.lineWidth = 8;\r\n        ctx.beginPath();\r\n        ctx.moveTo(x0, y0);\r\n        ctx.lineTo(x1, y1);\r\n        ctx.stroke();\r\n    }\r\n\r\n    window.addEventListener('touchstart', e => {\r\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\r\n            const touch = e.changedTouches[i];\r\n            var ballPoint = {\r\n                x: touch.pageX,\r\n                y: touch.pageY\r\n            }\r\n            ballPoints[touch.identifier || ++counter] = ballPoint;\r\n            drawLine(ballPoint.x - 1, ballPoint.y, ballPoint.x, ballPoint.y);\r\n        }\r\n    });\r\n\r\n    window.addEventListener('touchmove', e => {\r\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\r\n            const touch = e.changedTouches[i];\r\n            var ballPoint = ballPoints[touch.identifier || counter],\r\n                x = touch.pageX, y = touch.pageY;\r\n\r\n            drawLine(ballPoint.x, ballPoint.y, x, y);\r\n            ballPoint.x = x;\r\n            ballPoint.y = y;\r\n        }\r\n    });\r\n\r\n    window.addEventListener('touchend', e => {\r\n        for(let i = e.changedTouches.length - 1; i >= 0; i--){\r\n            const touch = e.changedTouches[i];\r\n            delete ballPoints[touch.identifier || counter];\r\n        }\r\n        setTimeout(() => ctx.clearRect(0, 0, $canvas.width, $canvas.height), 200);\r\n    });\r\n\r\n    const canvasFullSize = () => {\r\n        $canvas.width = window.innerWidth;\r\n        $canvas.height = window.innerHeight;\r\n    }\r\n\r\n    canvasFullSize();\r\n    window.addEventListener('resize', canvasFullSize);\r\n}","window.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\nwindow.isLumia = /Lumia/i.test(navigator.userAgent);\r\nwindow.isElectron = /Electron/i.test(navigator.userAgent);","function Interface(game){\r\n\r\n    var $interface = document.querySelector('#interface'),\r\n        $modal = $interface.querySelector('.modal'),\r\n        $loginForm = $interface.querySelector('#login form'),\r\n        $inputNickname = $loginForm.querySelector('[name=\"player_name\"]'),\r\n        $mainMenu = $interface.querySelector('#main-menu'),\r\n        \r\n        $singlePlayer = $mainMenu.querySelector('#single-player');\r\n\r\n    this.closeModal = () => {\r\n        $modal.classList.add('closed');\r\n    }\r\n\r\n    var $welcomeText = $mainMenu.querySelector('#welcome');\r\n    const openMainMenu = nickname => {\r\n        $welcomeText.innerHTML = `Hi, ${nickname}`;\r\n        $interface.className = 'main-menu';\r\n    }\r\n\r\n    $loginForm.addEventListener('submit', e => {\r\n        game.login($inputNickname.value, data => {\r\n            console.log(data);\r\n            openMainMenu($inputNickname.value);\r\n        });\r\n    });\r\n\r\n    $singlePlayer.addEventListener('click', e => {\r\n        game.socket.emit('single player');\r\n    });\r\n\r\n}","function Snake(game, id){\r\n\r\n    this.id = id;\r\n    this.idLocal = 0;\r\n\r\n    this.body = [];\r\n\r\n    this.increase = 0;\r\n\r\n    this.killed = false;\r\n\r\n    this.bodyStart = [0, 0];\r\n\r\n    game.engine.add(this);\r\n\r\n    if(game.id == this.id) new SnakeControls(this, game);\r\n\r\n    game.socket.on(`snakeUpdate-${id}`, this.update);\r\n\r\n    this.draw = () => {\r\n\r\n        if(this.killed) return;\r\n\r\n        game.ctx.fillStyle = gameProps.snakes.colors[this.idLocal];\r\n\r\n        this.body.forEach(bodyFragment => {\r\n            game.ctx.fillRect(\r\n                bodyFragment[0] * game.tileSize,\r\n                bodyFragment[1] * game.tileSize,\r\n                game.tileSize,\r\n                game.tileSize\r\n            );\r\n        });\r\n\r\n    }\r\n\r\n}","function SnakeControls(snake, game){\r\n\r\n    //var rowMovements = [];\r\n\r\n    const pushMovement = moveTo => {\r\n        if(!moveTo) return;\r\n        game.socket.emit(`moveTo`, moveTo);\r\n    }\r\n\r\n    var $touchAreas = document.querySelector('#touch-areas');\r\n    var $touchArea = {left: $touchAreas.querySelector('#left'), right: $touchAreas.querySelector('#right')};\r\n\r\n    // Keyboard\r\n    var keyMap = (map => map ? {\r\n\r\n        directions: Object.keys(map),\r\n        keys: Object.keys(map).map(k => map[k]),\r\n\r\n        direction: function(key){\r\n            return this.directions[ this.keys.indexOf(key) ];\r\n        }\r\n\r\n    } : undefined)(gameProps.snakes.keyMaps[snake.idLocal]);\r\n\r\n    keyMap && window.addEventListener('keydown', e => pushMovement(keyMap.direction(e.key)));\r\n    \r\n    // Touch devices \r\n    let touchArea = 'all';\r\n    let touchstart = {}, touchmove = {}, sensibilityTouch = gameProps.snakes.sensibilityTouch;\r\n    const directions = [[\"left\", \"right\"], [\"up\", \"down\"]];\r\n    const orientationMap = {0: \"portrait-primary\", 180: \"portrait-secondary\", 90: \"landscape-primary\", \"-90\": \"landscape-secondary\"};\r\n\r\n    const getOrientation = () => screen.msOrientation || (screen.orientation || screen.mozOrientation || {}).type || orientationMap[window.orientation];\r\n    let orientation = getOrientation();\r\n    window.addEventListener('orientationchange', () => orientation = getOrientation());\r\n\r\n    const touchHandle = touchedArea => {\r\n\r\n        let dragged = [[], []].map((_, axis) => touchstart[touchedArea][axis] - touchmove[touchedArea][axis]);\r\n\r\n        if(isLumia){\r\n            if(orientation === \"landscape-primary\") dragged[0] = -dragged[0];\r\n            else if(orientation === \"landscape-secondary\") dragged[1] = -dragged[1];\r\n            if(orientation.indexOf('landscape') > -1) dragged.reverse();\r\n\r\n            if(orientation === \"portrait-secondary\"){\r\n                dragged[0] = -dragged[0];\r\n                dragged[1] = -dragged[1];\r\n            }\r\n        }\r\n\r\n        if(touchedArea != touchArea && touchArea != 'all') return;\r\n\r\n        let touchAxis = +(Math.abs(dragged[0]) < Math.abs(dragged[1])),\r\n            moveIndex = +(dragged[touchAxis] < 0),\r\n            direction = directions[touchAxis][moveIndex];\r\n\r\n        if(Math.abs(dragged[touchAxis]) >= sensibilityTouch){\r\n            if(direction != rowMovements.lastItem() && direction != snake.direction) pushMovement(direction);\r\n            touchstart[touchedArea] = [...touchmove[touchedArea]];\r\n        }\r\n\r\n    }\r\n\r\n    const touchPos = e => [e.changedTouches[0].pageX, e.changedTouches[0].pageY];\r\n\r\n    if(touchArea){\r\n        for (const area in $touchArea) {\r\n            $touchArea[area].addEventListener('touchstart', e => touchstart[area] = touchPos(e));\r\n            $touchArea[area].addEventListener('touchmove', e => { touchmove[area] = touchPos(e); touchHandle(area); });\r\n        }\r\n    }\r\n\r\n    document.ontouchmove = function(e){ e.preventDefault(); } // Disable page scroll\r\n\r\n}"]}