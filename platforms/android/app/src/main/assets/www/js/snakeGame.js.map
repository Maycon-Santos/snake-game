{"version":3,"sources":["Engine.js","Food.js","Game.js","gameProps.js","gameRules.js","Snake.js","SnakeControls.js","ultils/Array.js"],"names":["Engine","game","_this","this","canvas","ctx","objects","runFunction","fn","_len","arguments","length","args","Array","_key","i","_objects$i","apply","run","engine","start","performance","now","requestAnimationFrame","timestamp","deltaTime","Math","min","clearRect","width","height","bind","add","object","push","Food","type","foodTypes","key","position","gameProps","foods","types","foodType","chance","create","selectFood","round","random","map","_","axis","tiles","update","draw","fillStyle","color","beginPath","arc","tileSize","PI","closePath","fill","Game","Object","defineProperty","set","val","console","error","floor","get","value","getContext","writable","players","gameRules","addPlayers","addFoods","newGame","resizeCanvas","prototype","for","food","player","newBody","id","Snake","snakes","qnt","speed","initialSize","bodyStart","initialDirection","reverse","winSize","window","innerWidth","innerHeight","addEventListener","keyMap","left","right","up","down","touchMap","normal","freezer","superSpeed","killed","playerHead","head","index","body","isEqual","collided","otherPlayer","otherID","increase","playerProps","directionMap","direction","to","directions","keys","oldDirection","includes","nextPos","tailDirection","defineProperties","tail","penultBodyFragment","snakeControls","SnakeControls","progressMove","abs","progress","currentMovement","pop","splice","forEach","bodyFragment","fillRect","snake","_keysMap","_touchMap","values","orientation","rowMovements","getOrientation","e","indexOf","changedTouches","screenX","screenY","moved","lastMoved","touch","screen","dragged","from","newPos","arr","JSON","stringify","sumWith","arrays","concat","_toConsumableArray","sort","a","b","newArray","arrLeng","array","j","itemLeng","item"],"mappings":"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","file":"snakeGame.js","sourcesContent":["function Engine(game){\r\n\r\n    var canvas = game.ctx.canvas;\r\n\r\n    var objects = [];\r\n\r\n    const runFunction = (fn, ...args) => {\r\n\r\n        var i = objects.length;\r\n\r\n        while(i--){\r\n            if(typeof objects[i][fn] == 'function') objects[i][fn](...args);\r\n        }\r\n\r\n    }\r\n\r\n    const update = (deltaTime) => runFunction('update', deltaTime);\r\n\r\n    const draw = () => {\r\n        game.ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        runFunction('draw');\r\n    }\r\n\r\n\r\n    this.run = () => {\r\n\r\n        let engine = this,\r\n            start = performance.now();\r\n\r\n        requestAnimationFrame(function run(timestamp){\r\n\r\n            let deltaTime = (timestamp - start) / 1000;\r\n            deltaTime = Math.min(1, deltaTime);\r\n\r\n            update(deltaTime);\r\n            draw();\r\n\r\n            if(deltaTime >= 1) return engine.run();\r\n            requestAnimationFrame(run);\r\n\r\n        }.bind(this));\r\n\r\n    }\r\n\r\n    this.add = (object) => objects.push(object);\r\n\r\n}","function Food(game){\r\n\r\n    var foodTypes = [], type;\r\n\r\n    this.position = [];\r\n\r\n    for (const key in gameProps.foods.types) {\r\n        const foodType = gameProps.foods.types[key],\r\n              chance = foodType.chance;\r\n\r\n        for (let i = 0; i < chance; i++) foodTypes.push(foodType);\r\n    }\r\n\r\n    this.create = function(){\r\n\r\n        const selectFood = Math.round(Math.random() * (foodTypes.length - 1));\r\n\r\n        type = foodTypes[selectFood];\r\n\r\n        this.position = [[], []].map((_, axis) => Math.round(Math.random() * (gameProps.tiles[axis] - 1)));\r\n    \r\n    }\r\n\r\n    this.update = () => {\r\n    }\r\n\r\n    this.draw = () => {\r\n\r\n        game.ctx.fillStyle = type.color;\r\n\r\n        game.ctx.beginPath();\r\n\r\n        game.ctx.arc(\r\n            this.position[0] * game.tileSize + game.tileSize / 2,\r\n            this.position[1] * game.tileSize + game.tileSize / 2,\r\n            game.tileSize / 2,\r\n            0,\r\n            Math.PI * 2\r\n        );\r\n        \r\n        game.ctx.closePath();\r\n\r\n        game.ctx.fill();\r\n\r\n    }\r\n\r\n}","function Game(canvas){\r\n\r\n    // Properties\r\n    var tileSize;\r\n    Object.defineProperty(this, 'tileSize', {\r\n        set: function(val){\r\n            if(+val) tileSize = Math.floor(+val);\r\n            else return console.error('Invalid value');\r\n            canvas.width = this.tileSize * gameProps.tiles[0];\r\n            canvas.height = this.tileSize * gameProps.tiles[1];\r\n        },\r\n        get: function(){ return tileSize; }\r\n    });\r\n\r\n    Object.defineProperty(this, 'ctx', {\r\n        value: canvas.getContext('2d'),\r\n        writable: false\r\n    });\r\n\r\n    this.players = [];\r\n    this.foods = [];\r\n\r\n    this.engine = new Engine(this);\r\n    this.engine.add(this);\r\n\r\n    new gameRules(this);\r\n\r\n    this.addPlayers();\r\n    this.addFoods();\r\n\r\n    this.newGame();\r\n\r\n    this.resizeCanvas();\r\n    this.engine.run();\r\n\r\n}\r\n\r\nGame.prototype.newGame = function(){\r\n\r\n    this.for('foods', food => {\r\n        food.create();\r\n    });\r\n\r\n    this.for('players', player => {\r\n        player.newBody();\r\n    });\r\n\r\n}\r\n\r\nGame.prototype.for = function(object, fn){\r\n    for (let id = this[object].length-1; id >= 0; id--)\r\n        fn(this[object][id], id);\r\n}\r\n\r\nGame.prototype.addPlayers = function(){\r\n\r\n    let player = new Snake(this, this.players.length);\r\n\r\n    this.players.push(player);\r\n\r\n    if(this.players.length < gameProps.snakes.players.length)\r\n        this.addPlayers();\r\n\r\n}\r\n\r\nGame.prototype.addFoods = function(){\r\n    let food = new Food(this);\r\n\r\n    this.engine.add(food);\r\n    this.foods.push(food);\r\n\r\n    if(this.foods.length < gameProps.foods.qnt)\r\n        this.addFoods();\r\n}\r\n\r\nGame.prototype.resizeCanvas = function(){\r\n\r\n    const resizeCanvas = () => {\r\n       \r\n        let winSize = [window.innerWidth, window.innerHeight]; // X, Y\r\n        let tileSize = [0, 0].map((val, i) => winSize[i] / gameProps.tiles[i]);\r\n        this.tileSize = tileSize[tileSize[0] > tileSize[1] ? 1 : 0];\r\n        \r\n    }\r\n\r\n    resizeCanvas();\r\n    window.addEventListener('resize', resizeCanvas);\r\n\r\n}","var gameProps = {\r\n    tiles: [64, 36], // X, Y\r\n\r\n    snakes: {\r\n        speed: 15,\r\n        initialSize: 3,\r\n        bodyStart: [7, 4, \"left\"],\r\n        initialDirection: \"right\",\r\n        reverse: false,\r\n\r\n        players: [\r\n            {\r\n                color: \"#000000\",\r\n                bodyStart: [60, 30, 'down'],\r\n                initialDirection: 'left',\r\n                keyMap: {left: \"ArrowLeft\", right: \"ArrowRight\", up: \"ArrowUp\", down: \"ArrowDown\"},\r\n                touchMap: {left: \"swipeLeft\", right: \"swipeRight\", up: \"swipeUp\", down: \"swipeDown\"}\r\n            },\r\n            {\r\n                color: \"#ff0000\",\r\n                bodyStart: [6, 6, 'left'],\r\n                keyMap: {left: \"a\", right: \"d\", up: \"w\", down: \"s\"}\r\n            },\r\n            {\r\n                color: \"#00ff00\",\r\n                bodyStart: [7, 8, 'left'],\r\n                keyMap: {left: \"j\", right: \"l\", up: \"i\", down: \"k\"}\r\n            }\r\n        ]\r\n    },\r\n\r\n    foods: {\r\n        qnt: 1,\r\n\r\n        types: {\r\n            normal: {\r\n                chance: 5,\r\n                color: '#FFE400'\r\n            },\r\n\r\n            freezer: {\r\n                chance: 0,\r\n                color: '#008F30'\r\n            },\r\n\r\n            superSpeed: {\r\n                chance: 0,\r\n                color: '#008F30'\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}","function gameRules(game){\r\n\r\n    game.engine.add(this);\r\n\r\n    const snakeColision = () => {\r\n\r\n        game.for('players', (player, id) => {\r\n\r\n            if(player.killed) return;\r\n\r\n            let playerHead = player.head; // For performance. Accessing an object several times is heavy\r\n\r\n            // player.body.every((bodyFragment, index) => {\r\n            //     player.collided = index > 0 && bodyFragment.isEqual(playerHead);\r\n            //     console.log(index, bodyFragment.isEqual(playerHead));\r\n            //     if(player.collided) return; // Break the loop\r\n            // });\r\n\r\n            for (let index = player.body.length - 1; index >= 0; index--) {\r\n\r\n                if(index > 0 && player.body[index].isEqual(playerHead))\r\n                    return player.collided = true;\r\n\r\n            }\r\n\r\n            !player.collided && game.for('players', (otherPlayer, otherID) => {\r\n\r\n                if(id == otherID || otherPlayer.killed) return;\r\n\r\n                for (let index = otherPlayer.body.length - 1; index >= 0; index--) {\r\n\r\n                    if(otherPlayer.body[index].isEqual(playerHead))\r\n                        return player.collided = true;\r\n\r\n                }\r\n\r\n            });\r\n\r\n        });\r\n\r\n        game.for('players', player => player.killed = player.collided); // Kill the player if collided\r\n    \r\n    }\r\n\r\n    const snakeAteFood = () => {\r\n        game.for('foods', food => {\r\n            game.for('players', player => {\r\n                if(player.head.isEqual(food.position)){\r\n                    player.increase++;\r\n                    food.create();\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    this.update = () => {\r\n\r\n        snakeColision();\r\n        snakeAteFood();\r\n\r\n    }\r\n\r\n}","function Snake(game, id){\r\n\r\n    this.id = id;\r\n    this.body = [];\r\n\r\n    this.increase = 0;\r\n    this.collided = false;\r\n    this.killed = false;\r\n\r\n    this.playerProps = gameProps.snakes.players[id];\r\n\r\n    var directionMap = {\r\n        'left': [-1, 0],\r\n        'right': [1, 0],\r\n        'up': [0, -1],\r\n        'down': [0, 1]\r\n    }\r\n\r\n    var direction = this.playerProps.initialDirection || gameProps.snakes.initialDirection;\r\n    Object.defineProperty(this, 'direction', {\r\n        get: () => direction,\r\n        set: (to) => {\r\n\r\n            let directions = Object.keys(directionMap), // X, Y\r\n                oldDirection = direction,\r\n                reverse = this.playerProps.reverse || gameProps.snakes.reverse;\r\n\r\n            if(directions.includes(to)) direction = to;\r\n\r\n            if(nextPos().isEqual(this.body[1])){\r\n\r\n                if(!reverse) direction = oldDirection;\r\n                else{\r\n                    direction = this.tailDirection;\r\n                    this.body.reverse();\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n    });\r\n\r\n    Object.defineProperties(this, {\r\n        head: { get: () => this.body[0] },\r\n        tail: { get: () => this.body[this.body.length - 1]},\r\n        tailDirection: {\r\n            get: () => {\r\n                let penultBodyFragment = this.body[this.body.length - 2],\r\n                    tail = this.tail;\r\n\r\n                if(tail[0] > penultBodyFragment[0]) return 'right';\r\n                if(tail[0] < penultBodyFragment[0]) return 'left';\r\n\r\n                if(tail[1] > penultBodyFragment[1]) return 'down';\r\n                if(tail[1] < penultBodyFragment[1]) return 'up';\r\n\r\n            }\r\n        }\r\n    });\r\n\r\n    game.engine.add(this);\r\n    const snakeControls = new SnakeControls(this, this.playerProps.keyMap, this.playerProps.touchMap || false);\r\n\r\n    var progressMove = 0;\r\n    const movement = (deltaTime) => {\r\n\r\n        let speed = this.playerProps.speed || gameProps.snakes.speed;\r\n        let progress = deltaTime * speed;\r\n    \r\n        if(~~progress <= ~~progressMove) return;\r\n\r\n        snakeControls.currentMovement();\r\n\r\n        progressMove = progress != speed ? progress : 0;\r\n        \r\n        this.increase < 1 ? this.body.pop() : this.increase--;\r\n        this.body.splice(0, 0, nextPos());\r\n\r\n    }\r\n\r\n    const nextPos = () => {\r\n\r\n        let direction = directionMap[this.direction],\r\n            axis = Math.abs(direction[1]),\r\n            nextPos = [...this.body[0]];\r\n\r\n        nextPos[axis] += direction[axis];\r\n\r\n        if(nextPos[axis] >= gameProps.tiles[axis]) nextPos[axis] = 0;\r\n        else if(nextPos[axis] < 0) nextPos[axis] = gameProps.tiles[axis] - 1;\r\n\r\n        return nextPos;\r\n\r\n    }\r\n\r\n    this.update = (deltaTime) => {\r\n        if(this.body.length && !this.killed){\r\n            movement(deltaTime);\r\n        }\r\n    }\r\n\r\n    this.draw = () => {\r\n\r\n        if(this.killed) return;\r\n\r\n        game.ctx.fillStyle = this.playerProps.color;\r\n\r\n        this.body.forEach(bodyFragment => {\r\n            game.ctx.fillRect(\r\n                bodyFragment[0] * game.tileSize,\r\n                bodyFragment[1] * game.tileSize,\r\n                game.tileSize,\r\n                game.tileSize\r\n            );\r\n        });\r\n\r\n    }\r\n\r\n}\r\n\r\nSnake.prototype.newBody = function(){\r\n\r\n    var bodyStart = this.playerProps.bodyStart || gameProps.snakes.bodyStart,\r\n        from = [bodyStart[0], bodyStart[1]],\r\n        to = bodyStart[2];\r\n\r\n    this.body = [from];\r\n\r\n    var initialSize = this.playerProps.initialSize || gameProps.snakes.initialSize;\r\n    for (let i = 1; i < initialSize; i++) {\r\n\r\n        this.body.push([]);\r\n\r\n        let newPos = [...from];\r\n\r\n        switch(to){\r\n\r\n            case 'right':\r\n            case 'left':\r\n                newPos[0] = to == 'right' ? from[0]+i : from[0]-i;\r\n                break;\r\n\r\n            case 'up':\r\n            case 'down':\r\n                newPos[1] = to == 'down' ? from[1]+i : from[1]-i;\r\n                break;\r\n\r\n        }\r\n\r\n        for (let axis = 0; axis <= 1; axis++) {\r\n\r\n            if(newPos[axis] < 0) newPos[axis] = gameProps.tiles[axis] - Math.abs(newPos[axis]);\r\n            if(newPos[axis] >= gameProps.tiles[axis]) newPos[axis] = newPos[axis] - gameProps.tiles[axis];\r\n            \r\n            this.body[i].push(newPos[axis]);\r\n            \r\n        }\r\n\r\n    }\r\n\r\n}","function SnakeControls(snake, _keysMap, _touchMap){\r\n\r\n    var keyMap = _keysMap ? [Object.keys(_keysMap), Object.values(_keysMap)] : _keysMap,\r\n        touchMap = _touchMap ? [Object.keys(_touchMap), Object.values(_touchMap)] : _touchMap,\r\n        orientation = null,\r\n        rowMovements = [];\r\n\r\n    const getOrientation = () => {\r\n        switch (window.orientation) {  \r\n            case 0:\r\n                orientation = 'portrait';\r\n                break; \r\n\r\n            case 180:\r\n                orientation = 'portrait-upsideDown';\r\n                break; \r\n\r\n            case -90:\r\n                orientation = 'landscape-clockwise';\r\n                break;  \r\n\r\n            case 90:\r\n                orientation = 'landscape';\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    window.addEventListener('orientationchange', getOrientation);\r\n    getOrientation();\r\n\r\n    window.addEventListener('keydown', function(e){\r\n\r\n        var key = keyMap[1].indexOf(e.key);\r\n        if(key > -1) rowMovements.push(keyMap[0][key]);\r\n\r\n    });\r\n\r\n    var touchstart = [], touchmovedMax = [], touchend = [];\r\n    touchMap && window.addEventListener('touchstart', e => touchstart = [e.changedTouches[0].screenX, e.changedTouches[0].screenY]);\r\n\r\n    var moved = [0, 0], lastMoved = [0, 0];\r\n    touchMap && window.addEventListener('touchmove', e => {\r\n\r\n        var touch, screen = [e.changedTouches[0].screenX, e.changedTouches[0].screenY];\r\n\r\n        if(screen[0] > lastMoved[0]) moved[0]++;\r\n\r\n        if(screen[1] > lastMoved[1]) moved[1]++;\r\n\r\n        if(screen[0] < lastMoved[0]) moved[0]--;\r\n\r\n        if(screen[1] < lastMoved[1]) moved[1]--;\r\n\r\n        if(orientation == 'landscape'){\r\n            moved[0] = -moved[0];\r\n            dragged.reverse();\r\n\r\n        }else if(orientation == 'landscape-clockwise'){\r\n            moved[1] = -moved[1];\r\n            dragged.reverse();\r\n\r\n        }else if(orientation == 'portrait-upsideDown'){\r\n            moved[0] = -moved[0];\r\n            moved[1] = -moved[1];\r\n        }\r\n\r\n        if(moved[0] <= -10){\r\n            touch = touchMap[1].indexOf('swipeLeft');\r\n            moved = [0, 0];\r\n        }\r\n\r\n        if(moved[0] >= 10){\r\n            touch = touchMap[1].indexOf('swipeRight');\r\n            moved = [0, 0];\r\n        }\r\n\r\n        if(moved[1] <= -10){\r\n            touch = touchMap[1].indexOf('swipeUp');\r\n            moved = [0, 0];\r\n        }\r\n\r\n        if(moved[1] >= 10){\r\n            touch = touchMap[1].indexOf('swipeDown');\r\n            moved = [0, 0];\r\n        }\r\n\r\n        keyMap[0][touch] && rowMovements[0] != keyMap[0][touch] && rowMovements.push(keyMap[0][touch]);\r\n\r\n        lastMoved = screen;\r\n\r\n    });\r\n\r\n    touchMap && window.addEventListener('touchend', e => {\r\n\r\n        moved = lastMoved = [0, 0];\r\n        \r\n    });\r\n\r\n    this.currentMovement = () => {\r\n\r\n        if(!rowMovements[0]) return;\r\n        snake.direction = rowMovements[0];\r\n        rowMovements.splice(0, 1);\r\n\r\n    }\r\n\r\n}","Array.prototype.isEqual = function(arr){\r\n\r\n    return JSON.stringify(this) === JSON.stringify(arr);\r\n\r\n}\r\n\r\nArray.prototype.sumWith = function(...arrays){\r\n    var arrays = [this, ...arrays].sort((a, b) => b.length - a.length), // Order by DESC\r\n        newArray = [...arrays[0]]; // Largest array of the list\r\n\r\n    for (let i = 1, arrLeng = arrays.length; i < arrLeng; i++) {\r\n        const array = arrays[i];\r\n        for (let j = 0, itemLeng = array.length; j < itemLeng; j++) {\r\n            const item = array[j];\r\n            newArray[j] += item;\r\n        }\r\n    }\r\n\r\n    return newArray;\r\n}"]}