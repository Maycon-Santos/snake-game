"use strict";function Engine(o){var e=this,a=o.ctx.canvas,s=[],l=function(e){for(var t=arguments.length,i=Array(1<t?t-1:0),r=1;r<t;r++)i[r-1]=arguments[r];for(var n=s.length;n--;){var o;"function"==typeof s[n][e]&&(o=s[n])[e].apply(o,i)}};this.run=function(){var r=e,n=performance.now();requestAnimationFrame(function e(t){var i=(t-n)/1e3;if(i=Math.min(1,i),l("update",i),o.ctx.clearRect(0,0,a.width,a.height),l("draw"),1<=i)return r.run();requestAnimationFrame(e)}.bind(e))},this.add=function(e){return s.push(e)}}function Food(e){var t,i=this,r=[];for(var n in this.position=[],gameProps.foods.types)for(var o=gameProps.foods.types[n],a=o.chance,s=0;s<a;s++)r.push(o);this.create=function(){var e=Math.round(Math.random()*(r.length-1));t=r[e],this.position=[[],[]].map(function(e,t){return Math.round(Math.random()*(gameProps.tiles[t]-1))})},this.update=function(){},this.draw=function(){e.ctx.fillStyle=t.color,e.ctx.beginPath(),e.ctx.arc(i.position[0]*e.tileSize+e.tileSize/2,i.position[1]*e.tileSize+e.tileSize/2,e.tileSize/2,0,2*Math.PI),e.ctx.closePath(),e.ctx.fill()}}function Game(t){var i;Object.defineProperty(this,"tileSize",{set:function(e){if(!+e)return console.error("Invalid value");i=Math.floor(+e),t.width=this.tileSize*gameProps.tiles[0],t.height=this.tileSize*gameProps.tiles[1]},get:function(){return i}}),Object.defineProperty(this,"ctx",{value:t.getContext("2d"),writable:!1}),this.players=[],this.foods=[],this.engine=new Engine(this),this.engine.add(this),new gameRules(this),this.addPlayers(),this.addFoods(),this.newGame(),this.resizeCanvas(),this.engine.run()}Game.prototype.newGame=function(){this.for("foods",function(e){e.create()}),this.for("players",function(e){e.newBody()})},Game.prototype.for=function(e,t){for(var i=this[e].length-1;0<=i;i--)t(this[e][i],i)},Game.prototype.addPlayers=function(){var e=new Snake(this,this.players.length);this.players.push(e),this.players.length<gameProps.snakes.players.length&&this.addPlayers()},Game.prototype.addFoods=function(){var e=new Food(this);this.engine.add(e),this.foods.push(e),this.foods.length<gameProps.foods.qnt&&this.addFoods()};var gameProps={tiles:[64,36],snakes:{speed:15,initialSize:3,bodyStart:[7,4,"left"],initialDirection:"right",reverse:!(Game.prototype.resizeCanvas=function(){var t=this,e=function(){var i=[window.innerWidth,window.innerHeight],e=[0,0].map(function(e,t){return i[t]/gameProps.tiles[t]});t.tileSize=e[e[0]>e[1]?1:0]};e(),window.addEventListener("resize",e)}),players:[{color:"#000000",bodyStart:[60,30,"down"],initialDirection:"left",keyMap:{left:"ArrowLeft",right:"ArrowRight",up:"ArrowUp",down:"ArrowDown"},touchMap:{left:"swipeLeft",right:"swipeRight",up:"swipeUp",down:"swipeDown"}},{color:"#ff0000",bodyStart:[6,6,"left"],keyMap:{left:"a",right:"d",up:"w",down:"s"}},{color:"#00ff00",bodyStart:[7,8,"left"],keyMap:{left:"j",right:"l",up:"i",down:"k"}}]},foods:{qnt:1,types:{normal:{chance:5,color:"#FFE400"},freezer:{chance:0,color:"#008F30"},superSpeed:{chance:0,color:"#008F30"}}}};function gameRules(i){i.engine.add(this);this.update=function(){i.for("players",function(r,n){if(!r.killed){for(var o=r.head,e=r.body.length-1;0<=e;e--)if(0<e&&r.body[e].isEqual(o))return r.collided=!0;!r.collided&&i.for("players",function(e,t){if(n!=t&&!e.killed)for(var i=e.body.length-1;0<=i;i--)if(e.body[i].isEqual(o))return r.collided=!0})}}),i.for("players",function(e){return e.killed=e.collided}),i.for("foods",function(t){i.for("players",function(e){e.head.isEqual(t.position)&&(e.increase++,t.create())})})}}function _toConsumableArray(e){if(Array.isArray(e)){for(var t=0,i=Array(e.length);t<e.length;t++)i[t]=e[t];return i}return Array.from(e)}function Snake(t,e){var n=this;this.id=e,this.body=[],this.increase=0,this.collided=!1,this.killed=!1,this.playerProps=gameProps.snakes.players[e];var o={left:[-1,0],right:[1,0],up:[0,-1],down:[0,1]},a=this.playerProps.initialDirection||gameProps.snakes.initialDirection;Object.defineProperty(this,"direction",{get:function(){return a},set:function(e){var t=Object.keys(o),i=a,r=n.playerProps.reverse||gameProps.snakes.reverse;t.includes(e)&&(a=e),c().isEqual(n.body[1])&&(r?(a=n.tailDirection,n.body.reverse()):a=i)}}),Object.defineProperties(this,{head:{get:function(){return n.body[0]}},tail:{get:function(){return n.body[n.body.length-1]}},tailDirection:{get:function(){var e=n.body[n.body.length-2],t=n.tail;return t[0]>e[0]?"right":t[0]<e[0]?"left":t[1]>e[1]?"down":t[1]<e[1]?"up":void 0}}}),t.engine.add(this);var s=new SnakeControls(this,this.playerProps.keyMap,this.playerProps.touchMap||!1),l=0,c=function(){var e=o[n.direction],t=Math.abs(e[1]),i=[].concat(_toConsumableArray(n.body[0]));return i[t]+=e[t],i[t]>=gameProps.tiles[t]?i[t]=0:i[t]<0&&(i[t]=gameProps.tiles[t]-1),i};this.update=function(e){var t,i,r;n.body.length&&!n.killed&&(t=e,i=n.playerProps.speed||gameProps.snakes.speed,~~(r=t*i)<=~~l||(s.currentMovement(),l=r!=i?r:0,n.increase<1?n.body.pop():n.increase--,n.body.splice(0,0,c())))},this.draw=function(){n.killed||(t.ctx.fillStyle=n.playerProps.color,n.body.forEach(function(e){t.ctx.fillRect(e[0]*t.tileSize,e[1]*t.tileSize,t.tileSize,t.tileSize)}))}}function SnakeControls(e,t,i){var r=t?[Object.keys(t),Object.values(t)]:t,n=i?[Object.keys(i),Object.values(i)]:i,o=null,a=[],s=function(){switch(window.orientation){case 0:o="portrait";break;case 180:o="portrait-upsideDown";break;case-90:o="landscape-clockwise";break;case 90:o="landscape"}};window.addEventListener("orientationchange",s),s(),window.addEventListener("keydown",function(e){var t=r[1].indexOf(e.key);-1<t&&a.push(r[0][t])});n&&window.addEventListener("touchstart",function(e){return[e.changedTouches[0].screenX,e.changedTouches[0].screenY]});var l=[0,0],c=[0,0];n&&window.addEventListener("touchmove",function(e){var t,i=[e.changedTouches[0].screenX,e.changedTouches[0].screenY];i[0]>c[0]&&l[0]++,i[1]>c[1]&&l[1]++,i[0]<c[0]&&l[0]--,i[1]<c[1]&&l[1]--,"landscape"==o?(l[0]=-l[0],dragged.reverse()):"landscape-clockwise"==o?(l[1]=-l[1],dragged.reverse()):"portrait-upsideDown"==o&&(l[0]=-l[0],l[1]=-l[1]),l[0]<=-10&&(t=n[1].indexOf("swipeLeft"),l=[0,0]),10<=l[0]&&(t=n[1].indexOf("swipeRight"),l=[0,0]),l[1]<=-10&&(t=n[1].indexOf("swipeUp"),l=[0,0]),10<=l[1]&&(t=n[1].indexOf("swipeDown"),l=[0,0]),r[0][t]&&a[0]!=r[0][t]&&a.push(r[0][t]),c=i}),n&&window.addEventListener("touchend",function(e){l=c=[0,0]}),this.currentMovement=function(){a[0]&&(e.direction=a[0],a.splice(0,1))}}function _toConsumableArray(e){if(Array.isArray(e)){for(var t=0,i=Array(e.length);t<e.length;t++)i[t]=e[t];return i}return Array.from(e)}Snake.prototype.newBody=function(){var e=this.playerProps.bodyStart||gameProps.snakes.bodyStart,t=[e[0],e[1]],i=e[2];this.body=[t];for(var r=this.playerProps.initialSize||gameProps.snakes.initialSize,n=1;n<r;n++){this.body.push([]);var o=[].concat(t);switch(i){case"right":case"left":o[0]="right"==i?t[0]+n:t[0]-n;break;case"up":case"down":o[1]="down"==i?t[1]+n:t[1]-n}for(var a=0;a<=1;a++)o[a]<0&&(o[a]=gameProps.tiles[a]-Math.abs(o[a])),o[a]>=gameProps.tiles[a]&&(o[a]=o[a]-gameProps.tiles[a]),this.body[n].push(o[a])}},Array.prototype.isEqual=function(e){return JSON.stringify(this)===JSON.stringify(e)},Array.prototype.sumWith=function(){for(var e=arguments.length,t=Array(e),i=0;i<e;i++)t[i]=arguments[i];t=[this].concat(_toConsumableArray(t)).sort(function(e,t){return t.length-e.length});for(var r=[].concat(_toConsumableArray(t[0])),n=1,o=t.length;n<o;n++)for(var a=t[n],s=0,l=a.length;s<l;s++){var c=a[s];r[s]+=c}return r};
//# sourceMappingURL=snakeGame.js.map
