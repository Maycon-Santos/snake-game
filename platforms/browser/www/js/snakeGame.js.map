{"version":3,"sources":["Engine.js","Food.js","Game.js","gameProps.js","gameRules.js","Snake.js","snakeControls.js","ultils/Array.js"],"names":["Engine","game","_this","this","canvas","ctx","objects","runFunction","fn","_len","arguments","length","args","Array","_key","i","_objects$i","apply","run","engine","start","performance","now","requestAnimationFrame","timestamp","deltaTime","Math","min","clearRect","width","height","bind","add","object","push","Food","type","foodTypes","key","position","gameProps","foods","types","foodType","chance","create","selectFood","round","random","map","_","axis","tiles","update","draw","fillStyle","color","beginPath","arc","tileSize","PI","closePath","fill","Game","Object","defineProperty","set","val","console","error","floor","get","value","getContext","writable","players","rules","gameRules","addPlayers","addFoods","newGame","resizeCanvas","prototype","for","food","player","newBody","id","Snake","snakes","qnt","speed","initialSize","bodyStart","initialDirection","reverse","winSize","window","innerWidth","innerHeight","addEventListener","keyMap","left","right","up","down","normal","freezer","superSpeed","killed","playerHead","head","index","body","isEqual","collided","otherPlayer","otherID","increase","playerProps","directionMap","direction","to","directions","keys","oldDirection","includes","nextPos","tailDirection","defineProperties","tail","penultBodyFragment","snakeControls","progressMove","abs","progress","pop","splice","forEach","bodyFragment","fillRect","snake","_keysMap","values","e","indexOf","from","xPos","yPos","arr","JSON","stringify","sumWith","arrays","concat","_toConsumableArray","sort","a","b","newArray","arrLeng","array","j","itemLeng","item"],"mappings":"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","file":"snakeGame.js","sourcesContent":["function Engine(game){\r\n\r\n    var canvas = game.ctx.canvas;\r\n\r\n    var objects = [];\r\n\r\n    const runFunction = (fn, ...args) => {\r\n\r\n        var i = objects.length;\r\n\r\n        while(i--){\r\n            if(typeof objects[i][fn] == 'function') objects[i][fn](...args);\r\n        }\r\n\r\n    }\r\n\r\n    const update = (deltaTime) => runFunction('update', deltaTime);\r\n\r\n    const draw = () => {\r\n        game.ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        runFunction('draw');\r\n    }\r\n\r\n\r\n    this.run = () => {\r\n\r\n        let engine = this,\r\n            start = performance.now();\r\n\r\n        requestAnimationFrame(function run(timestamp){\r\n\r\n            let deltaTime = (timestamp - start) / 1000;\r\n            deltaTime = Math.min(1, deltaTime);\r\n\r\n            update(deltaTime);\r\n            draw();\r\n\r\n            if(deltaTime >= 1) return engine.run();\r\n            requestAnimationFrame(run);\r\n\r\n        }.bind(this));\r\n\r\n    }\r\n\r\n    this.add = (object) => objects.push(object);\r\n\r\n}","function Food(game){\r\n\r\n    var foodTypes = [], type;\r\n\r\n    this.position = [];\r\n\r\n    for (const key in gameProps.foods.types) {\r\n        const foodType = gameProps.foods.types[key],\r\n              chance = foodType.chance;\r\n\r\n        for (let i = 0; i < chance; i++) foodTypes.push(foodType);\r\n    }\r\n\r\n    this.create = function(){\r\n\r\n        const selectFood = Math.round(Math.random() * (foodTypes.length - 1));\r\n\r\n        type = foodTypes[selectFood];\r\n\r\n        this.position = [[], []].map((_, axis) => Math.round(Math.random() * (gameProps.tiles[axis] - 1)));\r\n    \r\n    }\r\n\r\n    this.update = () => {\r\n    }\r\n\r\n    this.draw = () => {\r\n\r\n        game.ctx.fillStyle = type.color;\r\n\r\n        game.ctx.beginPath();\r\n\r\n        game.ctx.arc(\r\n            this.position[0] * game.tileSize + game.tileSize / 2,\r\n            this.position[1] * game.tileSize + game.tileSize / 2,\r\n            game.tileSize / 2,\r\n            0,\r\n            Math.PI * 2\r\n        );\r\n        \r\n        game.ctx.closePath();\r\n\r\n        game.ctx.fill();\r\n\r\n    }\r\n\r\n}","function Game(canvas){\r\n\r\n    // Properties\r\n    var tileSize;\r\n    Object.defineProperty(this, 'tileSize', {\r\n        set: function(val){\r\n            if(+val) tileSize = Math.floor(+val);\r\n            else return console.error('Invalid value');\r\n            canvas.width = this.tileSize * gameProps.tiles[0];\r\n            canvas.height = this.tileSize * gameProps.tiles[1];\r\n        },\r\n        get: function(){ return tileSize; }\r\n    });\r\n\r\n    Object.defineProperty(this, 'ctx', {\r\n        value: canvas.getContext('2d'),\r\n        writable: false\r\n    });\r\n\r\n    this.players = [];\r\n    this.foods = [];\r\n\r\n    this.engine = new Engine(this);\r\n    this.engine.add(this);\r\n\r\n    this.rules = new gameRules(this);\r\n\r\n    this.addPlayers();\r\n    this.addFoods();\r\n\r\n    this.newGame();\r\n\r\n    this.resizeCanvas();\r\n    this.engine.run();\r\n\r\n}\r\n\r\nGame.prototype.newGame = function(){\r\n\r\n    this.for('foods', food => {\r\n        food.create();\r\n    });\r\n\r\n    this.for('players', player => {\r\n        player.newBody();\r\n    });\r\n\r\n}\r\n\r\nGame.prototype.for = function(object, fn){\r\n    for (let id = this[object].length-1; id >= 0; id--)\r\n        fn(this[object][id], id);\r\n}\r\n\r\nGame.prototype.addPlayers = function(){\r\n\r\n    let player = new Snake(this, this.players.length);\r\n\r\n    this.players.push(player);\r\n\r\n    if(this.players.length < gameProps.snakes.players.length)\r\n        this.addPlayers();\r\n\r\n}\r\n\r\nGame.prototype.addFoods = function(){\r\n    let food = new Food(this);\r\n\r\n    this.engine.add(food);\r\n    this.foods.push(food);\r\n\r\n    if(this.foods.length < gameProps.foods.qnt)\r\n        this.addFoods();\r\n}\r\n\r\nGame.prototype.resizeCanvas = function(){\r\n\r\n    const resizeCanvas = () => {\r\n       \r\n        let winSize = [window.innerWidth, window.innerHeight]; // X, Y\r\n        let tileSize = [0, 0].map((val, i) => winSize[i] / gameProps.tiles[i]);\r\n        this.tileSize = tileSize[tileSize[0] > tileSize[1] ? 1 : 0];\r\n        \r\n    }\r\n\r\n    resizeCanvas();\r\n    window.addEventListener('resize', resizeCanvas);\r\n\r\n}","var gameProps = {\r\n    tiles: [64, 36], // X, Y\r\n\r\n    snakes: {\r\n        speed: 15,\r\n        initialSize: 10,\r\n        bodyStart: [7, 4, 'left'],\r\n        initialDirection: 'right',\r\n        reverse: false,\r\n\r\n        players: [\r\n            {\r\n                color: \"#000000\",\r\n                bodyStart: [8, 4, 'up'],\r\n                keyMap: {left: \"ArrowLeft\", right: \"ArrowRight\", up: \"ArrowUp\", down: \"ArrowDown\"}\r\n            },\r\n            {\r\n                color: \"#ff0000\",\r\n                bodyStart: [6, 6, 'left'],\r\n                keyMap: {left: \"a\", right: \"d\", up: \"w\", down: \"s\"}\r\n            },\r\n            {\r\n                color: \"#00ff00\",\r\n                bodyStart: [7, 8, 'left'],\r\n                keyMap: {left: \"j\", right: \"l\", up: \"i\", down: \"k\"}\r\n            }\r\n        ]\r\n    },\r\n\r\n    foods: {\r\n        qnt: 1,\r\n\r\n        types: {\r\n            normal: {\r\n                chance: 5,\r\n                color: '#FFE400'\r\n            },\r\n\r\n            freezer: {\r\n                chance: 0,\r\n                color: '#008F30'\r\n            },\r\n\r\n            superSpeed: {\r\n                chance: 0,\r\n                color: '#008F30'\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}","function gameRules(game){\r\n\r\n    game.engine.add(this);\r\n\r\n    const snakeColision = () => {\r\n\r\n        game.for('players', (player, id) => {\r\n\r\n            if(player.killed) return;\r\n\r\n            let playerHead = player.head; // For performance. Accessing an object several times is heavy\r\n\r\n            // player.body.every((bodyFragment, index) => {\r\n            //     player.collided = index > 0 && bodyFragment.isEqual(playerHead);\r\n            //     console.log(index, bodyFragment.isEqual(playerHead));\r\n            //     if(player.collided) return; // Break the loop\r\n            // });\r\n\r\n            for (let index = player.body.length - 1; index >= 0; index--) {\r\n\r\n                if(index > 0 && player.body[index].isEqual(playerHead))\r\n                    return player.collided = true;\r\n\r\n            }\r\n\r\n            !player.collided && game.for('players', (otherPlayer, otherID) => {\r\n\r\n                if(id == otherID || otherPlayer.killed) return;\r\n\r\n                for (let index = otherPlayer.body.length - 1; index >= 0; index--) {\r\n\r\n                    if(otherPlayer.body[index].isEqual(playerHead))\r\n                        return player.collided = true;\r\n\r\n                }\r\n\r\n            });\r\n\r\n        });\r\n\r\n        game.for('players', player => player.killed = player.collided); // Kill the player if collided\r\n    \r\n    }\r\n\r\n    const snakeAteFood = () => {\r\n        game.for('foods', food => {\r\n            game.for('players', player => {\r\n                if(player.head.isEqual(food.position)){\r\n                    player.increase++;\r\n                    food.create();\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    this.update = () => {\r\n\r\n        snakeColision();\r\n        snakeAteFood();\r\n\r\n    }\r\n\r\n}","function Snake(game, id){\r\n\r\n    this.id = id;\r\n    this.body = [];\r\n\r\n    this.increase = 0;\r\n    this.collided = false;\r\n    this.killed = false;\r\n\r\n    this.playerProps = gameProps.snakes.players[id];\r\n\r\n    var directionMap = {\r\n        'left': [-1, 0],\r\n        'right': [1, 0],\r\n        'up': [0, -1],\r\n        'down': [0, 1]\r\n    }\r\n\r\n    var direction = this.playerProps.initialDirection || gameProps.snakes.initialDirection;\r\n    Object.defineProperty(this, 'direction', {\r\n        get: () => direction,\r\n        set: (to) => {\r\n\r\n            let directions = Object.keys(directionMap), // X, Y\r\n                oldDirection = direction,\r\n                reverse = this.playerProps.reverse || gameProps.snakes.reverse;\r\n\r\n            if(directions.includes(to)) direction = to;\r\n\r\n            if(nextPos().isEqual(this.body[1])){\r\n\r\n                if(!reverse) direction = oldDirection;\r\n                else{\r\n                    direction = this.tailDirection;\r\n                    this.body.reverse();\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n    });\r\n\r\n    Object.defineProperties(this, {\r\n        head: { get: () => this.body[0] },\r\n        tail: { get: () => this.body[this.body.length - 1]},\r\n        tailDirection: {\r\n            get: () => {\r\n                let penultBodyFragment = this.body[this.body.length - 2],\r\n                    tail = this.tail;\r\n\r\n                if(tail[0] > penultBodyFragment[0]) return 'right';\r\n                if(tail[0] < penultBodyFragment[0]) return 'left';\r\n\r\n                if(tail[1] > penultBodyFragment[1]) return 'down';\r\n                if(tail[1] < penultBodyFragment[1]) return 'up';\r\n\r\n            }\r\n        }\r\n    });\r\n\r\n    game.engine.add(this);\r\n    snakeControls(this, this.playerProps.keyMap);\r\n\r\n    var progressMove = 0;\r\n    const movement = (deltaTime) => {\r\n\r\n        let speed = this.playerProps.speed || gameProps.snakes.speed;\r\n        let progress = deltaTime * speed;\r\n    \r\n        if(~~progress <= ~~progressMove) return;\r\n\r\n        progressMove = progress != speed ? progress : 0;\r\n        \r\n        this.increase < 1 ? this.body.pop() : this.increase--;\r\n        this.body.splice(0, 0, nextPos());\r\n\r\n    }\r\n\r\n    const nextPos = () => {\r\n\r\n        let direction = directionMap[this.direction],\r\n            axis = Math.abs(direction[1]),\r\n            nextPos = [...this.body[0]];\r\n\r\n        nextPos[axis] += direction[axis];\r\n\r\n        if(nextPos[axis] >= gameProps.tiles[axis]) nextPos[axis] = 0;\r\n        else if(nextPos[axis] < 0) nextPos[axis] = gameProps.tiles[axis] - 1;\r\n\r\n        return nextPos;\r\n\r\n    }\r\n\r\n    this.update = (deltaTime) => {\r\n        if(this.body.length && !this.killed){\r\n            movement(deltaTime);\r\n        }\r\n    }\r\n\r\n    this.draw = () => {\r\n\r\n        if(this.killed) return;\r\n\r\n        game.ctx.fillStyle = this.playerProps.color;\r\n\r\n        this.body.forEach(bodyFragment => {\r\n            game.ctx.fillRect(\r\n                bodyFragment[0] * game.tileSize,\r\n                bodyFragment[1] * game.tileSize,\r\n                game.tileSize,\r\n                game.tileSize\r\n            );\r\n        });\r\n\r\n    }\r\n\r\n}\r\n\r\nSnake.prototype.newBody = function(){\r\n\r\n    var bodyStart = this.playerProps.bodyStart || gameProps.snakes.bodyStart,\r\n        from = [bodyStart[0], bodyStart[1]],\r\n        to = bodyStart[2];\r\n\r\n    this.body = [from];\r\n\r\n    var initialSize = this.playerProps.initialSize || gameProps.snakes.initialSize;\r\n    for (let i = 1; i < initialSize; i++) {\r\n\r\n        this.body.push([]);\r\n\r\n        let xPos = from[0], yPos = from[1];\r\n\r\n        switch(to){\r\n\r\n            case 'right':\r\n            case 'left':\r\n                xPos = to == 'right' ? from[0]+i : from[0]-i;\r\n                break;\r\n\r\n            case 'up':\r\n            case 'down':\r\n                yPos = to == 'down' ? from[1]+i : from[1]-i;\r\n                break;\r\n\r\n        }\r\n\r\n        this.body[i].push(xPos); // X\r\n        this.body[i].push(yPos); // Y\r\n\r\n    }\r\n\r\n}","function snakeControls(snake, _keysMap){\r\n\r\n    var keyMap = [Object.keys(_keysMap), Object.values(_keysMap)];\r\n\r\n    window.addEventListener('keydown', function(e){\r\n\r\n        var key = keyMap[1].indexOf(e.key);\r\n        if(key > -1) snake.direction = keyMap[0][key];\r\n\r\n    });\r\n\r\n}","Array.prototype.isEqual = function(arr){\r\n\r\n    return JSON.stringify(this) === JSON.stringify(arr);\r\n\r\n}\r\n\r\nArray.prototype.sumWith = function(...arrays){\r\n    var arrays = [this, ...arrays].sort((a, b) => b.length - a.length), // Order by DESC\r\n        newArray = [...arrays[0]]; // Largest array of the list\r\n\r\n    for (let i = 1, arrLeng = arrays.length; i < arrLeng; i++) {\r\n        const array = arrays[i];\r\n        for (let j = 0, itemLeng = array.length; j < itemLeng; j++) {\r\n            const item = array[j];\r\n            newArray[j] += item;\r\n        }\r\n    }\r\n\r\n    return newArray;\r\n}"]}